ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.text.MX_GPIO_Init,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	MX_GPIO_Init:
  27              	.LFB136:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2025 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include <inttypes.h>  // for PRIu64
  22:Core/Src/main.c **** #include <string.h>
  23:Core/Src/main.c **** 
  24:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  25:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* USER CODE END Includes */
  28:Core/Src/main.c **** 
  29:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  30:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  31:Core/Src/main.c **** 
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 2


  32:Core/Src/main.c **** /* USER CODE END PTD */
  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  35:Core/Src/main.c **** /* USER CODE BEGIN PD */
  36:Core/Src/main.c **** #define MAX_ITER 100
  37:Core/Src/main.c **** #define MEMORY_LIMIT 144000
  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* USER CODE END PD */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  43:Core/Src/main.c **** /* USER CODE BEGIN PM */
  44:Core/Src/main.c **** 
  45:Core/Src/main.c **** /* USER CODE END PM */
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** /* USER CODE BEGIN PV */
  50:Core/Src/main.c **** //TODO: Define variables you think you might need
  51:Core/Src/main.c **** // - Performance timing variables (e.g execution time, throughput, pixels per second, clock cycles)
  52:Core/Src/main.c **** uint64_t start_time = 0;
  53:Core/Src/main.c **** uint64_t end_time = 0;
  54:Core/Src/main.c **** int imageDimensions[5] = {128, 160, 192, 224, 256};
  55:Core/Src/main.c **** uint64_t checksum = 0;
  56:Core/Src/main.c **** uint64_t execution_time = 0;
  57:Core/Src/main.c **** int initial_height = 128;
  58:Core/Src/main.c **** int initial_width = 128;
  59:Core/Src/main.c **** 
  60:Core/Src/main.c **** // arrays for task 1
  61:Core/Src/main.c **** uint64_t timeArray_arithmetic[5] = {0, 0, 0, 0, 0};
  62:Core/Src/main.c **** uint64_t timeArray_double[5] = {0, 0, 0, 0, 0};
  63:Core/Src/main.c **** uint64_t checksumArray_arithmetic[5] = {0, 0, 0, 0, 0};
  64:Core/Src/main.c **** uint64_t checksumArray_double[5] = {0, 0, 0, 0, 0};
  65:Core/Src/main.c **** 
  66:Core/Src/main.c **** // arrays for task 2
  67:Core/Src/main.c **** int iterationsArray[5] = {100, 250, 500, 750, 1000};
  68:Core/Src/main.c **** uint64_t task2ArrayChecksum[5][5];
  69:Core/Src/main.c **** uint64_t task2ArrayTime[5][5];
  70:Core/Src/main.c **** 
  71:Core/Src/main.c **** // task 4 variables
  72:Core/Src/main.c **** const int sizes[5][2] = {   // gradually increasing quality
  73:Core/Src/main.c **** 		{160, 120},     // small
  74:Core/Src/main.c **** 		{320, 240},     // QVGA
  75:Core/Src/main.c **** 		{640, 480},     // VGA
  76:Core/Src/main.c **** 		{1280, 720},    // HD
  77:Core/Src/main.c **** 		{1920, 1080}    // Full HD
  78:Core/Src/main.c **** };
  79:Core/Src/main.c **** uint64_t task4ArrayChecksum[5];
  80:Core/Src/main.c **** uint64_t task4ArrayTime[5];
  81:Core/Src/main.c **** 
  82:Core/Src/main.c **** // task 7 variables
  83:Core/Src/main.c **** int arrayQ[3] = {10 , 13, 20};		// these values are roughly the binary equivalent of 10^3, 10^4 and
  84:Core/Src/main.c **** uint64_t task7ArrayChecksum[3][5];
  85:Core/Src/main.c **** uint64_t task7ArrayTime[3][5];
  86:Core/Src/main.c **** 
  87:Core/Src/main.c **** // MJ variables
  88:Core/Src/main.c **** volatile double time_sec;
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 3


  89:Core/Src/main.c **** volatile uint32_t total_runtime_ms;
  90:Core/Src/main.c **** uint64_t  checkSumArr[5] = {0};
  91:Core/Src/main.c **** uint64_t execution_timeArr[5] = {0};
  92:Core/Src/main.c **** //volatile uint64_t cycles;
  93:Core/Src/main.c **** //volatile double throughput;
  94:Core/Src/main.c **** uint32_t runtime = 0;
  95:Core/Src/main.c **** 
  96:Core/Src/main.c **** /* USER CODE END PV */
  97:Core/Src/main.c **** 
  98:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  99:Core/Src/main.c **** void SystemClock_Config(void);
 100:Core/Src/main.c **** static void MX_GPIO_Init(void);
 101:Core/Src/main.c **** /* USER CODE BEGIN PFP */
 102:Core/Src/main.c **** //TODO: Define any function prototypes you might need such as the calculate Mandelbrot function amo
 103:Core/Src/main.c **** uint64_t calculate_mandelbrot_fixed_point_arithmetic(int width, int height, int max_iterations, int
 104:Core/Src/main.c **** uint64_t calculate_mandelbrot_double(int width, int height, int max_iterations);
 105:Core/Src/main.c **** void task1(int iter);
 106:Core/Src/main.c **** void task2();
 107:Core/Src/main.c **** void task4();
 108:Core/Src/main.c **** void task7();
 109:Core/Src/main.c **** static inline void cycle_counter_init(void);
 110:Core/Src/main.c **** static inline uint32_t cycle_counter_get(void);
 111:Core/Src/main.c **** static inline uint64_t cycle_diff(uint32_t start, uint32_t end);
 112:Core/Src/main.c **** 
 113:Core/Src/main.c **** /* USER CODE END PFP */
 114:Core/Src/main.c **** 
 115:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 116:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 117:Core/Src/main.c **** 
 118:Core/Src/main.c **** /* USER CODE END 0 */
 119:Core/Src/main.c **** 
 120:Core/Src/main.c **** /**
 121:Core/Src/main.c ****   * @brief  The application entry point.
 122:Core/Src/main.c ****   * @retval int
 123:Core/Src/main.c ****   */
 124:Core/Src/main.c **** int main(void)
 125:Core/Src/main.c **** {
 126:Core/Src/main.c **** 
 127:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 128:Core/Src/main.c **** 
 129:Core/Src/main.c ****   /* USER CODE END 1 */
 130:Core/Src/main.c **** 
 131:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 132:Core/Src/main.c **** 
 133:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 134:Core/Src/main.c ****   HAL_Init();
 135:Core/Src/main.c **** 
 136:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 137:Core/Src/main.c **** 
 138:Core/Src/main.c ****   /* USER CODE END Init */
 139:Core/Src/main.c **** 
 140:Core/Src/main.c ****   /* Configure the system clock */
 141:Core/Src/main.c ****   SystemClock_Config();
 142:Core/Src/main.c **** 
 143:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 144:Core/Src/main.c **** 
 145:Core/Src/main.c ****   /* USER CODE END SysInit */
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 4


 146:Core/Src/main.c **** 
 147:Core/Src/main.c ****   /* Initialize all configured peripherals */
 148:Core/Src/main.c ****   MX_GPIO_Init();
 149:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 150:Core/Src/main.c **** 
 151:Core/Src/main.c ****   // ======================================================================================
 152:Core/Src/main.c **** 
 153:Core/Src/main.c **** /*
 154:Core/Src/main.c ****  * uint32_t start, end;
 155:Core/Src/main.c **** 
 156:Core/Src/main.c **** 
 157:Core/Src/main.c ****    cycle_counter_init();
 158:Core/Src/main.c **** 
 159:Core/Src/main.c ****    for(int i = 0; i < 5; i++)
 160:Core/Src/main.c ****    {
 161:Core/Src/main.c **** 
 162:Core/Src/main.c **** 
 163:Core/Src/main.c ****    start_time = HAL_GetTick();
 164:Core/Src/main.c ****    start = DWT->CYCCNT;
 165:Core/Src/main.c **** 
 166:Core/Src/main.c **** 
 167:Core/Src/main.c **** 
 168:Core/Src/main.c ****    //uint32_t pixels = initial_height*initial_width;
 169:Core/Src/main.c ****    //getting the start cycle to get the cycle count
 170:Core/Src/main.c ****    uint32_t start_cycle = cycle_counter_get();
 171:Core/Src/main.c **** 
 172:Core/Src/main.c **** 
 173:Core/Src/main.c ****     //TODO: Call the Mandelbrot Function and store the output in the checksum variable defined init
 174:Core/Src/main.c ****     //checksum = calculate_mandelbrot_fixed_point_arithmetic(imageDimensions[i], imageDimensions[i]
 175:Core/Src/main.c ****     //checksum = calculate_mandelbrot_double(imageDimensions[i], imageDimensions[i], MAX_ITER);
 176:Core/Src/main.c ****    checkSumArr[i] = calculate_mandelbrot_float(imageDimensions[i], imageDimensions[i], MAX_ITER);
 177:Core/Src/main.c **** 
 178:Core/Src/main.c ****     //TODO: Record the end time
 179:Core/Src/main.c ****    end_time = HAL_GetTick();
 180:Core/Src/main.c **** 
 181:Core/Src/main.c **** 
 182:Core/Src/main.c ****    end = DWT->CYCCNT;
 183:Core/Src/main.c ****    uint32_t cycles = end - start;
 184:Core/Src/main.c ****    time_sec = (double)cycles / SystemCoreClock;
 185:Core/Src/main.c **** 
 186:Core/Src/main.c **** 
 187:Core/Src/main.c **** 
 188:Core/Src/main.c **** 
 189:Core/Src/main.c **** 
 190:Core/Src/main.c ****    //getting the end cycle to get the cycle count
 191:Core/Src/main.c ****    uint32_t end_cycle = cycle_counter_get();
 192:Core/Src/main.c **** 
 193:Core/Src/main.c ****     cycles = cycle_diff(start_cycle,end_cycle);
 194:Core/Src/main.c **** 
 195:Core/Src/main.c ****     //TODO: Calculate the execution time
 196:Core/Src/main.c ****    execution_timeArr[i] = end_time - start_time;
 197:Core/Src/main.c ****  */
 198:Core/Src/main.c **** 
 199:Core/Src/main.c ****   // ======================================================================================
 200:Core/Src/main.c **** 
 201:Core/Src/main.c **** 
 202:Core/Src/main.c **** 
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 5


 203:Core/Src/main.c ****   /* USER CODE END WHILE */
 204:Core/Src/main.c **** 
 205:Core/Src/main.c ****   /* USER CODE BEGIN 3 */
 206:Core/Src/main.c ****   //TODO: Visual indicator: Turn on LED0 to signal processing start
 207:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 208:Core/Src/main.c **** 
 209:Core/Src/main.c **** 
 210:Core/Src/main.c ****   //TODO: Benchmark and Profile Performance
 211:Core/Src/main.c ****   checksum = calculate_mandelbrot_fixed_point_arithmetic(512, 512, 100, 16);
 212:Core/Src/main.c **** 
 213:Core/Src/main.c **** 
 214:Core/Src/main.c ****   //TODO: Visual indicator: Turn on LED1 to signal processing start
 215:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 216:Core/Src/main.c **** 
 217:Core/Src/main.c **** 
 218:Core/Src/main.c ****   //TODO: Keep the LEDs ON for 2s
 219:Core/Src/main.c ****   HAL_Delay(1000);
 220:Core/Src/main.c **** 
 221:Core/Src/main.c ****   //TODO: Turn OFF LEDs
 222:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 223:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 224:Core/Src/main.c **** 
 225:Core/Src/main.c **** 
 226:Core/Src/main.c ****   /* USER CODE END 2 */
 227:Core/Src/main.c **** 
 228:Core/Src/main.c ****   /* Infinite loop */
 229:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 230:Core/Src/main.c ****   while (1)
 231:Core/Src/main.c ****   {
 232:Core/Src/main.c **** //    /* USER CODE END WHILE */
 233:Core/Src/main.c **** //
 234:Core/Src/main.c **** //    /* USER CODE BEGIN 3 */
 235:Core/Src/main.c **** //	  //TODO: Visual indicator: Turn on LED0 to signal processing start
 236:Core/Src/main.c **** //	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 237:Core/Src/main.c **** //
 238:Core/Src/main.c **** //
 239:Core/Src/main.c **** //	  //TODO: Benchmark and Profile Performance
 240:Core/Src/main.c **** //	  task1();
 241:Core/Src/main.c **** //
 242:Core/Src/main.c **** //
 243:Core/Src/main.c **** //	  //TODO: Visual indicator: Turn on LED1 to signal processing start
 244:Core/Src/main.c **** //	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 245:Core/Src/main.c **** //
 246:Core/Src/main.c **** //
 247:Core/Src/main.c **** //	  //TODO: Keep the LEDs ON for 2s
 248:Core/Src/main.c **** //	  HAL_Delay(1000);
 249:Core/Src/main.c **** //
 250:Core/Src/main.c **** //	  //TODO: Turn OFF LEDs
 251:Core/Src/main.c **** //	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 252:Core/Src/main.c **** //	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 253:Core/Src/main.c ****   }
 254:Core/Src/main.c ****   /* USER CODE END 3 */
 255:Core/Src/main.c **** }
 256:Core/Src/main.c **** 
 257:Core/Src/main.c **** /**
 258:Core/Src/main.c ****   * @brief System Clock Configuration
 259:Core/Src/main.c ****   * @retval None
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 6


 260:Core/Src/main.c ****   */
 261:Core/Src/main.c **** void SystemClock_Config(void)
 262:Core/Src/main.c **** {
 263:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 264:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 265:Core/Src/main.c **** 
 266:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 267:Core/Src/main.c ****   */
 268:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 269:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 270:Core/Src/main.c **** 
 271:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 272:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 273:Core/Src/main.c ****   */
 274:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 275:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 276:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 277:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 278:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 15;
 279:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 144;
 280:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 281:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 282:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 283:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 284:Core/Src/main.c ****   {
 285:Core/Src/main.c ****     Error_Handler();
 286:Core/Src/main.c ****   }
 287:Core/Src/main.c **** 
 288:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 289:Core/Src/main.c ****   */
 290:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 291:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 292:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 293:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 294:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 295:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 296:Core/Src/main.c **** 
 297:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 298:Core/Src/main.c ****   {
 299:Core/Src/main.c ****     Error_Handler();
 300:Core/Src/main.c ****   }
 301:Core/Src/main.c **** }
 302:Core/Src/main.c **** 
 303:Core/Src/main.c **** /**
 304:Core/Src/main.c ****   * @brief GPIO Initialization Function
 305:Core/Src/main.c ****   * @param None
 306:Core/Src/main.c ****   * @retval None
 307:Core/Src/main.c ****   */
 308:Core/Src/main.c **** static void MX_GPIO_Init(void)
 309:Core/Src/main.c **** {
  28              		.loc 1 309 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 32
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 30B5     		push	{r4, r5, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 12
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 7


  35              		.cfi_offset 4, -12
  36              		.cfi_offset 5, -8
  37              		.cfi_offset 14, -4
  38 0002 89B0     		sub	sp, sp, #36
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 48
 310:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  41              		.loc 1 310 3 view .LVU1
  42              		.loc 1 310 20 is_stmt 0 view .LVU2
  43 0004 0024     		movs	r4, #0
  44 0006 0394     		str	r4, [sp, #12]
  45 0008 0494     		str	r4, [sp, #16]
  46 000a 0594     		str	r4, [sp, #20]
  47 000c 0694     		str	r4, [sp, #24]
  48 000e 0794     		str	r4, [sp, #28]
 311:Core/Src/main.c ****   /* USER CODE BEGIN MX_GPIO_Init_1 */
 312:Core/Src/main.c **** 
 313:Core/Src/main.c ****   /* USER CODE END MX_GPIO_Init_1 */
 314:Core/Src/main.c **** 
 315:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 316:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  49              		.loc 1 316 3 is_stmt 1 view .LVU3
  50              	.LBB4:
  51              		.loc 1 316 3 view .LVU4
  52 0010 0094     		str	r4, [sp]
  53              		.loc 1 316 3 view .LVU5
  54 0012 184B     		ldr	r3, .L3
  55 0014 1A6B     		ldr	r2, [r3, #48]
  56 0016 42F00402 		orr	r2, r2, #4
  57 001a 1A63     		str	r2, [r3, #48]
  58              		.loc 1 316 3 view .LVU6
  59 001c 1A6B     		ldr	r2, [r3, #48]
  60 001e 02F00402 		and	r2, r2, #4
  61 0022 0092     		str	r2, [sp]
  62              		.loc 1 316 3 view .LVU7
  63 0024 009A     		ldr	r2, [sp]
  64              	.LBE4:
  65              		.loc 1 316 3 view .LVU8
 317:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  66              		.loc 1 317 3 view .LVU9
  67              	.LBB5:
  68              		.loc 1 317 3 view .LVU10
  69 0026 0194     		str	r4, [sp, #4]
  70              		.loc 1 317 3 view .LVU11
  71 0028 1A6B     		ldr	r2, [r3, #48]
  72 002a 42F08002 		orr	r2, r2, #128
  73 002e 1A63     		str	r2, [r3, #48]
  74              		.loc 1 317 3 view .LVU12
  75 0030 1A6B     		ldr	r2, [r3, #48]
  76 0032 02F08002 		and	r2, r2, #128
  77 0036 0192     		str	r2, [sp, #4]
  78              		.loc 1 317 3 view .LVU13
  79 0038 019A     		ldr	r2, [sp, #4]
  80              	.LBE5:
  81              		.loc 1 317 3 view .LVU14
 318:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  82              		.loc 1 318 3 view .LVU15
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 8


  83              	.LBB6:
  84              		.loc 1 318 3 view .LVU16
  85 003a 0294     		str	r4, [sp, #8]
  86              		.loc 1 318 3 view .LVU17
  87 003c 1A6B     		ldr	r2, [r3, #48]
  88 003e 42F00202 		orr	r2, r2, #2
  89 0042 1A63     		str	r2, [r3, #48]
  90              		.loc 1 318 3 view .LVU18
  91 0044 1B6B     		ldr	r3, [r3, #48]
  92 0046 03F00203 		and	r3, r3, #2
  93 004a 0293     		str	r3, [sp, #8]
  94              		.loc 1 318 3 view .LVU19
  95 004c 029B     		ldr	r3, [sp, #8]
  96              	.LBE6:
  97              		.loc 1 318 3 view .LVU20
 319:Core/Src/main.c **** 
 320:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 321:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
  98              		.loc 1 321 3 view .LVU21
  99 004e 0A4D     		ldr	r5, .L3+4
 100 0050 2246     		mov	r2, r4
 101 0052 FF21     		movs	r1, #255
 102 0054 2846     		mov	r0, r5
 103 0056 FFF7FEFF 		bl	HAL_GPIO_WritePin
 104              	.LVL0:
 322:Core/Src/main.c ****                           |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 323:Core/Src/main.c **** 
 324:Core/Src/main.c ****   /*Configure GPIO pins : PB0 PB1 PB2 PB3
 325:Core/Src/main.c ****                            PB4 PB5 PB6 PB7 */
 326:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 105              		.loc 1 326 3 view .LVU22
 106              		.loc 1 326 23 is_stmt 0 view .LVU23
 107 005a FF23     		movs	r3, #255
 108 005c 0393     		str	r3, [sp, #12]
 327:Core/Src/main.c ****                           |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 328:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 109              		.loc 1 328 3 is_stmt 1 view .LVU24
 110              		.loc 1 328 24 is_stmt 0 view .LVU25
 111 005e 0123     		movs	r3, #1
 112 0060 0493     		str	r3, [sp, #16]
 329:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 113              		.loc 1 329 3 is_stmt 1 view .LVU26
 114              		.loc 1 329 24 is_stmt 0 view .LVU27
 115 0062 0594     		str	r4, [sp, #20]
 330:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 116              		.loc 1 330 3 is_stmt 1 view .LVU28
 117              		.loc 1 330 25 is_stmt 0 view .LVU29
 118 0064 0694     		str	r4, [sp, #24]
 331:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 119              		.loc 1 331 3 is_stmt 1 view .LVU30
 120 0066 03A9     		add	r1, sp, #12
 121 0068 2846     		mov	r0, r5
 122 006a FFF7FEFF 		bl	HAL_GPIO_Init
 123              	.LVL1:
 332:Core/Src/main.c **** 
 333:Core/Src/main.c ****   /* USER CODE BEGIN MX_GPIO_Init_2 */
 334:Core/Src/main.c **** 
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 9


 335:Core/Src/main.c ****   /* USER CODE END MX_GPIO_Init_2 */
 336:Core/Src/main.c **** }
 124              		.loc 1 336 1 is_stmt 0 view .LVU31
 125 006e 09B0     		add	sp, sp, #36
 126              	.LCFI2:
 127              		.cfi_def_cfa_offset 12
 128              		@ sp needed
 129 0070 30BD     		pop	{r4, r5, pc}
 130              	.L4:
 131 0072 00BF     		.align	2
 132              	.L3:
 133 0074 00380240 		.word	1073887232
 134 0078 00040240 		.word	1073873920
 135              		.cfi_endproc
 136              	.LFE136:
 138              		.global	__aeabi_ldivmod
 139              		.section	.text.calculate_mandelbrot_fixed_point_arithmetic,"ax",%progbits
 140              		.align	1
 141              		.global	calculate_mandelbrot_fixed_point_arithmetic
 142              		.syntax unified
 143              		.thumb
 144              		.thumb_func
 146              	calculate_mandelbrot_fixed_point_arithmetic:
 147              	.LVL2:
 148              	.LFB137:
 337:Core/Src/main.c **** 
 338:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 339:Core/Src/main.c **** //TODO: Function signatures you defined previously , implement them here
 340:Core/Src/main.c **** uint64_t calculate_mandelbrot_fixed_point_arithmetic(int width, int height, int max_iterations, int
 341:Core/Src/main.c **** {
 149              		.loc 1 341 1 is_stmt 1 view -0
 150              		.cfi_startproc
 151              		@ args = 0, pretend = 0, frame = 48
 152              		@ frame_needed = 0, uses_anonymous_args = 0
 153              		.loc 1 341 1 is_stmt 0 view .LVU33
 154 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 155              	.LCFI3:
 156              		.cfi_def_cfa_offset 36
 157              		.cfi_offset 4, -36
 158              		.cfi_offset 5, -32
 159              		.cfi_offset 6, -28
 160              		.cfi_offset 7, -24
 161              		.cfi_offset 8, -20
 162              		.cfi_offset 9, -16
 163              		.cfi_offset 10, -12
 164              		.cfi_offset 11, -8
 165              		.cfi_offset 14, -4
 166 0004 8DB0     		sub	sp, sp, #52
 167              	.LCFI4:
 168              		.cfi_def_cfa_offset 88
 169 0006 0746     		mov	r7, r0
 170 0008 0D46     		mov	r5, r1
 171 000a 0192     		str	r2, [sp, #4]
 172 000c 9B46     		mov	fp, r3
 342:Core/Src/main.c **** 	int Q = scale;
 173              		.loc 1 342 2 is_stmt 1 view .LVU34
 174              	.LVL3:
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 10


 343:Core/Src/main.c **** 	unsigned int ONE = 1 << Q;
 175              		.loc 1 343 2 view .LVU35
 176              		.loc 1 343 23 is_stmt 0 view .LVU36
 177 000e 0126     		movs	r6, #1
 178 0010 9E40     		lsls	r6, r6, r3
 179              	.LVL4:
 344:Core/Src/main.c ****     uint64_t mandelbrot_sum = 0;
 180              		.loc 1 344 5 is_stmt 1 view .LVU37
 345:Core/Src/main.c **** 
 346:Core/Src/main.c ****     // This function utilizes bit shifting to decreases the computational costs of division on deci
 347:Core/Src/main.c **** 
 348:Core/Src/main.c ****     // For the initial loop, x and y are zero so instead of computing it and lastly subtracting the
 349:Core/Src/main.c ****     // this code sets the initial starting point to the constant
 350:Core/Src/main.c ****     const int32_t x_left = -( (5 * ONE) / 2 ); // -2.5 as x starting point
 181              		.loc 1 350 5 view .LVU38
 182              		.loc 1 350 34 is_stmt 0 view .LVU39
 183 0012 0523     		movs	r3, #5
 184              	.LVL5:
 185              		.loc 1 350 34 view .LVU40
 186 0014 03FA0BF3 		lsl	r3, r3, fp
 187              		.loc 1 350 41 view .LVU41
 188 0018 5B08     		lsrs	r3, r3, #1
 189              		.loc 1 350 28 view .LVU42
 190 001a C3F10009 		rsb	r9, r3, #0
 191              	.LVL6:
 351:Core/Src/main.c ****     const int32_t y_top  = -ONE;               // -1.0 as y starting point
 192              		.loc 1 351 5 is_stmt 1 view .LVU43
 193              		.loc 1 351 28 is_stmt 0 view .LVU44
 194 001e 7342     		rsbs	r3, r6, #0
 195 0020 0293     		str	r3, [sp, #8]
 196              	.LVL7:
 352:Core/Src/main.c **** 
 353:Core/Src/main.c ****     // Instead of recomputing x*... and y*..., we just add the multiplication each loop as it would
 354:Core/Src/main.c ****     // This way addition uses less computational power than multiplication
 355:Core/Src/main.c ****     const int32_t x_step = (int32_t)(((int64_t)7 * ONE) / (2 * width));			// The 2 in the denominat
 197              		.loc 1 355 5 is_stmt 1 view .LVU45
 198              		.loc 1 355 50 is_stmt 0 view .LVU46
 199 0022 0024     		movs	r4, #0
 200 0024 710F     		lsrs	r1, r6, #29
 201              	.LVL8:
 202              		.loc 1 355 50 view .LVU47
 203 0026 F300     		lsls	r3, r6, #3
 204              	.LVL9:
 205              		.loc 1 355 50 view .LVU48
 206 0028 981B     		subs	r0, r3, r6
 207              	.LVL10:
 208              		.loc 1 355 57 view .LVU49
 209 002a 4FEA4702 		lsl	r2, r7, #1
 210              	.LVL11:
 211              		.loc 1 355 57 view .LVU50
 212 002e 47F38073 		sbfx	r3, r7, #30, #1
 213 0032 61F10001 		sbc	r1, r1, #0
 214 0036 FFF7FEFF 		bl	__aeabi_ldivmod
 215              	.LVL12:
 216              		.loc 1 355 19 view .LVU51
 217 003a 8046     		mov	r8, r0
 218              	.LVL13:
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 11


 356:Core/Src/main.c ****     const int32_t y_step = (int32_t)(((int64_t)2 * ONE) / height);				// Bit shift the top before d
 219              		.loc 1 356 5 is_stmt 1 view .LVU52
 220              		.loc 1 356 50 is_stmt 0 view .LVU53
 221 003c B019     		adds	r0, r6, r6
 222              	.LVL14:
 223              		.loc 1 356 50 view .LVU54
 224 003e 44EB0401 		adc	r1, r4, r4
 225              	.LVL15:
 226              		.loc 1 356 57 view .LVU55
 227 0042 2A46     		mov	r2, r5
 228 0044 EB17     		asrs	r3, r5, #31
 229 0046 FFF7FEFF 		bl	__aeabi_ldivmod
 230              	.LVL16:
 357:Core/Src/main.c **** 
 358:Core/Src/main.c ****     const int32_t FOUR = 4 * ONE;				// for condition in while loop
 231              		.loc 1 358 5 is_stmt 1 view .LVU56
 232              		.loc 1 358 28 is_stmt 0 view .LVU57
 233 004a 0423     		movs	r3, #4
 234 004c 03FA0BFA 		lsl	r10, r3, fp
 235              	.LVL17:
 359:Core/Src/main.c **** 
 360:Core/Src/main.c ****     int32_t y0 = y_top;				// starting constant
 236              		.loc 1 360 5 is_stmt 1 view .LVU58
 361:Core/Src/main.c ****     for (int y = 0; y < height; ++y) {
 237              		.loc 1 361 5 view .LVU59
 238              	.LBB7:
 239              		.loc 1 361 10 view .LVU60
 240              		.loc 1 361 14 is_stmt 0 view .LVU61
 241 0050 2346     		mov	r3, r4
 242 0052 CDF82890 		str	r9, [sp, #40]
 243 0056 CDF81C80 		str	r8, [sp, #28]
 244 005a 0B90     		str	r0, [sp, #44]
 245 005c 0697     		str	r7, [sp, #24]
 246 005e 0995     		str	r5, [sp, #36]
 247 0060 0394     		str	r4, [sp, #12]
 248 0062 2646     		mov	r6, r4
 249              	.LVL18:
 250              		.loc 1 361 5 view .LVU62
 251 0064 88E0     		b	.L6
 252              	.LVL19:
 253              	.L10:
 254              	.LBB8:
 255              	.LBB9:
 256              	.LBB10:
 257              	.LBB11:
 362:Core/Src/main.c ****         int32_t x0 = x_left;			// starting constant
 363:Core/Src/main.c **** 
 364:Core/Src/main.c ****         for (int x = 0; x < width; ++x) {
 365:Core/Src/main.c ****             int32_t xi = 0, yi = 0;
 366:Core/Src/main.c ****             int iteration = 0;
 367:Core/Src/main.c **** 
 368:Core/Src/main.c ****             while (iteration < max_iterations) {
 369:Core/Src/main.c ****                 int32_t xi2 = (int32_t)(((int64_t)xi * xi + (1 << (Q - 1))) >> Q);
 370:Core/Src/main.c ****                 int32_t yi2 = (int32_t)(((int64_t)yi * yi + (1 << (Q - 1))) >> Q);
 371:Core/Src/main.c **** 
 372:Core/Src/main.c ****                 // after calculating square values for this loop check if condition is still met
 373:Core/Src/main.c ****                 if ((int64_t)xi2 + yi2 > FOUR) break;
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 12


 374:Core/Src/main.c **** 
 375:Core/Src/main.c ****                 int32_t temp = xi2 - yi2 + x0;
 376:Core/Src/main.c **** 
 377:Core/Src/main.c ****                 // Q is 2^16, so Q-1 = 2^15 to account for 2*xi*yi
 378:Core/Src/main.c ****                 yi = (int32_t)(((int64_t)xi * yi + (1 << (Q - 2))) >> (Q - 1)) + y0;
 258              		.loc 1 378 20 view .LVU63
 259 0066 029B     		ldr	r3, [sp, #8]
 260 0068 1D44     		add	r5, r5, r3
 261              	.LVL20:
 379:Core/Src/main.c ****                 xi = temp;           // following mandelbrot.py
 262              		.loc 1 379 17 is_stmt 1 view .LVU64
 380:Core/Src/main.c **** 
 381:Core/Src/main.c ****                 ++iteration;
 263              		.loc 1 381 17 view .LVU65
 264 006a 0137     		adds	r7, r7, #1
 265              	.LVL21:
 266              	.L12:
 267              		.loc 1 381 17 is_stmt 0 view .LVU66
 268              	.LBE11:
 368:Core/Src/main.c ****                 int32_t xi2 = (int32_t)(((int64_t)xi * xi + (1 << (Q - 1))) >> Q);
 269              		.loc 1 368 30 is_stmt 1 view .LVU67
 270 006c 019B     		ldr	r3, [sp, #4]
 271 006e 9F42     		cmp	r7, r3
 272 0070 67DA     		bge	.L9
 273              	.LBB12:
 369:Core/Src/main.c ****                 int32_t yi2 = (int32_t)(((int64_t)yi * yi + (1 << (Q - 1))) >> Q);
 274              		.loc 1 369 17 view .LVU68
 369:Core/Src/main.c ****                 int32_t yi2 = (int32_t)(((int64_t)yi * yi + (1 << (Q - 1))) >> Q);
 275              		.loc 1 369 42 is_stmt 0 view .LVU69
 276 0072 4FEAE178 		asr	r8, r1, #31
 277 0076 0846     		mov	r0, r1
 369:Core/Src/main.c ****                 int32_t yi2 = (int32_t)(((int64_t)yi * yi + (1 << (Q - 1))) >> Q);
 278              		.loc 1 369 54 view .LVU70
 279 0078 01FB08F3 		mul	r3, r1, r8
 280 007c A1FB0121 		umull	r2, r1, r1, r1
 281              	.LVL22:
 369:Core/Src/main.c ****                 int32_t yi2 = (int32_t)(((int64_t)yi * yi + (1 << (Q - 1))) >> Q);
 282              		.loc 1 369 54 view .LVU71
 283 0080 01EB4301 		add	r1, r1, r3, lsl #1
 369:Core/Src/main.c ****                 int32_t yi2 = (int32_t)(((int64_t)yi * yi + (1 << (Q - 1))) >> Q);
 284              		.loc 1 369 70 view .LVU72
 285 0084 0BF1FF3C 		add	ip, fp, #-1
 369:Core/Src/main.c ****                 int32_t yi2 = (int32_t)(((int64_t)yi * yi + (1 << (Q - 1))) >> Q);
 286              		.loc 1 369 64 view .LVU73
 287 0088 0124     		movs	r4, #1
 288              	.LVL23:
 369:Core/Src/main.c ****                 int32_t yi2 = (int32_t)(((int64_t)yi * yi + (1 << (Q - 1))) >> Q);
 289              		.loc 1 369 64 view .LVU74
 290 008a 04FA0CF4 		lsl	r4, r4, ip
 291              	.LVL24:
 369:Core/Src/main.c ****                 int32_t yi2 = (int32_t)(((int64_t)yi * yi + (1 << (Q - 1))) >> Q);
 292              		.loc 1 369 64 view .LVU75
 293 008e 4FEAE479 		asr	r9, r4, #31
 294 0092 2346     		mov	r3, r4
 369:Core/Src/main.c ****                 int32_t yi2 = (int32_t)(((int64_t)yi * yi + (1 << (Q - 1))) >> Q);
 295              		.loc 1 369 59 view .LVU76
 296 0094 1219     		adds	r2, r2, r4
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 13


 297 0096 41EBE471 		adc	r1, r1, r4, asr #31
 369:Core/Src/main.c ****                 int32_t yi2 = (int32_t)(((int64_t)yi * yi + (1 << (Q - 1))) >> Q);
 298              		.loc 1 369 77 view .LVU77
 299 009a CBF12004 		rsb	r4, fp, #32
 300 009e BBF12006 		subs	r6, fp, #32
 301 00a2 22FA0BF2 		lsr	r2, r2, fp
 302 00a6 01FA04F4 		lsl	r4, r1, r4
 303 00aa 42EA0402 		orr	r2, r2, r4
 304 00ae 02D4     		bmi	.L7
 305 00b0 41FA06F6 		asr	r6, r1, r6
 306 00b4 3243     		orrs	r2, r2, r6
 307              	.L7:
 308              	.LVL25:
 370:Core/Src/main.c **** 
 309              		.loc 1 370 17 is_stmt 1 view .LVU78
 370:Core/Src/main.c **** 
 310              		.loc 1 370 42 is_stmt 0 view .LVU79
 311 00b6 EC17     		asrs	r4, r5, #31
 312 00b8 2E46     		mov	r6, r5
 370:Core/Src/main.c **** 
 313              		.loc 1 370 54 view .LVU80
 314 00ba 04FB05F5 		mul	r5, r4, r5
 315              	.LVL26:
 370:Core/Src/main.c **** 
 316              		.loc 1 370 54 view .LVU81
 317 00be A6FB06E1 		umull	lr, r1, r6, r6
 318 00c2 01EB4501 		add	r1, r1, r5, lsl #1
 370:Core/Src/main.c **** 
 319              		.loc 1 370 59 view .LVU82
 320 00c6 13EB0E03 		adds	r3, r3, lr
 321 00ca 49EB0101 		adc	r1, r9, r1
 370:Core/Src/main.c **** 
 322              		.loc 1 370 77 view .LVU83
 323 00ce CBF12005 		rsb	r5, fp, #32
 324 00d2 BBF1200E 		subs	lr, fp, #32
 325 00d6 23FA0BF3 		lsr	r3, r3, fp
 326 00da 01FA05F5 		lsl	r5, r1, r5
 327 00de 43EA0503 		orr	r3, r3, r5
 328 00e2 03D4     		bmi	.L8
 370:Core/Src/main.c **** 
 329              		.loc 1 370 77 view .LVU84
 330 00e4 41FA0EFE 		asr	lr, r1, lr
 331 00e8 43EA0E03 		orr	r3, r3, lr
 332              	.L8:
 333              	.LVL27:
 373:Core/Src/main.c **** 
 334              		.loc 1 373 17 is_stmt 1 view .LVU85
 373:Core/Src/main.c **** 
 335              		.loc 1 373 34 is_stmt 0 view .LVU86
 336 00ec D917     		asrs	r1, r3, #31
 337 00ee 13EB020E 		adds	lr, r3, r2
 338 00f2 41EBE271 		adc	r1, r1, r2, asr #31
 373:Core/Src/main.c **** 
 339              		.loc 1 373 40 view .LVU87
 340 00f6 4FEAEA75 		asr	r5, r10, #31
 373:Core/Src/main.c **** 
 341              		.loc 1 373 20 view .LVU88
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 14


 342 00fa F245     		cmp	r10, lr
 343 00fc 8D41     		sbcs	r5, r5, r1
 344 00fe 20DB     		blt	.L9
 375:Core/Src/main.c **** 
 345              		.loc 1 375 17 is_stmt 1 view .LVU89
 375:Core/Src/main.c **** 
 346              		.loc 1 375 36 is_stmt 0 view .LVU90
 347 0100 D21A     		subs	r2, r2, r3
 348              	.LVL28:
 375:Core/Src/main.c **** 
 349              		.loc 1 375 25 view .LVU91
 350 0102 009B     		ldr	r3, [sp]
 351              	.LVL29:
 375:Core/Src/main.c **** 
 352              		.loc 1 375 25 view .LVU92
 353 0104 D118     		adds	r1, r2, r3
 354              	.LVL30:
 378:Core/Src/main.c ****                 xi = temp;           // following mandelbrot.py
 355              		.loc 1 378 17 is_stmt 1 view .LVU93
 378:Core/Src/main.c ****                 xi = temp;           // following mandelbrot.py
 356              		.loc 1 378 45 is_stmt 0 view .LVU94
 357 0106 00FB04F4 		mul	r4, r0, r4
 358 010a 06FB0844 		mla	r4, r6, r8, r4
 359 010e A0FB0650 		umull	r5, r0, r0, r6
 360              	.LVL31:
 378:Core/Src/main.c ****                 xi = temp;           // following mandelbrot.py
 361              		.loc 1 378 45 view .LVU95
 362 0112 0444     		add	r4, r4, r0
 378:Core/Src/main.c ****                 xi = temp;           // following mandelbrot.py
 363              		.loc 1 378 61 view .LVU96
 364 0114 ABF10203 		sub	r3, fp, #2
 378:Core/Src/main.c ****                 xi = temp;           // following mandelbrot.py
 365              		.loc 1 378 55 view .LVU97
 366 0118 0122     		movs	r2, #1
 367              	.LVL32:
 378:Core/Src/main.c ****                 xi = temp;           // following mandelbrot.py
 368              		.loc 1 378 55 view .LVU98
 369 011a 02FA03F3 		lsl	r3, r2, r3
 378:Core/Src/main.c ****                 xi = temp;           // following mandelbrot.py
 370              		.loc 1 378 50 view .LVU99
 371 011e ED18     		adds	r5, r5, r3
 372 0120 44EBE373 		adc	r3, r4, r3, asr #31
 378:Core/Src/main.c ****                 xi = temp;           // following mandelbrot.py
 373              		.loc 1 378 68 view .LVU100
 374 0124 CCF12002 		rsb	r2, ip, #32
 375              	.LVL33:
 378:Core/Src/main.c ****                 xi = temp;           // following mandelbrot.py
 376              		.loc 1 378 68 view .LVU101
 377 0128 BCF12000 		subs	r0, ip, #32
 378 012c 25FA0CF5 		lsr	r5, r5, ip
 379 0130 03FA02F2 		lsl	r2, r3, r2
 380 0134 45EA0205 		orr	r5, r5, r2
 381 0138 95D4     		bmi	.L10
 382 013a 43FA00F0 		asr	r0, r3, r0
 383 013e 0543     		orrs	r5, r5, r0
 384 0140 91E7     		b	.L10
 385              	.LVL34:
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 15


 386              	.L9:
 378:Core/Src/main.c ****                 xi = temp;           // following mandelbrot.py
 387              		.loc 1 378 68 view .LVU102
 388              	.LBE12:
 382:Core/Src/main.c ****             }
 383:Core/Src/main.c **** 
 384:Core/Src/main.c ****             mandelbrot_sum += iteration;
 389              		.loc 1 384 28 view .LVU103
 390 0142 049A     		ldr	r2, [sp, #16]
 391 0144 059E     		ldr	r6, [sp, #20]
 392              		.loc 1 384 13 is_stmt 1 view .LVU104
 393              		.loc 1 384 28 is_stmt 0 view .LVU105
 394 0146 039B     		ldr	r3, [sp, #12]
 395 0148 F918     		adds	r1, r7, r3
 396 014a 0391     		str	r1, [sp, #12]
 397              	.LVL35:
 398              		.loc 1 384 28 view .LVU106
 399 014c 46EBE776 		adc	r6, r6, r7, asr #31
 400              	.LVL36:
 385:Core/Src/main.c ****             x0 += x_step; // add step instead of multiplying new x value
 401              		.loc 1 385 13 is_stmt 1 view .LVU107
 402              		.loc 1 385 16 is_stmt 0 view .LVU108
 403 0150 009B     		ldr	r3, [sp]
 404 0152 0799     		ldr	r1, [sp, #28]
 405              	.LVL37:
 406              		.loc 1 385 16 view .LVU109
 407 0154 0B44     		add	r3, r3, r1
 408 0156 0093     		str	r3, [sp]
 409              	.LVL38:
 410              		.loc 1 385 16 view .LVU110
 411              	.LBE10:
 364:Core/Src/main.c ****             int32_t xi = 0, yi = 0;
 412              		.loc 1 364 36 is_stmt 1 discriminator 2 view .LVU111
 413 0158 0132     		adds	r2, r2, #1
 414              	.LVL39:
 415              	.L13:
 364:Core/Src/main.c ****             int32_t xi = 0, yi = 0;
 416              		.loc 1 364 27 discriminator 1 view .LVU112
 417 015a 069B     		ldr	r3, [sp, #24]
 418 015c 9A42     		cmp	r2, r3
 419 015e 05DA     		bge	.L17
 420              	.LBB13:
 366:Core/Src/main.c **** 
 421              		.loc 1 366 17 is_stmt 0 view .LVU113
 422 0160 0027     		movs	r7, #0
 365:Core/Src/main.c ****             int iteration = 0;
 423              		.loc 1 365 29 view .LVU114
 424 0162 3D46     		mov	r5, r7
 365:Core/Src/main.c ****             int iteration = 0;
 425              		.loc 1 365 21 view .LVU115
 426 0164 3946     		mov	r1, r7
 427 0166 0492     		str	r2, [sp, #16]
 428 0168 0596     		str	r6, [sp, #20]
 429 016a 7FE7     		b	.L12
 430              	.L17:
 365:Core/Src/main.c ****             int iteration = 0;
 431              		.loc 1 365 21 view .LVU116
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 16


 432              	.LBE13:
 433              	.LBE9:
 386:Core/Src/main.c ****         }
 387:Core/Src/main.c ****         y0 += y_step;     // add step instead of multiplying new y value
 434              		.loc 1 387 12 view .LVU117
 435 016c 089B     		ldr	r3, [sp, #32]
 436              		.loc 1 387 9 is_stmt 1 view .LVU118
 437              		.loc 1 387 12 is_stmt 0 view .LVU119
 438 016e 029A     		ldr	r2, [sp, #8]
 439              	.LVL40:
 440              		.loc 1 387 12 view .LVU120
 441 0170 0B99     		ldr	r1, [sp, #44]
 442 0172 0A44     		add	r2, r2, r1
 443 0174 0292     		str	r2, [sp, #8]
 444              	.LVL41:
 445              		.loc 1 387 12 view .LVU121
 446              	.LBE8:
 361:Core/Src/main.c ****         int32_t x0 = x_left;			// starting constant
 447              		.loc 1 361 33 is_stmt 1 discriminator 2 view .LVU122
 448 0176 0133     		adds	r3, r3, #1
 449              	.LVL42:
 450              	.L6:
 361:Core/Src/main.c ****         int32_t x0 = x_left;			// starting constant
 451              		.loc 1 361 23 discriminator 1 view .LVU123
 452 0178 099A     		ldr	r2, [sp, #36]
 453 017a 9342     		cmp	r3, r2
 454 017c 04DA     		bge	.L18
 455              	.LBB15:
 362:Core/Src/main.c **** 
 456              		.loc 1 362 17 is_stmt 0 view .LVU124
 457 017e 0A9A     		ldr	r2, [sp, #40]
 458 0180 0092     		str	r2, [sp]
 459              	.LBB14:
 364:Core/Src/main.c ****             int32_t xi = 0, yi = 0;
 460              		.loc 1 364 18 view .LVU125
 461 0182 0022     		movs	r2, #0
 462 0184 0893     		str	r3, [sp, #32]
 463 0186 E8E7     		b	.L13
 464              	.L18:
 364:Core/Src/main.c ****             int32_t xi = 0, yi = 0;
 465              		.loc 1 364 18 view .LVU126
 466              	.LBE14:
 467              	.LBE15:
 468              	.LBE7:
 388:Core/Src/main.c ****     }
 389:Core/Src/main.c **** 
 390:Core/Src/main.c ****     return mandelbrot_sum;
 391:Core/Src/main.c **** }
 469              		.loc 1 391 1 view .LVU127
 470 0188 0398     		ldr	r0, [sp, #12]
 390:Core/Src/main.c **** }
 471              		.loc 1 390 5 is_stmt 1 view .LVU128
 472              		.loc 1 391 1 is_stmt 0 view .LVU129
 473 018a 3146     		mov	r1, r6
 474 018c 0DB0     		add	sp, sp, #52
 475              	.LCFI5:
 476              		.cfi_def_cfa_offset 36
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 17


 477              		@ sp needed
 478 018e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 479              		.loc 1 391 1 view .LVU130
 480              		.cfi_endproc
 481              	.LFE137:
 483              		.section	.text.calculate_mandelbrot_float,"ax",%progbits
 484              		.align	1
 485              		.global	calculate_mandelbrot_float
 486              		.syntax unified
 487              		.thumb
 488              		.thumb_func
 490              	calculate_mandelbrot_float:
 491              	.LVL43:
 492              	.LFB138:
 392:Core/Src/main.c **** 
 393:Core/Src/main.c **** 
 394:Core/Src/main.c **** // ================================================================================================
 395:Core/Src/main.c **** 
 396:Core/Src/main.c **** uint64_t calculate_mandelbrot_float(int width, int height, int max_iterations)
 397:Core/Src/main.c **** {
 493              		.loc 1 397 1 is_stmt 1 view -0
 494              		.cfi_startproc
 495              		@ args = 0, pretend = 0, frame = 0
 496              		@ frame_needed = 0, uses_anonymous_args = 0
 497              		.loc 1 397 1 is_stmt 0 view .LVU132
 498 0000 00B5     		push	{lr}
 499              	.LCFI6:
 500              		.cfi_def_cfa_offset 4
 501              		.cfi_offset 14, -4
 502 0002 8646     		mov	lr, r0
 503 0004 03EE101A 		vmov	s6, r1	@ int
 398:Core/Src/main.c ****     uint64_t mandelbrot_sum = 0;
 504              		.loc 1 398 5 is_stmt 1 view .LVU133
 505              	.LVL44:
 399:Core/Src/main.c ****     //TODO: Complete the function implementation
 400:Core/Src/main.c ****     checksum = 0;
 506              		.loc 1 400 5 view .LVU134
 507              		.loc 1 400 14 is_stmt 0 view .LVU135
 508 0008 304B     		ldr	r3, .L31
 509 000a 0020     		movs	r0, #0
 510              	.LVL45:
 511              		.loc 1 400 14 view .LVU136
 512 000c 0021     		movs	r1, #0
 513              	.LVL46:
 514              		.loc 1 400 14 view .LVU137
 515 000e C3E90001 		strd	r0, [r3]
 401:Core/Src/main.c ****     for (int y = 0; y < height; y++)
 516              		.loc 1 401 5 is_stmt 1 view .LVU138
 517              	.LBB16:
 518              		.loc 1 401 10 view .LVU139
 519              	.LVL47:
 520              		.loc 1 401 14 is_stmt 0 view .LVU140
 521 0012 DFED2F3A 		vldr.32	s7, .L31+4	@ int
 522              	.LBE16:
 398:Core/Src/main.c ****     uint64_t mandelbrot_sum = 0;
 523              		.loc 1 398 14 view .LVU141
 524 0016 13EE900A 		vmov	r0, s7	@ int
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 18


 525 001a 13EE901A 		vmov	r1, s7	@ int
 526              	.LBB23:
 527              		.loc 1 401 5 view .LVU142
 528 001e 49E0     		b	.L20
 529              	.LVL48:
 530              	.L28:
 531              	.LBB17:
 532              	.LBB18:
 533              	.LBB19:
 402:Core/Src/main.c ****     {
 403:Core/Src/main.c ****         for (int x = 0; x < width ; x++)
 404:Core/Src/main.c ****         {
 405:Core/Src/main.c ****             float x_0 = ((float)x / width) * 3.5f - 2.5f;
 406:Core/Src/main.c ****             float y_0 = (float)y / height * 2.0f - 1.0f;
 407:Core/Src/main.c **** 
 408:Core/Src/main.c ****             float x_i = 0.0f;
 409:Core/Src/main.c ****             float y_i = 0.0f;
 410:Core/Src/main.c ****             int iteration = 0;
 411:Core/Src/main.c **** 
 412:Core/Src/main.c ****             while (iteration < max_iterations)
 413:Core/Src/main.c ****             {
 414:Core/Src/main.c ****                 float x_i_sq = x_i * x_i;
 415:Core/Src/main.c ****                 float y_i_sq = y_i * y_i;
 416:Core/Src/main.c **** 
 417:Core/Src/main.c ****                 if (x_i_sq + y_i_sq > 4.0f)
 418:Core/Src/main.c ****                 {
 419:Core/Src/main.c ****                     break;
 420:Core/Src/main.c ****                 }
 421:Core/Src/main.c ****                 float temp = x_i_sq - y_i_sq;
 534              		.loc 1 421 17 is_stmt 1 view .LVU143
 535              		.loc 1 421 23 is_stmt 0 view .LVU144
 536 0020 76EEC66A 		vsub.f32	s13, s13, s12
 537              	.LVL49:
 422:Core/Src/main.c ****                 y_i = 2.0f * x_i * y_i + y_0;
 538              		.loc 1 422 17 is_stmt 1 view .LVU145
 539              		.loc 1 422 28 is_stmt 0 view .LVU146
 540 0024 77EEA77A 		vadd.f32	s15, s15, s15
 541              	.LVL50:
 542              		.loc 1 422 34 view .LVU147
 543 0028 27EE877A 		vmul.f32	s14, s15, s14
 544              	.LVL51:
 545              		.loc 1 422 21 view .LVU148
 546 002c 37EE247A 		vadd.f32	s14, s14, s9
 547              	.LVL52:
 423:Core/Src/main.c **** 
 424:Core/Src/main.c ****                 x_i = temp + x_0;
 548              		.loc 1 424 17 is_stmt 1 view .LVU149
 549              		.loc 1 424 21 is_stmt 0 view .LVU150
 550 0030 74EE267A 		vadd.f32	s15, s8, s13
 551              	.LVL53:
 425:Core/Src/main.c **** 
 426:Core/Src/main.c ****                 iteration = iteration + 1;
 552              		.loc 1 426 17 is_stmt 1 view .LVU151
 553              		.loc 1 426 27 is_stmt 0 view .LVU152
 554 0034 0133     		adds	r3, r3, #1
 555              	.LVL54:
 556              	.L21:
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 19


 557              		.loc 1 426 27 view .LVU153
 558              	.LBE19:
 412:Core/Src/main.c ****             {
 559              		.loc 1 412 30 is_stmt 1 view .LVU154
 560 0036 9342     		cmp	r3, r2
 561 0038 0CDA     		bge	.L22
 562              	.LBB20:
 414:Core/Src/main.c ****                 float y_i_sq = y_i * y_i;
 563              		.loc 1 414 17 view .LVU155
 414:Core/Src/main.c ****                 float y_i_sq = y_i * y_i;
 564              		.loc 1 414 23 is_stmt 0 view .LVU156
 565 003a 67EEA76A 		vmul.f32	s13, s15, s15
 566              	.LVL55:
 415:Core/Src/main.c **** 
 567              		.loc 1 415 17 is_stmt 1 view .LVU157
 415:Core/Src/main.c **** 
 568              		.loc 1 415 23 is_stmt 0 view .LVU158
 569 003e 27EE076A 		vmul.f32	s12, s14, s14
 570              	.LVL56:
 417:Core/Src/main.c ****                 {
 571              		.loc 1 417 17 is_stmt 1 view .LVU159
 417:Core/Src/main.c ****                 {
 572              		.loc 1 417 28 is_stmt 0 view .LVU160
 573 0042 36EE865A 		vadd.f32	s10, s13, s12
 417:Core/Src/main.c ****                 {
 574              		.loc 1 417 20 view .LVU161
 575 0046 F1EE005A 		vmov.f32	s11, #4.0e+0
 576 004a B4EEE55A 		vcmpe.f32	s10, s11
 577 004e F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 578 0052 E5DD     		ble	.L28
 579              	.LVL57:
 580              	.L22:
 417:Core/Src/main.c ****                 {
 581              		.loc 1 417 20 view .LVU162
 582              	.LBE20:
 427:Core/Src/main.c ****             }
 428:Core/Src/main.c **** 
 429:Core/Src/main.c ****             mandelbrot_sum = mandelbrot_sum + iteration;
 583              		.loc 1 429 13 is_stmt 1 view .LVU163
 584              		.loc 1 429 28 is_stmt 0 view .LVU164
 585 0054 1818     		adds	r0, r3, r0
 586              	.LVL58:
 587              		.loc 1 429 28 view .LVU165
 588 0056 41EBE371 		adc	r1, r1, r3, asr #31
 589              	.LVL59:
 590              		.loc 1 429 28 view .LVU166
 591              	.LBE18:
 403:Core/Src/main.c ****         {
 592              		.loc 1 403 38 is_stmt 1 discriminator 2 view .LVU167
 593 005a 0CF1010C 		add	ip, ip, #1
 594              	.LVL60:
 595              	.L25:
 403:Core/Src/main.c ****         {
 596              		.loc 1 403 27 discriminator 1 view .LVU168
 597 005e F445     		cmp	ip, lr
 598 0060 23DA     		bge	.L29
 599              	.LBB21:
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 20


 405:Core/Src/main.c ****             float y_0 = (float)y / height * 2.0f - 1.0f;
 600              		.loc 1 405 13 view .LVU169
 405:Core/Src/main.c ****             float y_0 = (float)y / height * 2.0f - 1.0f;
 601              		.loc 1 405 26 is_stmt 0 view .LVU170
 602 0062 07EE90CA 		vmov	s15, ip	@ int
 603 0066 F8EEE77A 		vcvt.f32.s32	s15, s15
 405:Core/Src/main.c ****             float y_0 = (float)y / height * 2.0f - 1.0f;
 604              		.loc 1 405 35 view .LVU171
 605 006a 07EE10EA 		vmov	s14, lr	@ int
 606 006e B8EEC77A 		vcvt.f32.s32	s14, s14
 607 0072 87EE874A 		vdiv.f32	s8, s15, s14
 405:Core/Src/main.c ****             float y_0 = (float)y / height * 2.0f - 1.0f;
 608              		.loc 1 405 44 view .LVU172
 609 0076 F0EE0C7A 		vmov.f32	s15, #3.5e+0
 610 007a 24EE274A 		vmul.f32	s8, s8, s15
 405:Core/Src/main.c ****             float y_0 = (float)y / height * 2.0f - 1.0f;
 611              		.loc 1 405 19 view .LVU173
 612 007e F0EE047A 		vmov.f32	s15, #2.5e+0
 613 0082 34EE674A 		vsub.f32	s8, s8, s15
 614              	.LVL61:
 406:Core/Src/main.c **** 
 615              		.loc 1 406 13 is_stmt 1 view .LVU174
 406:Core/Src/main.c **** 
 616              		.loc 1 406 25 is_stmt 0 view .LVU175
 617 0086 F8EEE37A 		vcvt.f32.s32	s15, s7
 406:Core/Src/main.c **** 
 618              		.loc 1 406 34 view .LVU176
 619 008a B8EEC37A 		vcvt.f32.s32	s14, s6
 620 008e C7EE874A 		vdiv.f32	s9, s15, s14
 406:Core/Src/main.c **** 
 621              		.loc 1 406 43 view .LVU177
 622 0092 74EEA44A 		vadd.f32	s9, s9, s9
 406:Core/Src/main.c **** 
 623              		.loc 1 406 19 view .LVU178
 624 0096 F7EE007A 		vmov.f32	s15, #1.0e+0
 625 009a 74EEE74A 		vsub.f32	s9, s9, s15
 626              	.LVL62:
 408:Core/Src/main.c ****             float y_i = 0.0f;
 627              		.loc 1 408 13 is_stmt 1 view .LVU179
 409:Core/Src/main.c ****             int iteration = 0;
 628              		.loc 1 409 13 view .LVU180
 410:Core/Src/main.c **** 
 629              		.loc 1 410 13 view .LVU181
 412:Core/Src/main.c ****             {
 630              		.loc 1 412 13 view .LVU182
 410:Core/Src/main.c **** 
 631              		.loc 1 410 17 is_stmt 0 view .LVU183
 632 009e 0023     		movs	r3, #0
 409:Core/Src/main.c ****             int iteration = 0;
 633              		.loc 1 409 19 view .LVU184
 634 00a0 9FED0C7A 		vldr.32	s14, .L31+8
 408:Core/Src/main.c ****             float y_i = 0.0f;
 635              		.loc 1 408 19 view .LVU185
 636 00a4 F0EE477A 		vmov.f32	s15, s14
 412:Core/Src/main.c ****             {
 637              		.loc 1 412 19 view .LVU186
 638 00a8 C5E7     		b	.L21
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 21


 639              	.LVL63:
 640              	.L29:
 412:Core/Src/main.c ****             {
 641              		.loc 1 412 19 view .LVU187
 642              	.LBE21:
 643              	.LBE17:
 401:Core/Src/main.c ****     {
 644              		.loc 1 401 34 is_stmt 1 discriminator 2 view .LVU188
 645 00aa 13EE903A 		vmov	r3, s7	@ int
 646 00ae 0133     		adds	r3, r3, #1
 647 00b0 03EE903A 		vmov	s7, r3	@ int
 648              	.LVL64:
 649              	.L20:
 401:Core/Src/main.c ****     {
 650              		.loc 1 401 23 discriminator 1 view .LVU189
 651 00b4 13EE903A 		vmov	r3, s7	@ int
 652 00b8 13EE10CA 		vmov	ip, s6	@ int
 653 00bc 6345     		cmp	r3, ip
 654 00be 02DA     		bge	.L30
 655              	.LVL65:
 656              	.LBB22:
 403:Core/Src/main.c ****         {
 657              		.loc 1 403 18 is_stmt 0 view .LVU190
 658 00c0 4FF0000C 		mov	ip, #0
 659              	.LVL66:
 403:Core/Src/main.c ****         {
 660              		.loc 1 403 18 view .LVU191
 661 00c4 CBE7     		b	.L25
 662              	.LVL67:
 663              	.L30:
 403:Core/Src/main.c ****         {
 664              		.loc 1 403 18 view .LVU192
 665              	.LBE22:
 666              	.LBE23:
 430:Core/Src/main.c ****         }
 431:Core/Src/main.c ****     }
 432:Core/Src/main.c ****     //checksum = mandelbrot_sum;
 433:Core/Src/main.c ****     return mandelbrot_sum;
 667              		.loc 1 433 5 is_stmt 1 view .LVU193
 434:Core/Src/main.c **** }
 668              		.loc 1 434 1 is_stmt 0 view .LVU194
 669 00c6 5DF804FB 		ldr	pc, [sp], #4
 670              	.L32:
 671 00ca 00BF     		.align	2
 672              	.L31:
 673 00cc 00000000 		.word	checksum
 674 00d0 00000000 		.word	0
 675 00d4 00000000 		.word	0
 676              		.cfi_endproc
 677              	.LFE138:
 679              		.global	__aeabi_i2d
 680              		.global	__aeabi_ddiv
 681              		.global	__aeabi_dmul
 682              		.global	__aeabi_dsub
 683              		.global	__aeabi_dadd
 684              		.global	__aeabi_dcmpgt
 685              		.section	.text.calculate_mandelbrot_double,"ax",%progbits
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 22


 686              		.align	1
 687              		.global	calculate_mandelbrot_double
 688              		.syntax unified
 689              		.thumb
 690              		.thumb_func
 692              	calculate_mandelbrot_double:
 693              	.LVL68:
 694              	.LFB139:
 435:Core/Src/main.c **** 
 436:Core/Src/main.c **** // ================================================================================================
 437:Core/Src/main.c **** 
 438:Core/Src/main.c **** 
 439:Core/Src/main.c **** //TODO: Mandelbroat using variable type double
 440:Core/Src/main.c **** uint64_t calculate_mandelbrot_double(int width, int height, int max_iterations)
 441:Core/Src/main.c **** {
 695              		.loc 1 441 1 is_stmt 1 view -0
 696              		.cfi_startproc
 697              		@ args = 0, pretend = 0, frame = 56
 698              		@ frame_needed = 0, uses_anonymous_args = 0
 699              		.loc 1 441 1 is_stmt 0 view .LVU196
 700 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 701              	.LCFI7:
 702              		.cfi_def_cfa_offset 36
 703              		.cfi_offset 4, -36
 704              		.cfi_offset 5, -32
 705              		.cfi_offset 6, -28
 706              		.cfi_offset 7, -24
 707              		.cfi_offset 8, -20
 708              		.cfi_offset 9, -16
 709              		.cfi_offset 10, -12
 710              		.cfi_offset 11, -8
 711              		.cfi_offset 14, -4
 712 0004 8FB0     		sub	sp, sp, #60
 713              	.LCFI8:
 714              		.cfi_def_cfa_offset 96
 715 0006 0890     		str	r0, [sp, #32]
 716 0008 0C91     		str	r1, [sp, #48]
 442:Core/Src/main.c ****     uint64_t mandelbrot_sum = 0;
 717              		.loc 1 442 5 is_stmt 1 view .LVU197
 718              	.LVL69:
 443:Core/Src/main.c ****     //TODO: Complete the function implementation
 444:Core/Src/main.c ****     checksum = 0;
 719              		.loc 1 444 5 view .LVU198
 720              		.loc 1 444 14 is_stmt 0 view .LVU199
 721 000a 534B     		ldr	r3, .L45
 722 000c 0020     		movs	r0, #0
 723              	.LVL70:
 724              		.loc 1 444 14 view .LVU200
 725 000e 0021     		movs	r1, #0
 726              	.LVL71:
 727              		.loc 1 444 14 view .LVU201
 728 0010 C3E90001 		strd	r0, [r3]
 445:Core/Src/main.c ****     for (int y = 0; y < height; y++)
 729              		.loc 1 445 5 is_stmt 1 view .LVU202
 730              	.LBB24:
 731              		.loc 1 445 10 view .LVU203
 732              	.LVL72:
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 23


 733              		.loc 1 445 14 is_stmt 0 view .LVU204
 734 0014 4FF0000A 		mov	r10, #0
 735              	.LBE24:
 442:Core/Src/main.c ****     uint64_t mandelbrot_sum = 0;
 736              		.loc 1 442 14 view .LVU205
 737 0018 D146     		mov	r9, r10
 738 001a CDF824A0 		str	r10, [sp, #36]
 739 001e 0D92     		str	r2, [sp, #52]
 740 0020 CDF828A0 		str	r10, [sp, #40]
 741              	.LBB31:
 742              		.loc 1 445 5 view .LVU206
 743 0024 89E0     		b	.L34
 744              	.LVL73:
 745              	.L42:
 746              	.LBB25:
 747              	.LBB26:
 748              	.LBB27:
 446:Core/Src/main.c ****     {
 447:Core/Src/main.c ****     	for (int x = 0; x < width ; x++)
 448:Core/Src/main.c ****     	{
 449:Core/Src/main.c ****     		double x_0 = ((double)x/width)*3.5 - 2.5;
 450:Core/Src/main.c ****     		double y_0 = (double)y/height * 2.0 - 1.0;
 451:Core/Src/main.c **** 
 452:Core/Src/main.c ****     		double x_i = 0;
 453:Core/Src/main.c ****     		double y_i = 0;
 454:Core/Src/main.c ****     		int iteration = 0;
 455:Core/Src/main.c **** 
 456:Core/Src/main.c **** 
 457:Core/Src/main.c ****     		while (iteration < max_iterations)
 458:Core/Src/main.c ****     		{
 459:Core/Src/main.c **** 
 460:Core/Src/main.c ****     			double x_i_sq = x_i*x_i;
 461:Core/Src/main.c ****     			double y_i_sq = y_i*y_i;
 462:Core/Src/main.c **** 
 463:Core/Src/main.c ****     			if(x_i_sq + y_i_sq > 4.0)
 464:Core/Src/main.c ****     			{
 465:Core/Src/main.c ****     				break;
 466:Core/Src/main.c ****     			}
 467:Core/Src/main.c ****     			double temp  = x_i_sq - y_i_sq;
 749              		.loc 1 467 8 is_stmt 1 view .LVU207
 750              		.loc 1 467 15 is_stmt 0 view .LVU208
 751 0026 5246     		mov	r2, r10
 752 0028 5B46     		mov	r3, fp
 753 002a DDE90001 		ldrd	r0, [sp]
 754 002e FFF7FEFF 		bl	__aeabi_dsub
 755              	.LVL74:
 756 0032 8246     		mov	r10, r0
 757              	.LVL75:
 758              		.loc 1 467 15 view .LVU209
 759 0034 8B46     		mov	fp, r1
 760              	.LVL76:
 468:Core/Src/main.c ****     			y_i = 2.0*x_i*y_i + y_0;
 761              		.loc 1 468 8 is_stmt 1 view .LVU210
 762              		.loc 1 468 17 is_stmt 0 view .LVU211
 763 0036 2246     		mov	r2, r4
 764 0038 2B46     		mov	r3, r5
 765 003a 2046     		mov	r0, r4
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 24


 766 003c 2946     		mov	r1, r5
 767 003e FFF7FEFF 		bl	__aeabi_dadd
 768              	.LVL77:
 769              		.loc 1 468 21 view .LVU212
 770 0042 4246     		mov	r2, r8
 771 0044 4B46     		mov	r3, r9
 772 0046 FFF7FEFF 		bl	__aeabi_dmul
 773              	.LVL78:
 774              		.loc 1 468 12 view .LVU213
 775 004a DDE90423 		ldrd	r2, [sp, #16]
 776 004e FFF7FEFF 		bl	__aeabi_dadd
 777              	.LVL79:
 778 0052 8046     		mov	r8, r0
 779              	.LVL80:
 780              		.loc 1 468 12 view .LVU214
 781 0054 8946     		mov	r9, r1
 782              	.LVL81:
 469:Core/Src/main.c **** 
 470:Core/Src/main.c ****     			x_i = temp + x_0;
 783              		.loc 1 470 8 is_stmt 1 view .LVU215
 784              		.loc 1 470 12 is_stmt 0 view .LVU216
 785 0056 5246     		mov	r2, r10
 786 0058 5B46     		mov	r3, fp
 787 005a DDE90201 		ldrd	r0, [sp, #8]
 788 005e FFF7FEFF 		bl	__aeabi_dadd
 789              	.LVL82:
 790 0062 0446     		mov	r4, r0
 791              	.LVL83:
 792              		.loc 1 470 12 view .LVU217
 793 0064 0D46     		mov	r5, r1
 794              	.LVL84:
 471:Core/Src/main.c **** 
 472:Core/Src/main.c ****     			iteration = iteration +1;
 795              		.loc 1 472 8 is_stmt 1 view .LVU218
 796              		.loc 1 472 18 is_stmt 0 view .LVU219
 797 0066 0136     		adds	r6, r6, #1
 798              	.LVL85:
 799              	.L35:
 800              		.loc 1 472 18 view .LVU220
 801              	.LBE27:
 457:Core/Src/main.c ****     		{
 802              		.loc 1 457 24 is_stmt 1 view .LVU221
 803 0068 BE42     		cmp	r6, r7
 804 006a 1BDA     		bge	.L36
 805              	.LBB28:
 460:Core/Src/main.c ****     			double y_i_sq = y_i*y_i;
 806              		.loc 1 460 8 view .LVU222
 460:Core/Src/main.c ****     			double y_i_sq = y_i*y_i;
 807              		.loc 1 460 15 is_stmt 0 view .LVU223
 808 006c 2246     		mov	r2, r4
 809 006e 2B46     		mov	r3, r5
 810 0070 2046     		mov	r0, r4
 811 0072 2946     		mov	r1, r5
 812 0074 FFF7FEFF 		bl	__aeabi_dmul
 813              	.LVL86:
 814 0078 CDE90001 		strd	r0, [sp]
 815              	.LVL87:
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 25


 461:Core/Src/main.c **** 
 816              		.loc 1 461 8 is_stmt 1 view .LVU224
 461:Core/Src/main.c **** 
 817              		.loc 1 461 15 is_stmt 0 view .LVU225
 818 007c 4246     		mov	r2, r8
 819 007e 4B46     		mov	r3, r9
 820 0080 4046     		mov	r0, r8
 821              	.LVL88:
 461:Core/Src/main.c **** 
 822              		.loc 1 461 15 view .LVU226
 823 0082 4946     		mov	r1, r9
 824 0084 FFF7FEFF 		bl	__aeabi_dmul
 825              	.LVL89:
 826 0088 8246     		mov	r10, r0
 827 008a 8B46     		mov	fp, r1
 828              	.LVL90:
 463:Core/Src/main.c ****     			{
 829              		.loc 1 463 8 is_stmt 1 view .LVU227
 463:Core/Src/main.c ****     			{
 830              		.loc 1 463 18 is_stmt 0 view .LVU228
 831 008c 0246     		mov	r2, r0
 832 008e 0B46     		mov	r3, r1
 833 0090 DDE90001 		ldrd	r0, [sp]
 834 0094 FFF7FEFF 		bl	__aeabi_dadd
 835              	.LVL91:
 463:Core/Src/main.c ****     			{
 836              		.loc 1 463 10 view .LVU229
 837 0098 0022     		movs	r2, #0
 838 009a 304B     		ldr	r3, .L45+4
 839 009c FFF7FEFF 		bl	__aeabi_dcmpgt
 840              	.LVL92:
 841 00a0 0028     		cmp	r0, #0
 842 00a2 C0D0     		beq	.L42
 843              	.LVL93:
 844              	.L36:
 463:Core/Src/main.c ****     			{
 845              		.loc 1 463 10 view .LVU230
 846              	.LBE28:
 473:Core/Src/main.c **** 
 474:Core/Src/main.c ****     		}
 475:Core/Src/main.c **** 
 476:Core/Src/main.c ****     		mandelbrot_sum = mandelbrot_sum + iteration;
 847              		.loc 1 476 7 is_stmt 1 view .LVU231
 848              		.loc 1 476 22 is_stmt 0 view .LVU232
 849 00a4 0A9B     		ldr	r3, [sp, #40]
 850 00a6 F218     		adds	r2, r6, r3
 851 00a8 0A92     		str	r2, [sp, #40]
 852              	.LVL94:
 853              		.loc 1 476 22 view .LVU233
 854 00aa 099B     		ldr	r3, [sp, #36]
 855 00ac 43EBE673 		adc	r3, r3, r6, asr #31
 856 00b0 0993     		str	r3, [sp, #36]
 857              	.LVL95:
 858              		.loc 1 476 22 view .LVU234
 859              	.LBE26:
 447:Core/Src/main.c ****     	{
 860              		.loc 1 447 35 is_stmt 1 discriminator 2 view .LVU235
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 26


 861 00b2 079B     		ldr	r3, [sp, #28]
 862              	.LVL96:
 447:Core/Src/main.c ****     	{
 863              		.loc 1 447 35 is_stmt 0 discriminator 2 view .LVU236
 864 00b4 0133     		adds	r3, r3, #1
 865 00b6 0793     		str	r3, [sp, #28]
 866              	.LVL97:
 867              	.L39:
 447:Core/Src/main.c ****     	{
 868              		.loc 1 447 24 is_stmt 1 discriminator 1 view .LVU237
 869 00b8 079B     		ldr	r3, [sp, #28]
 870 00ba 089A     		ldr	r2, [sp, #32]
 871 00bc 9342     		cmp	r3, r2
 872 00be 38DA     		bge	.L43
 873              	.LBB29:
 449:Core/Src/main.c ****     		double y_0 = (double)y/height * 2.0 - 1.0;
 874              		.loc 1 449 7 view .LVU238
 449:Core/Src/main.c ****     		double y_0 = (double)y/height * 2.0 - 1.0;
 875              		.loc 1 449 21 is_stmt 0 view .LVU239
 876 00c0 0798     		ldr	r0, [sp, #28]
 877 00c2 FFF7FEFF 		bl	__aeabi_i2d
 878              	.LVL98:
 879 00c6 0446     		mov	r4, r0
 880 00c8 0D46     		mov	r5, r1
 449:Core/Src/main.c ****     		double y_0 = (double)y/height * 2.0 - 1.0;
 881              		.loc 1 449 30 view .LVU240
 882 00ca 0898     		ldr	r0, [sp, #32]
 883 00cc FFF7FEFF 		bl	__aeabi_i2d
 884              	.LVL99:
 885 00d0 0246     		mov	r2, r0
 886 00d2 0B46     		mov	r3, r1
 887 00d4 2046     		mov	r0, r4
 888 00d6 2946     		mov	r1, r5
 889 00d8 FFF7FEFF 		bl	__aeabi_ddiv
 890              	.LVL100:
 449:Core/Src/main.c ****     		double y_0 = (double)y/height * 2.0 - 1.0;
 891              		.loc 1 449 37 view .LVU241
 892 00dc 0022     		movs	r2, #0
 893 00de 204B     		ldr	r3, .L45+8
 894 00e0 FFF7FEFF 		bl	__aeabi_dmul
 895              	.LVL101:
 449:Core/Src/main.c ****     		double y_0 = (double)y/height * 2.0 - 1.0;
 896              		.loc 1 449 14 view .LVU242
 897 00e4 0022     		movs	r2, #0
 898 00e6 1F4B     		ldr	r3, .L45+12
 899 00e8 FFF7FEFF 		bl	__aeabi_dsub
 900              	.LVL102:
 901 00ec CDE90201 		strd	r0, [sp, #8]
 902              	.LVL103:
 450:Core/Src/main.c **** 
 903              		.loc 1 450 7 is_stmt 1 view .LVU243
 450:Core/Src/main.c **** 
 904              		.loc 1 450 20 is_stmt 0 view .LVU244
 905 00f0 0B98     		ldr	r0, [sp, #44]
 906              	.LVL104:
 450:Core/Src/main.c **** 
 907              		.loc 1 450 20 view .LVU245
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 27


 908 00f2 FFF7FEFF 		bl	__aeabi_i2d
 909              	.LVL105:
 910 00f6 0446     		mov	r4, r0
 911 00f8 0D46     		mov	r5, r1
 450:Core/Src/main.c **** 
 912              		.loc 1 450 29 view .LVU246
 913 00fa 0C98     		ldr	r0, [sp, #48]
 914 00fc FFF7FEFF 		bl	__aeabi_i2d
 915              	.LVL106:
 916 0100 0246     		mov	r2, r0
 917 0102 0B46     		mov	r3, r1
 918 0104 2046     		mov	r0, r4
 919 0106 2946     		mov	r1, r5
 920 0108 FFF7FEFF 		bl	__aeabi_ddiv
 921              	.LVL107:
 922 010c 0246     		mov	r2, r0
 923 010e 0B46     		mov	r3, r1
 450:Core/Src/main.c **** 
 924              		.loc 1 450 37 view .LVU247
 925 0110 FFF7FEFF 		bl	__aeabi_dadd
 926              	.LVL108:
 450:Core/Src/main.c **** 
 927              		.loc 1 450 14 view .LVU248
 928 0114 0022     		movs	r2, #0
 929 0116 144B     		ldr	r3, .L45+16
 930 0118 FFF7FEFF 		bl	__aeabi_dsub
 931              	.LVL109:
 932 011c CDE90401 		strd	r0, [sp, #16]
 933              	.LVL110:
 452:Core/Src/main.c ****     		double y_i = 0;
 934              		.loc 1 452 7 is_stmt 1 view .LVU249
 453:Core/Src/main.c ****     		int iteration = 0;
 935              		.loc 1 453 7 view .LVU250
 454:Core/Src/main.c **** 
 936              		.loc 1 454 7 view .LVU251
 457:Core/Src/main.c ****     		{
 937              		.loc 1 457 7 view .LVU252
 454:Core/Src/main.c **** 
 938              		.loc 1 454 11 is_stmt 0 view .LVU253
 939 0120 0026     		movs	r6, #0
 453:Core/Src/main.c ****     		int iteration = 0;
 940              		.loc 1 453 14 view .LVU254
 941 0122 4FF00008 		mov	r8, #0
 942 0126 4FF00009 		mov	r9, #0
 452:Core/Src/main.c ****     		double y_i = 0;
 943              		.loc 1 452 14 view .LVU255
 944 012a 4446     		mov	r4, r8
 945 012c 4D46     		mov	r5, r9
 946 012e 0D9F     		ldr	r7, [sp, #52]
 457:Core/Src/main.c ****     		{
 947              		.loc 1 457 13 view .LVU256
 948 0130 9AE7     		b	.L35
 949              	.LVL111:
 950              	.L43:
 457:Core/Src/main.c ****     		{
 951              		.loc 1 457 13 view .LVU257
 952              	.LBE29:
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 28


 953              	.LBE25:
 445:Core/Src/main.c ****     {
 954              		.loc 1 445 34 discriminator 2 view .LVU258
 955 0132 DDF82C90 		ldr	r9, [sp, #44]
 445:Core/Src/main.c ****     {
 956              		.loc 1 445 34 is_stmt 1 discriminator 2 view .LVU259
 957 0136 09F10109 		add	r9, r9, #1
 958              	.LVL112:
 959              	.L34:
 445:Core/Src/main.c ****     {
 960              		.loc 1 445 23 discriminator 1 view .LVU260
 961 013a 0C9B     		ldr	r3, [sp, #48]
 962 013c 9945     		cmp	r9, r3
 963 013e 04DA     		bge	.L44
 964              	.LBB30:
 447:Core/Src/main.c ****     	{
 965              		.loc 1 447 15 is_stmt 0 view .LVU261
 966 0140 0023     		movs	r3, #0
 967 0142 0793     		str	r3, [sp, #28]
 968 0144 CDF82C90 		str	r9, [sp, #44]
 969 0148 B6E7     		b	.L39
 970              	.L44:
 447:Core/Src/main.c ****     	{
 971              		.loc 1 447 15 view .LVU262
 972              	.LBE30:
 973              	.LBE31:
 477:Core/Src/main.c **** 
 478:Core/Src/main.c ****     	}
 479:Core/Src/main.c ****     }
 480:Core/Src/main.c ****     //checksum = mandelbrot_sum;
 481:Core/Src/main.c ****     return mandelbrot_sum;
 482:Core/Src/main.c **** }
 974              		.loc 1 482 1 view .LVU263
 975 014a DDF82890 		ldr	r9, [sp, #40]
 976              	.LVL113:
 481:Core/Src/main.c **** }
 977              		.loc 1 481 5 is_stmt 1 view .LVU264
 978              		.loc 1 482 1 is_stmt 0 view .LVU265
 979 014e 4846     		mov	r0, r9
 980 0150 0999     		ldr	r1, [sp, #36]
 981 0152 0FB0     		add	sp, sp, #60
 982              	.LCFI9:
 983              		.cfi_def_cfa_offset 36
 984              		@ sp needed
 985 0154 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 986              	.LVL114:
 987              	.L46:
 988              		.loc 1 482 1 view .LVU266
 989              		.align	2
 990              	.L45:
 991 0158 00000000 		.word	checksum
 992 015c 00001040 		.word	1074790400
 993 0160 00000C40 		.word	1074528256
 994 0164 00000440 		.word	1074003968
 995 0168 0000F03F 		.word	1072693248
 996              		.cfi_endproc
 997              	.LFE139:
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 29


 999              		.section	.text.task1,"ax",%progbits
 1000              		.align	1
 1001              		.global	task1
 1002              		.syntax unified
 1003              		.thumb
 1004              		.thumb_func
 1006              	task1:
 1007              	.LVL115:
 1008              	.LFB140:
 483:Core/Src/main.c **** 
 484:Core/Src/main.c **** void task1(int iter) {
 1009              		.loc 1 484 22 is_stmt 1 view -0
 1010              		.cfi_startproc
 1011              		@ args = 0, pretend = 0, frame = 0
 1012              		@ frame_needed = 0, uses_anonymous_args = 0
 1013              		.loc 1 484 22 is_stmt 0 view .LVU268
 1014 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1015              	.LCFI10:
 1016              		.cfi_def_cfa_offset 24
 1017              		.cfi_offset 4, -24
 1018              		.cfi_offset 5, -20
 1019              		.cfi_offset 6, -16
 1020              		.cfi_offset 7, -12
 1021              		.cfi_offset 8, -8
 1022              		.cfi_offset 14, -4
 1023 0004 0546     		mov	r5, r0
 485:Core/Src/main.c **** 	for (int i=0; i<5; i++) {
 1024              		.loc 1 485 2 is_stmt 1 view .LVU269
 1025              	.LBB32:
 1026              		.loc 1 485 7 view .LVU270
 1027              	.LVL116:
 1028              		.loc 1 485 11 is_stmt 0 view .LVU271
 1029 0006 0024     		movs	r4, #0
 1030              		.loc 1 485 2 view .LVU272
 1031 0008 2EE0     		b	.L48
 1032              	.LVL117:
 1033              	.L49:
 486:Core/Src/main.c **** 		  start_time = HAL_GetTick();
 1034              		.loc 1 486 5 is_stmt 1 view .LVU273
 1035              		.loc 1 486 18 is_stmt 0 view .LVU274
 1036 000a FFF7FEFF 		bl	HAL_GetTick
 1037              	.LVL118:
 1038              		.loc 1 486 18 discriminator 1 view .LVU275
 1039 000e 4FF00008 		mov	r8, #0
 1040              		.loc 1 486 16 discriminator 1 view .LVU276
 1041 0012 304F     		ldr	r7, .L53
 1042 0014 3860     		str	r0, [r7]
 1043 0016 C7F80480 		str	r8, [r7, #4]
 487:Core/Src/main.c **** 
 488:Core/Src/main.c **** 		  checksum = calculate_mandelbrot_fixed_point_arithmetic(imageDimensions[i], imageDimensions[i], 
 1044              		.loc 1 488 5 is_stmt 1 view .LVU277
 1045              		.loc 1 488 16 is_stmt 0 view .LVU278
 1046 001a 2F4B     		ldr	r3, .L53+4
 1047 001c 53F82400 		ldr	r0, [r3, r4, lsl #2]
 1048 0020 1023     		movs	r3, #16
 1049 0022 2A46     		mov	r2, r5
 1050 0024 0146     		mov	r1, r0
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 30


 1051 0026 FFF7FEFF 		bl	calculate_mandelbrot_fixed_point_arithmetic
 1052              	.LVL119:
 1053              		.loc 1 488 14 discriminator 1 view .LVU279
 1054 002a 2C4E     		ldr	r6, .L53+8
 1055 002c C6E90001 		strd	r0, [r6]
 489:Core/Src/main.c **** 
 490:Core/Src/main.c **** 		  end_time = HAL_GetTick();
 1056              		.loc 1 490 5 is_stmt 1 view .LVU280
 1057              		.loc 1 490 16 is_stmt 0 view .LVU281
 1058 0030 FFF7FEFF 		bl	HAL_GetTick
 1059              	.LVL120:
 1060              		.loc 1 490 14 discriminator 1 view .LVU282
 1061 0034 2A4B     		ldr	r3, .L53+12
 1062 0036 1860     		str	r0, [r3]
 1063 0038 C3F80480 		str	r8, [r3, #4]
 491:Core/Src/main.c **** 
 492:Core/Src/main.c **** 		  execution_time = end_time - start_time;
 1064              		.loc 1 492 5 is_stmt 1 view .LVU283
 1065              		.loc 1 492 31 is_stmt 0 view .LVU284
 1066 003c 3A68     		ldr	r2, [r7]
 1067 003e 7B68     		ldr	r3, [r7, #4]
 1068 0040 801A     		subs	r0, r0, r2
 1069 0042 63EB4303 		sbc	r3, r3, r3, lsl #1
 1070              		.loc 1 492 20 view .LVU285
 1071 0046 274A     		ldr	r2, .L53+16
 1072 0048 1060     		str	r0, [r2]
 1073 004a 5360     		str	r3, [r2, #4]
 493:Core/Src/main.c **** 		  timeArray_arithmetic[i] = execution_time;
 1074              		.loc 1 493 5 is_stmt 1 view .LVU286
 1075              		.loc 1 493 29 is_stmt 0 view .LVU287
 1076 004c 264A     		ldr	r2, .L53+20
 1077 004e 02EBC401 		add	r1, r2, r4, lsl #3
 1078 0052 42F83400 		str	r0, [r2, r4, lsl #3]
 1079 0056 4B60     		str	r3, [r1, #4]
 494:Core/Src/main.c **** 		  checksumArray_arithmetic[i] = checksum;
 1080              		.loc 1 494 5 is_stmt 1 view .LVU288
 1081              		.loc 1 494 33 is_stmt 0 view .LVU289
 1082 0058 244B     		ldr	r3, .L53+24
 1083 005a 03EBC403 		add	r3, r3, r4, lsl #3
 1084 005e D6E90001 		ldrd	r0, [r6]
 1085 0062 C3E90001 		strd	r0, [r3]
 485:Core/Src/main.c **** 		  start_time = HAL_GetTick();
 1086              		.loc 1 485 22 is_stmt 1 discriminator 3 view .LVU290
 1087 0066 0134     		adds	r4, r4, #1
 1088              	.LVL121:
 1089              	.L48:
 485:Core/Src/main.c **** 		  start_time = HAL_GetTick();
 1090              		.loc 1 485 17 discriminator 1 view .LVU291
 1091 0068 042C     		cmp	r4, #4
 1092 006a CEDD     		ble	.L49
 1093              	.LBE32:
 1094              	.LBB33:
 495:Core/Src/main.c **** 	}
 496:Core/Src/main.c **** 
 497:Core/Src/main.c **** 	for (int i=0; i<5; i++) {
 1095              		.loc 1 497 11 is_stmt 0 view .LVU292
 1096 006c 0024     		movs	r4, #0
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 31


 1097              	.LVL122:
 1098              		.loc 1 497 11 view .LVU293
 1099 006e 2DE0     		b	.L50
 1100              	.LVL123:
 1101              	.L51:
 498:Core/Src/main.c **** 		  start_time = HAL_GetTick();
 1102              		.loc 1 498 5 is_stmt 1 view .LVU294
 1103              		.loc 1 498 18 is_stmt 0 view .LVU295
 1104 0070 FFF7FEFF 		bl	HAL_GetTick
 1105              	.LVL124:
 1106              		.loc 1 498 18 discriminator 1 view .LVU296
 1107 0074 4FF00008 		mov	r8, #0
 1108              		.loc 1 498 16 discriminator 1 view .LVU297
 1109 0078 164F     		ldr	r7, .L53
 1110 007a 3860     		str	r0, [r7]
 1111 007c C7F80480 		str	r8, [r7, #4]
 499:Core/Src/main.c **** 
 500:Core/Src/main.c **** 		  checksum = calculate_mandelbrot_double(imageDimensions[i], imageDimensions[i], iter);
 1112              		.loc 1 500 5 is_stmt 1 view .LVU298
 1113              		.loc 1 500 16 is_stmt 0 view .LVU299
 1114 0080 154B     		ldr	r3, .L53+4
 1115 0082 53F82400 		ldr	r0, [r3, r4, lsl #2]
 1116 0086 2A46     		mov	r2, r5
 1117 0088 0146     		mov	r1, r0
 1118 008a FFF7FEFF 		bl	calculate_mandelbrot_double
 1119              	.LVL125:
 1120              		.loc 1 500 14 discriminator 1 view .LVU300
 1121 008e 134E     		ldr	r6, .L53+8
 1122 0090 C6E90001 		strd	r0, [r6]
 501:Core/Src/main.c **** 
 502:Core/Src/main.c **** 		  end_time = HAL_GetTick();
 1123              		.loc 1 502 5 is_stmt 1 view .LVU301
 1124              		.loc 1 502 16 is_stmt 0 view .LVU302
 1125 0094 FFF7FEFF 		bl	HAL_GetTick
 1126              	.LVL126:
 1127              		.loc 1 502 14 discriminator 1 view .LVU303
 1128 0098 114B     		ldr	r3, .L53+12
 1129 009a 1860     		str	r0, [r3]
 1130 009c C3F80480 		str	r8, [r3, #4]
 503:Core/Src/main.c **** 
 504:Core/Src/main.c **** 		  execution_time = end_time - start_time;
 1131              		.loc 1 504 5 is_stmt 1 view .LVU304
 1132              		.loc 1 504 31 is_stmt 0 view .LVU305
 1133 00a0 3A68     		ldr	r2, [r7]
 1134 00a2 7B68     		ldr	r3, [r7, #4]
 1135 00a4 801A     		subs	r0, r0, r2
 1136 00a6 63EB4303 		sbc	r3, r3, r3, lsl #1
 1137              		.loc 1 504 20 view .LVU306
 1138 00aa 0E4A     		ldr	r2, .L53+16
 1139 00ac 1060     		str	r0, [r2]
 1140 00ae 5360     		str	r3, [r2, #4]
 505:Core/Src/main.c **** 		  timeArray_double[i] = execution_time;
 1141              		.loc 1 505 5 is_stmt 1 view .LVU307
 1142              		.loc 1 505 25 is_stmt 0 view .LVU308
 1143 00b0 0F4A     		ldr	r2, .L53+28
 1144 00b2 02EBC401 		add	r1, r2, r4, lsl #3
 1145 00b6 42F83400 		str	r0, [r2, r4, lsl #3]
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 32


 1146 00ba 4B60     		str	r3, [r1, #4]
 506:Core/Src/main.c **** 		  checksumArray_double[i] = checksum;
 1147              		.loc 1 506 5 is_stmt 1 view .LVU309
 1148              		.loc 1 506 29 is_stmt 0 view .LVU310
 1149 00bc 0D4B     		ldr	r3, .L53+32
 1150 00be 03EBC403 		add	r3, r3, r4, lsl #3
 1151 00c2 D6E90001 		ldrd	r0, [r6]
 1152 00c6 C3E90001 		strd	r0, [r3]
 497:Core/Src/main.c **** 		  start_time = HAL_GetTick();
 1153              		.loc 1 497 22 is_stmt 1 discriminator 3 view .LVU311
 1154 00ca 0134     		adds	r4, r4, #1
 1155              	.LVL127:
 1156              	.L50:
 497:Core/Src/main.c **** 		  start_time = HAL_GetTick();
 1157              		.loc 1 497 17 discriminator 1 view .LVU312
 1158 00cc 042C     		cmp	r4, #4
 1159 00ce CFDD     		ble	.L51
 1160              	.LBE33:
 507:Core/Src/main.c **** 		}
 508:Core/Src/main.c **** }
 1161              		.loc 1 508 1 is_stmt 0 view .LVU313
 1162 00d0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1163              	.LVL128:
 1164              	.L54:
 1165              		.loc 1 508 1 view .LVU314
 1166              		.align	2
 1167              	.L53:
 1168 00d4 00000000 		.word	start_time
 1169 00d8 00000000 		.word	imageDimensions
 1170 00dc 00000000 		.word	checksum
 1171 00e0 00000000 		.word	end_time
 1172 00e4 00000000 		.word	execution_time
 1173 00e8 00000000 		.word	timeArray_arithmetic
 1174 00ec 00000000 		.word	checksumArray_arithmetic
 1175 00f0 00000000 		.word	timeArray_double
 1176 00f4 00000000 		.word	checksumArray_double
 1177              		.cfi_endproc
 1178              	.LFE140:
 1180              		.section	.text.task2,"ax",%progbits
 1181              		.align	1
 1182              		.global	task2
 1183              		.syntax unified
 1184              		.thumb
 1185              		.thumb_func
 1187              	task2:
 1188              	.LFB141:
 509:Core/Src/main.c **** 
 510:Core/Src/main.c **** // ================================================================================================
 511:Core/Src/main.c **** /*
 512:Core/Src/main.c ****  * This method executes task 2 by performing the Mandelbrot function using the double method
 513:Core/Src/main.c ****  * It performs the function with varying max iterations sizes 100, 250, 500, 750, 1000
 514:Core/Src/main.c ****  */
 515:Core/Src/main.c **** void task2() {
 1189              		.loc 1 515 14 is_stmt 1 view -0
 1190              		.cfi_startproc
 1191              		@ args = 0, pretend = 0, frame = 0
 1192              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 33


 1193 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1194              	.LCFI11:
 1195              		.cfi_def_cfa_offset 24
 1196              		.cfi_offset 4, -24
 1197              		.cfi_offset 5, -20
 1198              		.cfi_offset 6, -16
 1199              		.cfi_offset 7, -12
 1200              		.cfi_offset 8, -8
 1201              		.cfi_offset 14, -4
 516:Core/Src/main.c **** 	// for looping through iteration sizes
 517:Core/Src/main.c **** 	for (int j = 0; j<5; j++) {
 1202              		.loc 1 517 2 view .LVU316
 1203              	.LBB34:
 1204              		.loc 1 517 7 view .LVU317
 1205              	.LVL129:
 1206              		.loc 1 517 11 is_stmt 0 view .LVU318
 1207 0004 0025     		movs	r5, #0
 1208              		.loc 1 517 2 view .LVU319
 1209 0006 35E0     		b	.L56
 1210              	.LVL130:
 1211              	.L57:
 1212              	.LBB35:
 518:Core/Src/main.c **** 
 519:Core/Src/main.c **** 		// for looping through image sizes
 520:Core/Src/main.c **** 		for (int i=0; i<5; i++) {
 521:Core/Src/main.c **** 			  start_time = HAL_GetTick();
 1213              		.loc 1 521 6 is_stmt 1 view .LVU320
 1214              		.loc 1 521 19 is_stmt 0 view .LVU321
 1215 0008 FFF7FEFF 		bl	HAL_GetTick
 1216              	.LVL131:
 1217              		.loc 1 521 19 discriminator 1 view .LVU322
 1218 000c 4FF00008 		mov	r8, #0
 1219              		.loc 1 521 17 discriminator 1 view .LVU323
 1220 0010 1B4F     		ldr	r7, .L62
 1221 0012 3860     		str	r0, [r7]
 1222 0014 C7F80480 		str	r8, [r7, #4]
 522:Core/Src/main.c **** 
 523:Core/Src/main.c **** 			  // Can change to fixed point arithmetic is comparison between that data is needed
 524:Core/Src/main.c **** 			  checksum = calculate_mandelbrot_double(imageDimensions[i], imageDimensions[i], iterationsArray
 1223              		.loc 1 524 6 is_stmt 1 view .LVU324
 1224              		.loc 1 524 17 is_stmt 0 view .LVU325
 1225 0018 1A4B     		ldr	r3, .L62+4
 1226 001a 53F82400 		ldr	r0, [r3, r4, lsl #2]
 1227 001e 1A4B     		ldr	r3, .L62+8
 1228 0020 53F82520 		ldr	r2, [r3, r5, lsl #2]
 1229 0024 0146     		mov	r1, r0
 1230 0026 FFF7FEFF 		bl	calculate_mandelbrot_double
 1231              	.LVL132:
 1232              		.loc 1 524 15 discriminator 1 view .LVU326
 1233 002a 184E     		ldr	r6, .L62+12
 1234 002c C6E90001 		strd	r0, [r6]
 525:Core/Src/main.c **** 
 526:Core/Src/main.c **** 			  end_time = HAL_GetTick();
 1235              		.loc 1 526 6 is_stmt 1 view .LVU327
 1236              		.loc 1 526 17 is_stmt 0 view .LVU328
 1237 0030 FFF7FEFF 		bl	HAL_GetTick
 1238              	.LVL133:
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 34


 1239              		.loc 1 526 15 discriminator 1 view .LVU329
 1240 0034 164B     		ldr	r3, .L62+16
 1241 0036 1860     		str	r0, [r3]
 1242 0038 C3F80480 		str	r8, [r3, #4]
 527:Core/Src/main.c **** 
 528:Core/Src/main.c **** 			  execution_time = end_time - start_time;
 1243              		.loc 1 528 6 is_stmt 1 view .LVU330
 1244              		.loc 1 528 32 is_stmt 0 view .LVU331
 1245 003c 3B68     		ldr	r3, [r7]
 1246 003e 7A68     		ldr	r2, [r7, #4]
 1247 0040 C01A     		subs	r0, r0, r3
 1248 0042 62EB4202 		sbc	r2, r2, r2, lsl #1
 1249              		.loc 1 528 21 view .LVU332
 1250 0046 134B     		ldr	r3, .L62+20
 1251 0048 1860     		str	r0, [r3]
 1252 004a 5A60     		str	r2, [r3, #4]
 529:Core/Src/main.c **** 			  task2ArrayTime[j][i] = execution_time;
 1253              		.loc 1 529 6 is_stmt 1 view .LVU333
 1254              		.loc 1 529 27 is_stmt 0 view .LVU334
 1255 004c 1249     		ldr	r1, .L62+24
 1256 004e 05EB8503 		add	r3, r5, r5, lsl #2
 1257 0052 2344     		add	r3, r3, r4
 1258 0054 01EBC307 		add	r7, r1, r3, lsl #3
 1259 0058 41F83300 		str	r0, [r1, r3, lsl #3]
 1260 005c 7A60     		str	r2, [r7, #4]
 530:Core/Src/main.c **** 			  task2ArrayChecksum[j][i] = checksum;
 1261              		.loc 1 530 6 is_stmt 1 view .LVU335
 1262              		.loc 1 530 31 is_stmt 0 view .LVU336
 1263 005e 0F4A     		ldr	r2, .L62+28
 1264 0060 02EBC303 		add	r3, r2, r3, lsl #3
 1265 0064 D6E90001 		ldrd	r0, [r6]
 1266 0068 C3E90001 		strd	r0, [r3]
 520:Core/Src/main.c **** 			  start_time = HAL_GetTick();
 1267              		.loc 1 520 23 is_stmt 1 discriminator 3 view .LVU337
 1268 006c 0134     		adds	r4, r4, #1
 1269              	.LVL134:
 1270              	.L58:
 520:Core/Src/main.c **** 			  start_time = HAL_GetTick();
 1271              		.loc 1 520 18 discriminator 1 view .LVU338
 1272 006e 042C     		cmp	r4, #4
 1273 0070 CADD     		ble	.L57
 1274              	.LBE35:
 517:Core/Src/main.c **** 
 1275              		.loc 1 517 24 discriminator 2 view .LVU339
 1276 0072 0135     		adds	r5, r5, #1
 1277              	.LVL135:
 1278              	.L56:
 517:Core/Src/main.c **** 
 1279              		.loc 1 517 19 discriminator 1 view .LVU340
 1280 0074 042D     		cmp	r5, #4
 1281 0076 01DC     		bgt	.L61
 1282              	.LBB36:
 520:Core/Src/main.c **** 			  start_time = HAL_GetTick();
 1283              		.loc 1 520 12 is_stmt 0 view .LVU341
 1284 0078 0024     		movs	r4, #0
 1285 007a F8E7     		b	.L58
 1286              	.L61:
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 35


 1287              	.LBE36:
 1288              	.LBE34:
 531:Core/Src/main.c **** 		}
 532:Core/Src/main.c **** 	}
 533:Core/Src/main.c **** }
 1289              		.loc 1 533 1 view .LVU342
 1290 007c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1291              	.LVL136:
 1292              	.L63:
 1293              		.loc 1 533 1 view .LVU343
 1294              		.align	2
 1295              	.L62:
 1296 0080 00000000 		.word	start_time
 1297 0084 00000000 		.word	imageDimensions
 1298 0088 00000000 		.word	iterationsArray
 1299 008c 00000000 		.word	checksum
 1300 0090 00000000 		.word	end_time
 1301 0094 00000000 		.word	execution_time
 1302 0098 00000000 		.word	task2ArrayTime
 1303 009c 00000000 		.word	task2ArrayChecksum
 1304              		.cfi_endproc
 1305              	.LFE141:
 1307              		.section	.text.task4,"ax",%progbits
 1308              		.align	1
 1309              		.global	task4
 1310              		.syntax unified
 1311              		.thumb
 1312              		.thumb_func
 1314              	task4:
 1315              	.LFB142:
 534:Core/Src/main.c **** 
 535:Core/Src/main.c **** // ================================================================================================
 536:Core/Src/main.c **** 
 537:Core/Src/main.c **** /*
 538:Core/Src/main.c ****  * Check if image size is too big then process the image size
 539:Core/Src/main.c ****  * If the image is too big, split the image in half and perform the experiment with the two halves 
 540:Core/Src/main.c ****  */
 541:Core/Src/main.c **** void task4() {
 1316              		.loc 1 541 14 is_stmt 1 view -0
 1317              		.cfi_startproc
 1318              		@ args = 0, pretend = 0, frame = 0
 1319              		@ frame_needed = 0, uses_anonymous_args = 0
 1320 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 1321              	.LCFI12:
 1322              		.cfi_def_cfa_offset 32
 1323              		.cfi_offset 4, -32
 1324              		.cfi_offset 5, -28
 1325              		.cfi_offset 6, -24
 1326              		.cfi_offset 7, -20
 1327              		.cfi_offset 8, -16
 1328              		.cfi_offset 9, -12
 1329              		.cfi_offset 10, -8
 1330              		.cfi_offset 14, -4
 542:Core/Src/main.c **** 
 543:Core/Src/main.c **** 	for (int i=0; i<5; i++) {
 1331              		.loc 1 543 2 view .LVU345
 1332              	.LBB37:
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 36


 1333              		.loc 1 543 7 view .LVU346
 1334              	.LVL137:
 1335              		.loc 1 543 11 is_stmt 0 view .LVU347
 1336 0004 0024     		movs	r4, #0
 1337              		.loc 1 543 2 view .LVU348
 1338 0006 41E0     		b	.L65
 1339              	.LVL138:
 1340              	.L66:
 1341              	.LBB38:
 1342              	.LBB39:
 544:Core/Src/main.c **** 		int width = sizes[i][0];
 545:Core/Src/main.c **** 		int height = sizes[i][1];
 546:Core/Src/main.c **** 
 547:Core/Src/main.c **** 	    start_time = HAL_GetTick();
 548:Core/Src/main.c **** 
 549:Core/Src/main.c **** 		if (width * height * sizeof(uint32_t) <= MEMORY_LIMIT) {
 550:Core/Src/main.c **** 			// Direct calculation
 551:Core/Src/main.c **** 			checksum = calculate_mandelbrot_fixed_point_arithmetic(width, height, MAX_ITER, 16);
 552:Core/Src/main.c **** 
 553:Core/Src/main.c **** 		} else {
 554:Core/Src/main.c **** 			// Splitting method
 555:Core/Src/main.c **** 
 556:Core/Src/main.c **** 			int split_height = height / 2;  // split image into 2 horizontal halves
 1343              		.loc 1 556 4 is_stmt 1 view .LVU349
 1344              		.loc 1 556 8 is_stmt 0 view .LVU350
 1345 0008 06EBD67A 		add	r10, r6, r6, lsr #31
 1346 000c 4FEA6A0A 		asr	r10, r10, #1
 1347              	.LVL139:
 557:Core/Src/main.c **** 
 558:Core/Src/main.c **** 			checksum = 0.0;
 1348              		.loc 1 558 4 is_stmt 1 view .LVU351
 1349              		.loc 1 558 13 is_stmt 0 view .LVU352
 1350 0010 DFF8CC90 		ldr	r9, .L71+20
 1351 0014 0022     		movs	r2, #0
 1352 0016 0023     		movs	r3, #0
 1353 0018 C9E90023 		strd	r2, [r9]
 559:Core/Src/main.c **** 
 560:Core/Src/main.c **** 			// Process first half
 561:Core/Src/main.c **** 			checksum += calculate_mandelbrot_fixed_point_arithmetic(width, split_height, MAX_ITER, 16);
 1354              		.loc 1 561 4 is_stmt 1 view .LVU353
 1355              		.loc 1 561 16 is_stmt 0 view .LVU354
 1356 001c 1023     		movs	r3, #16
 1357 001e 6422     		movs	r2, #100
 1358 0020 5146     		mov	r1, r10
 1359 0022 3846     		mov	r0, r7
 1360 0024 FFF7FEFF 		bl	calculate_mandelbrot_fixed_point_arithmetic
 1361              	.LVL140:
 1362 0028 0546     		mov	r5, r0
 1363 002a 8846     		mov	r8, r1
 1364              		.loc 1 561 13 discriminator 1 view .LVU355
 1365 002c C9F80000 		str	r0, [r9]
 1366 0030 C9F80410 		str	r1, [r9, #4]
 562:Core/Src/main.c **** 
 563:Core/Src/main.c **** 			// Process second half
 564:Core/Src/main.c **** 			checksum += calculate_mandelbrot_fixed_point_arithmetic(width, height - split_height, MAX_ITER, 
 1367              		.loc 1 564 4 is_stmt 1 view .LVU356
 1368              		.loc 1 564 16 is_stmt 0 view .LVU357
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 37


 1369 0034 1023     		movs	r3, #16
 1370 0036 6422     		movs	r2, #100
 1371 0038 A6EB0A01 		sub	r1, r6, r10
 1372 003c 3846     		mov	r0, r7
 1373 003e FFF7FEFF 		bl	calculate_mandelbrot_fixed_point_arithmetic
 1374              	.LVL141:
 1375              		.loc 1 564 13 discriminator 1 view .LVU358
 1376 0042 2D18     		adds	r5, r5, r0
 1377 0044 48EB0101 		adc	r1, r8, r1
 1378 0048 C9F80050 		str	r5, [r9]
 1379 004c C9F80410 		str	r1, [r9, #4]
 1380              	.LVL142:
 1381              	.L67:
 1382              		.loc 1 564 13 discriminator 1 view .LVU359
 1383              	.LBE39:
 565:Core/Src/main.c **** 		}
 566:Core/Src/main.c **** 
 567:Core/Src/main.c **** 		end_time = HAL_GetTick();
 1384              		.loc 1 567 3 is_stmt 1 view .LVU360
 1385              		.loc 1 567 14 is_stmt 0 view .LVU361
 1386 0050 FFF7FEFF 		bl	HAL_GetTick
 1387              	.LVL143:
 1388              		.loc 1 567 12 discriminator 1 view .LVU362
 1389 0054 1D4B     		ldr	r3, .L71
 1390 0056 1860     		str	r0, [r3]
 1391 0058 0022     		movs	r2, #0
 1392 005a 5A60     		str	r2, [r3, #4]
 568:Core/Src/main.c **** 
 569:Core/Src/main.c **** 		execution_time = end_time - start_time;
 1393              		.loc 1 569 3 is_stmt 1 view .LVU363
 1394              		.loc 1 569 29 is_stmt 0 view .LVU364
 1395 005c 1C4B     		ldr	r3, .L71+4
 1396 005e 1A68     		ldr	r2, [r3]
 1397 0060 5B68     		ldr	r3, [r3, #4]
 1398 0062 801A     		subs	r0, r0, r2
 1399 0064 63EB4303 		sbc	r3, r3, r3, lsl #1
 1400              		.loc 1 569 18 view .LVU365
 1401 0068 1A4A     		ldr	r2, .L71+8
 1402 006a 1060     		str	r0, [r2]
 1403 006c 5360     		str	r3, [r2, #4]
 570:Core/Src/main.c **** 	    task4ArrayTime[i] = execution_time;
 1404              		.loc 1 570 6 is_stmt 1 view .LVU366
 1405              		.loc 1 570 24 is_stmt 0 view .LVU367
 1406 006e 1A4A     		ldr	r2, .L71+12
 1407 0070 02EBC401 		add	r1, r2, r4, lsl #3
 1408 0074 42F83400 		str	r0, [r2, r4, lsl #3]
 1409 0078 4B60     		str	r3, [r1, #4]
 571:Core/Src/main.c **** 	    task4ArrayChecksum[i] = checksum;
 1410              		.loc 1 571 6 is_stmt 1 view .LVU368
 1411              		.loc 1 571 28 is_stmt 0 view .LVU369
 1412 007a 184B     		ldr	r3, .L71+16
 1413 007c 03EBC403 		add	r3, r3, r4, lsl #3
 1414 0080 174A     		ldr	r2, .L71+20
 1415 0082 D2E90001 		ldrd	r0, [r2]
 1416 0086 C3E90001 		strd	r0, [r3]
 1417              	.LBE38:
 543:Core/Src/main.c **** 		int width = sizes[i][0];
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 38


 1418              		.loc 1 543 22 is_stmt 1 discriminator 2 view .LVU370
 1419 008a 0134     		adds	r4, r4, #1
 1420              	.LVL144:
 1421              	.L65:
 543:Core/Src/main.c **** 		int width = sizes[i][0];
 1422              		.loc 1 543 17 discriminator 1 view .LVU371
 1423 008c 042C     		cmp	r4, #4
 1424 008e 1BDC     		bgt	.L70
 1425              	.LBB40:
 544:Core/Src/main.c **** 		int height = sizes[i][1];
 1426              		.loc 1 544 3 view .LVU372
 544:Core/Src/main.c **** 		int height = sizes[i][1];
 1427              		.loc 1 544 7 is_stmt 0 view .LVU373
 1428 0090 144B     		ldr	r3, .L71+24
 1429 0092 53F83470 		ldr	r7, [r3, r4, lsl #3]
 1430              	.LVL145:
 545:Core/Src/main.c **** 
 1431              		.loc 1 545 3 is_stmt 1 view .LVU374
 545:Core/Src/main.c **** 
 1432              		.loc 1 545 7 is_stmt 0 view .LVU375
 1433 0096 03EBC403 		add	r3, r3, r4, lsl #3
 1434 009a 5E68     		ldr	r6, [r3, #4]
 1435              	.LVL146:
 547:Core/Src/main.c **** 
 1436              		.loc 1 547 6 is_stmt 1 view .LVU376
 547:Core/Src/main.c **** 
 1437              		.loc 1 547 19 is_stmt 0 view .LVU377
 1438 009c FFF7FEFF 		bl	HAL_GetTick
 1439              	.LVL147:
 547:Core/Src/main.c **** 
 1440              		.loc 1 547 17 discriminator 1 view .LVU378
 1441 00a0 0B4B     		ldr	r3, .L71+4
 1442 00a2 1860     		str	r0, [r3]
 1443 00a4 0022     		movs	r2, #0
 1444 00a6 5A60     		str	r2, [r3, #4]
 549:Core/Src/main.c **** 			// Direct calculation
 1445              		.loc 1 549 3 is_stmt 1 view .LVU379
 549:Core/Src/main.c **** 			// Direct calculation
 1446              		.loc 1 549 13 is_stmt 0 view .LVU380
 1447 00a8 06FB07F2 		mul	r2, r6, r7
 549:Core/Src/main.c **** 			// Direct calculation
 1448              		.loc 1 549 6 view .LVU381
 1449 00ac 0E4B     		ldr	r3, .L71+28
 1450 00ae B3EB820F 		cmp	r3, r2, lsl #2
 1451 00b2 A9D3     		bcc	.L66
 551:Core/Src/main.c **** 
 1452              		.loc 1 551 4 is_stmt 1 view .LVU382
 551:Core/Src/main.c **** 
 1453              		.loc 1 551 15 is_stmt 0 view .LVU383
 1454 00b4 1023     		movs	r3, #16
 1455 00b6 6422     		movs	r2, #100
 1456 00b8 3146     		mov	r1, r6
 1457 00ba 3846     		mov	r0, r7
 1458 00bc FFF7FEFF 		bl	calculate_mandelbrot_fixed_point_arithmetic
 1459              	.LVL148:
 551:Core/Src/main.c **** 
 1460              		.loc 1 551 13 discriminator 1 view .LVU384
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 39


 1461 00c0 074B     		ldr	r3, .L71+20
 1462 00c2 C3E90001 		strd	r0, [r3]
 1463 00c6 C3E7     		b	.L67
 1464              	.LVL149:
 1465              	.L70:
 551:Core/Src/main.c **** 
 1466              		.loc 1 551 13 discriminator 1 view .LVU385
 1467              	.LBE40:
 1468              	.LBE37:
 572:Core/Src/main.c **** 	}
 573:Core/Src/main.c **** 
 574:Core/Src/main.c **** }
 1469              		.loc 1 574 1 view .LVU386
 1470 00c8 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1471              	.LVL150:
 1472              	.L72:
 1473              		.loc 1 574 1 view .LVU387
 1474              		.align	2
 1475              	.L71:
 1476 00cc 00000000 		.word	end_time
 1477 00d0 00000000 		.word	start_time
 1478 00d4 00000000 		.word	execution_time
 1479 00d8 00000000 		.word	task4ArrayTime
 1480 00dc 00000000 		.word	task4ArrayChecksum
 1481 00e0 00000000 		.word	checksum
 1482 00e4 00000000 		.word	sizes
 1483 00e8 80320200 		.word	144000
 1484              		.cfi_endproc
 1485              	.LFE142:
 1487              		.section	.text.task7,"ax",%progbits
 1488              		.align	1
 1489              		.global	task7
 1490              		.syntax unified
 1491              		.thumb
 1492              		.thumb_func
 1494              	task7:
 1495              	.LFB143:
 575:Core/Src/main.c **** 
 576:Core/Src/main.c **** // ================================================================================================
 577:Core/Src/main.c **** /*
 578:Core/Src/main.c ****  * This function performs task 7 of Practical 3
 579:Core/Src/main.c ****  * It performs the fixed point arithmetic Mandelbrot function with varying scale factors
 580:Core/Src/main.c ****  * The scale factors are the binary equivalents of 10^3, 10^4, 10^6
 581:Core/Src/main.c ****  * i.e 2^10, 2^13, 2^20
 582:Core/Src/main.c ****  */
 583:Core/Src/main.c **** void task7() {
 1496              		.loc 1 583 14 is_stmt 1 view -0
 1497              		.cfi_startproc
 1498              		@ args = 0, pretend = 0, frame = 0
 1499              		@ frame_needed = 0, uses_anonymous_args = 0
 1500 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1501              	.LCFI13:
 1502              		.cfi_def_cfa_offset 24
 1503              		.cfi_offset 4, -24
 1504              		.cfi_offset 5, -20
 1505              		.cfi_offset 6, -16
 1506              		.cfi_offset 7, -12
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 40


 1507              		.cfi_offset 8, -8
 1508              		.cfi_offset 14, -4
 584:Core/Src/main.c **** 
 585:Core/Src/main.c **** 	for (int j=0; j<3; j++) {
 1509              		.loc 1 585 2 view .LVU389
 1510              	.LBB41:
 1511              		.loc 1 585 7 view .LVU390
 1512              	.LVL151:
 1513              		.loc 1 585 11 is_stmt 0 view .LVU391
 1514 0004 0025     		movs	r5, #0
 1515              		.loc 1 585 2 view .LVU392
 1516 0006 36E0     		b	.L74
 1517              	.LVL152:
 1518              	.L75:
 1519              	.LBB42:
 586:Core/Src/main.c **** 
 587:Core/Src/main.c **** 		for (int i=0; i<5; i++) {
 588:Core/Src/main.c **** 				  start_time = HAL_GetTick();
 1520              		.loc 1 588 7 is_stmt 1 view .LVU393
 1521              		.loc 1 588 20 is_stmt 0 view .LVU394
 1522 0008 FFF7FEFF 		bl	HAL_GetTick
 1523              	.LVL153:
 1524              		.loc 1 588 20 discriminator 1 view .LVU395
 1525 000c 4FF00008 		mov	r8, #0
 1526              		.loc 1 588 18 discriminator 1 view .LVU396
 1527 0010 1C4F     		ldr	r7, .L80
 1528 0012 3860     		str	r0, [r7]
 1529 0014 C7F80480 		str	r8, [r7, #4]
 589:Core/Src/main.c **** 
 590:Core/Src/main.c **** 				  checksum = calculate_mandelbrot_fixed_point_arithmetic(imageDimensions[i], imageDimensions[i]
 1530              		.loc 1 590 7 is_stmt 1 view .LVU397
 1531              		.loc 1 590 18 is_stmt 0 view .LVU398
 1532 0018 1B4B     		ldr	r3, .L80+4
 1533 001a 53F82400 		ldr	r0, [r3, r4, lsl #2]
 1534 001e 1B4B     		ldr	r3, .L80+8
 1535 0020 53F82530 		ldr	r3, [r3, r5, lsl #2]
 1536 0024 6422     		movs	r2, #100
 1537 0026 0146     		mov	r1, r0
 1538 0028 FFF7FEFF 		bl	calculate_mandelbrot_fixed_point_arithmetic
 1539              	.LVL154:
 1540              		.loc 1 590 16 discriminator 1 view .LVU399
 1541 002c 184E     		ldr	r6, .L80+12
 1542 002e C6E90001 		strd	r0, [r6]
 591:Core/Src/main.c **** 
 592:Core/Src/main.c **** 				  end_time = HAL_GetTick();
 1543              		.loc 1 592 7 is_stmt 1 view .LVU400
 1544              		.loc 1 592 18 is_stmt 0 view .LVU401
 1545 0032 FFF7FEFF 		bl	HAL_GetTick
 1546              	.LVL155:
 1547              		.loc 1 592 16 discriminator 1 view .LVU402
 1548 0036 174B     		ldr	r3, .L80+16
 1549 0038 1860     		str	r0, [r3]
 1550 003a C3F80480 		str	r8, [r3, #4]
 593:Core/Src/main.c **** 
 594:Core/Src/main.c **** 				  execution_time = end_time - start_time;
 1551              		.loc 1 594 7 is_stmt 1 view .LVU403
 1552              		.loc 1 594 33 is_stmt 0 view .LVU404
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 41


 1553 003e 3B68     		ldr	r3, [r7]
 1554 0040 7A68     		ldr	r2, [r7, #4]
 1555 0042 C01A     		subs	r0, r0, r3
 1556 0044 62EB4202 		sbc	r2, r2, r2, lsl #1
 1557              		.loc 1 594 22 view .LVU405
 1558 0048 134B     		ldr	r3, .L80+20
 1559 004a 1860     		str	r0, [r3]
 1560 004c 5A60     		str	r2, [r3, #4]
 595:Core/Src/main.c **** 				  task7ArrayTime[j][i] = execution_time;
 1561              		.loc 1 595 7 is_stmt 1 view .LVU406
 1562              		.loc 1 595 28 is_stmt 0 view .LVU407
 1563 004e 1349     		ldr	r1, .L80+24
 1564 0050 05EB8503 		add	r3, r5, r5, lsl #2
 1565 0054 2344     		add	r3, r3, r4
 1566 0056 01EBC307 		add	r7, r1, r3, lsl #3
 1567 005a 41F83300 		str	r0, [r1, r3, lsl #3]
 1568 005e 7A60     		str	r2, [r7, #4]
 596:Core/Src/main.c **** 				  task7ArrayChecksum[j][i] = checksum;
 1569              		.loc 1 596 7 is_stmt 1 view .LVU408
 1570              		.loc 1 596 32 is_stmt 0 view .LVU409
 1571 0060 0F4A     		ldr	r2, .L80+28
 1572 0062 02EBC303 		add	r3, r2, r3, lsl #3
 1573 0066 D6E90001 		ldrd	r0, [r6]
 1574 006a C3E90001 		strd	r0, [r3]
 587:Core/Src/main.c **** 				  start_time = HAL_GetTick();
 1575              		.loc 1 587 23 is_stmt 1 discriminator 3 view .LVU410
 1576 006e 0134     		adds	r4, r4, #1
 1577              	.LVL156:
 1578              	.L76:
 587:Core/Src/main.c **** 				  start_time = HAL_GetTick();
 1579              		.loc 1 587 18 discriminator 1 view .LVU411
 1580 0070 042C     		cmp	r4, #4
 1581 0072 C9DD     		ble	.L75
 1582              	.LBE42:
 585:Core/Src/main.c **** 
 1583              		.loc 1 585 22 discriminator 2 view .LVU412
 1584 0074 0135     		adds	r5, r5, #1
 1585              	.LVL157:
 1586              	.L74:
 585:Core/Src/main.c **** 
 1587              		.loc 1 585 17 discriminator 1 view .LVU413
 1588 0076 022D     		cmp	r5, #2
 1589 0078 01DC     		bgt	.L79
 1590              	.LBB43:
 587:Core/Src/main.c **** 				  start_time = HAL_GetTick();
 1591              		.loc 1 587 12 is_stmt 0 view .LVU414
 1592 007a 0024     		movs	r4, #0
 1593 007c F8E7     		b	.L76
 1594              	.L79:
 1595              	.LBE43:
 1596              	.LBE41:
 597:Core/Src/main.c **** 		}
 598:Core/Src/main.c **** 
 599:Core/Src/main.c **** 	}
 600:Core/Src/main.c **** 
 601:Core/Src/main.c **** }
 1597              		.loc 1 601 1 view .LVU415
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 42


 1598 007e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1599              	.LVL158:
 1600              	.L81:
 1601              		.loc 1 601 1 view .LVU416
 1602 0082 00BF     		.align	2
 1603              	.L80:
 1604 0084 00000000 		.word	start_time
 1605 0088 00000000 		.word	imageDimensions
 1606 008c 00000000 		.word	arrayQ
 1607 0090 00000000 		.word	checksum
 1608 0094 00000000 		.word	end_time
 1609 0098 00000000 		.word	execution_time
 1610 009c 00000000 		.word	task7ArrayTime
 1611 00a0 00000000 		.word	task7ArrayChecksum
 1612              		.cfi_endproc
 1613              	.LFE143:
 1615              		.section	.text.Error_Handler,"ax",%progbits
 1616              		.align	1
 1617              		.global	Error_Handler
 1618              		.syntax unified
 1619              		.thumb
 1620              		.thumb_func
 1622              	Error_Handler:
 1623              	.LFB147:
 602:Core/Src/main.c **** 
 603:Core/Src/main.c **** // ================================================================================================
 604:Core/Src/main.c **** 
 605:Core/Src/main.c **** static inline void cycle_counter_init(void)
 606:Core/Src/main.c ****  {
 607:Core/Src/main.c **** 	  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 608:Core/Src/main.c **** 	  DWT->CYCCNT = 0;
 609:Core/Src/main.c **** 	  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 610:Core/Src/main.c ****  }
 611:Core/Src/main.c **** 
 612:Core/Src/main.c **** 
 613:Core/Src/main.c **** 
 614:Core/Src/main.c ****  static inline uint32_t cycle_counter_get(void)
 615:Core/Src/main.c ****  {
 616:Core/Src/main.c ****      return DWT->CYCCNT;
 617:Core/Src/main.c ****  }
 618:Core/Src/main.c **** 
 619:Core/Src/main.c ****  static inline uint64_t cycle_diff(uint32_t start, uint32_t end)
 620:Core/Src/main.c ****  {
 621:Core/Src/main.c ****      return (end >= start) ? (uint64_t)(end - start)
 622:Core/Src/main.c ****                            : (uint64_t)(0x100000000ULL - start + end);
 623:Core/Src/main.c ****  }
 624:Core/Src/main.c **** 
 625:Core/Src/main.c **** // ================================================================================================
 626:Core/Src/main.c **** 
 627:Core/Src/main.c **** 
 628:Core/Src/main.c **** /* USER CODE END 4 */
 629:Core/Src/main.c **** 
 630:Core/Src/main.c **** /**
 631:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 632:Core/Src/main.c ****   * @retval None
 633:Core/Src/main.c ****   */
 634:Core/Src/main.c **** void Error_Handler(void)
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 43


 635:Core/Src/main.c **** {
 1624              		.loc 1 635 1 is_stmt 1 view -0
 1625              		.cfi_startproc
 1626              		@ Volatile: function does not return.
 1627              		@ args = 0, pretend = 0, frame = 0
 1628              		@ frame_needed = 0, uses_anonymous_args = 0
 1629              		@ link register save eliminated.
 636:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 637:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 638:Core/Src/main.c ****   __disable_irq();
 1630              		.loc 1 638 3 view .LVU418
 1631              	.LBB44:
 1632              	.LBI44:
 1633              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 44


  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 45


 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 46


 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 47


 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 48


 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 49


 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 50


 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 51


 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 52


 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 53


 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 54


 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 55


 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 56


 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 57


 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 58


 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 59


 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 60


 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 1634              		.loc 2 960 27 view .LVU419
 1635              	.LBB45:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1636              		.loc 2 962 3 view .LVU420
 1637              		.syntax unified
 1638              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1639 0000 72B6     		cpsid i
 1640              	@ 0 "" 2
 1641              		.thumb
 1642              		.syntax unified
 1643              	.L83:
 1644              	.LBE45:
 1645              	.LBE44:
 639:Core/Src/main.c ****   while (1)
 1646              		.loc 1 639 3 view .LVU421
 640:Core/Src/main.c ****   {
 641:Core/Src/main.c ****   }
 1647              		.loc 1 641 3 view .LVU422
 639:Core/Src/main.c ****   while (1)
 1648              		.loc 1 639 9 view .LVU423
 1649 0002 FEE7     		b	.L83
 1650              		.cfi_endproc
 1651              	.LFE147:
 1653              		.section	.text.SystemClock_Config,"ax",%progbits
 1654              		.align	1
 1655              		.global	SystemClock_Config
 1656              		.syntax unified
 1657              		.thumb
 1658              		.thumb_func
 1660              	SystemClock_Config:
 1661              	.LFB135:
 262:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1662              		.loc 1 262 1 view -0
 1663              		.cfi_startproc
 1664              		@ args = 0, pretend = 0, frame = 80
 1665              		@ frame_needed = 0, uses_anonymous_args = 0
 1666 0000 00B5     		push	{lr}
 1667              	.LCFI14:
 1668              		.cfi_def_cfa_offset 4
 1669              		.cfi_offset 14, -4
 1670 0002 95B0     		sub	sp, sp, #84
 1671              	.LCFI15:
 1672              		.cfi_def_cfa_offset 88
 263:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1673              		.loc 1 263 3 view .LVU425
 263:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1674              		.loc 1 263 22 is_stmt 0 view .LVU426
 1675 0004 3422     		movs	r2, #52
 1676 0006 0021     		movs	r1, #0
 1677 0008 07A8     		add	r0, sp, #28
 1678 000a FFF7FEFF 		bl	memset
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 61


 1679              	.LVL159:
 264:Core/Src/main.c **** 
 1680              		.loc 1 264 3 is_stmt 1 view .LVU427
 264:Core/Src/main.c **** 
 1681              		.loc 1 264 22 is_stmt 0 view .LVU428
 1682 000e 0023     		movs	r3, #0
 1683 0010 0293     		str	r3, [sp, #8]
 1684 0012 0393     		str	r3, [sp, #12]
 1685 0014 0493     		str	r3, [sp, #16]
 1686 0016 0593     		str	r3, [sp, #20]
 1687 0018 0693     		str	r3, [sp, #24]
 268:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1688              		.loc 1 268 3 is_stmt 1 view .LVU429
 1689              	.LBB46:
 268:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1690              		.loc 1 268 3 view .LVU430
 1691 001a 0093     		str	r3, [sp]
 268:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1692              		.loc 1 268 3 view .LVU431
 1693 001c 214A     		ldr	r2, .L90
 1694 001e 116C     		ldr	r1, [r2, #64]
 1695 0020 41F08051 		orr	r1, r1, #268435456
 1696 0024 1164     		str	r1, [r2, #64]
 268:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1697              		.loc 1 268 3 view .LVU432
 1698 0026 126C     		ldr	r2, [r2, #64]
 1699 0028 02F08052 		and	r2, r2, #268435456
 1700 002c 0092     		str	r2, [sp]
 268:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1701              		.loc 1 268 3 view .LVU433
 1702 002e 009A     		ldr	r2, [sp]
 1703              	.LBE46:
 268:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1704              		.loc 1 268 3 view .LVU434
 269:Core/Src/main.c **** 
 1705              		.loc 1 269 3 view .LVU435
 1706              	.LBB47:
 269:Core/Src/main.c **** 
 1707              		.loc 1 269 3 view .LVU436
 1708 0030 0193     		str	r3, [sp, #4]
 269:Core/Src/main.c **** 
 1709              		.loc 1 269 3 view .LVU437
 1710 0032 1D4A     		ldr	r2, .L90+4
 1711 0034 1368     		ldr	r3, [r2]
 1712 0036 23F44043 		bic	r3, r3, #49152
 1713 003a 43F48043 		orr	r3, r3, #16384
 1714 003e 1360     		str	r3, [r2]
 269:Core/Src/main.c **** 
 1715              		.loc 1 269 3 view .LVU438
 1716 0040 1368     		ldr	r3, [r2]
 1717 0042 03F44043 		and	r3, r3, #49152
 1718 0046 0193     		str	r3, [sp, #4]
 269:Core/Src/main.c **** 
 1719              		.loc 1 269 3 view .LVU439
 1720 0048 019B     		ldr	r3, [sp, #4]
 1721              	.LBE47:
 269:Core/Src/main.c **** 
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 62


 1722              		.loc 1 269 3 view .LVU440
 274:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 1723              		.loc 1 274 3 view .LVU441
 274:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 1724              		.loc 1 274 36 is_stmt 0 view .LVU442
 1725 004a 0123     		movs	r3, #1
 1726 004c 0793     		str	r3, [sp, #28]
 275:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1727              		.loc 1 275 3 is_stmt 1 view .LVU443
 275:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1728              		.loc 1 275 30 is_stmt 0 view .LVU444
 1729 004e 4FF48033 		mov	r3, #65536
 1730 0052 0893     		str	r3, [sp, #32]
 276:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 1731              		.loc 1 276 3 is_stmt 1 view .LVU445
 276:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 1732              		.loc 1 276 34 is_stmt 0 view .LVU446
 1733 0054 0223     		movs	r3, #2
 1734 0056 0D93     		str	r3, [sp, #52]
 277:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 15;
 1735              		.loc 1 277 3 is_stmt 1 view .LVU447
 277:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 15;
 1736              		.loc 1 277 35 is_stmt 0 view .LVU448
 1737 0058 4FF48002 		mov	r2, #4194304
 1738 005c 0E92     		str	r2, [sp, #56]
 278:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 144;
 1739              		.loc 1 278 3 is_stmt 1 view .LVU449
 278:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 144;
 1740              		.loc 1 278 30 is_stmt 0 view .LVU450
 1741 005e 0F22     		movs	r2, #15
 1742 0060 0F92     		str	r2, [sp, #60]
 279:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1743              		.loc 1 279 3 is_stmt 1 view .LVU451
 279:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1744              		.loc 1 279 30 is_stmt 0 view .LVU452
 1745 0062 9022     		movs	r2, #144
 1746 0064 1092     		str	r2, [sp, #64]
 280:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 1747              		.loc 1 280 3 is_stmt 1 view .LVU453
 280:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 1748              		.loc 1 280 30 is_stmt 0 view .LVU454
 1749 0066 1193     		str	r3, [sp, #68]
 281:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 1750              		.loc 1 281 3 is_stmt 1 view .LVU455
 281:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 1751              		.loc 1 281 30 is_stmt 0 view .LVU456
 1752 0068 1293     		str	r3, [sp, #72]
 282:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1753              		.loc 1 282 3 is_stmt 1 view .LVU457
 282:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1754              		.loc 1 282 30 is_stmt 0 view .LVU458
 1755 006a 1393     		str	r3, [sp, #76]
 283:Core/Src/main.c ****   {
 1756              		.loc 1 283 3 is_stmt 1 view .LVU459
 283:Core/Src/main.c ****   {
 1757              		.loc 1 283 7 is_stmt 0 view .LVU460
 1758 006c 07A8     		add	r0, sp, #28
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 63


 1759 006e FFF7FEFF 		bl	HAL_RCC_OscConfig
 1760              	.LVL160:
 283:Core/Src/main.c ****   {
 1761              		.loc 1 283 6 discriminator 1 view .LVU461
 1762 0072 98B9     		cbnz	r0, .L88
 290:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1763              		.loc 1 290 3 is_stmt 1 view .LVU462
 290:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1764              		.loc 1 290 31 is_stmt 0 view .LVU463
 1765 0074 0F23     		movs	r3, #15
 1766 0076 0293     		str	r3, [sp, #8]
 292:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1767              		.loc 1 292 3 is_stmt 1 view .LVU464
 292:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1768              		.loc 1 292 34 is_stmt 0 view .LVU465
 1769 0078 0223     		movs	r3, #2
 1770 007a 0393     		str	r3, [sp, #12]
 293:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 1771              		.loc 1 293 3 is_stmt 1 view .LVU466
 293:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 1772              		.loc 1 293 35 is_stmt 0 view .LVU467
 1773 007c 0023     		movs	r3, #0
 1774 007e 0493     		str	r3, [sp, #16]
 294:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 1775              		.loc 1 294 3 is_stmt 1 view .LVU468
 294:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 1776              		.loc 1 294 36 is_stmt 0 view .LVU469
 1777 0080 4FF4A053 		mov	r3, #5120
 1778 0084 0593     		str	r3, [sp, #20]
 295:Core/Src/main.c **** 
 1779              		.loc 1 295 3 is_stmt 1 view .LVU470
 295:Core/Src/main.c **** 
 1780              		.loc 1 295 36 is_stmt 0 view .LVU471
 1781 0086 4FF48053 		mov	r3, #4096
 1782 008a 0693     		str	r3, [sp, #24]
 297:Core/Src/main.c ****   {
 1783              		.loc 1 297 3 is_stmt 1 view .LVU472
 297:Core/Src/main.c ****   {
 1784              		.loc 1 297 7 is_stmt 0 view .LVU473
 1785 008c 0321     		movs	r1, #3
 1786 008e 02A8     		add	r0, sp, #8
 1787 0090 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1788              	.LVL161:
 297:Core/Src/main.c ****   {
 1789              		.loc 1 297 6 discriminator 1 view .LVU474
 1790 0094 20B9     		cbnz	r0, .L89
 301:Core/Src/main.c **** 
 1791              		.loc 1 301 1 view .LVU475
 1792 0096 15B0     		add	sp, sp, #84
 1793              	.LCFI16:
 1794              		.cfi_remember_state
 1795              		.cfi_def_cfa_offset 4
 1796              		@ sp needed
 1797 0098 5DF804FB 		ldr	pc, [sp], #4
 1798              	.L88:
 1799              	.LCFI17:
 1800              		.cfi_restore_state
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 64


 285:Core/Src/main.c ****   }
 1801              		.loc 1 285 5 is_stmt 1 view .LVU476
 1802 009c FFF7FEFF 		bl	Error_Handler
 1803              	.LVL162:
 1804              	.L89:
 299:Core/Src/main.c ****   }
 1805              		.loc 1 299 5 view .LVU477
 1806 00a0 FFF7FEFF 		bl	Error_Handler
 1807              	.LVL163:
 1808              	.L91:
 1809              		.align	2
 1810              	.L90:
 1811 00a4 00380240 		.word	1073887232
 1812 00a8 00700040 		.word	1073770496
 1813              		.cfi_endproc
 1814              	.LFE135:
 1816              		.section	.text.main,"ax",%progbits
 1817              		.align	1
 1818              		.global	main
 1819              		.syntax unified
 1820              		.thumb
 1821              		.thumb_func
 1823              	main:
 1824              	.LFB134:
 125:Core/Src/main.c **** 
 1825              		.loc 1 125 1 view -0
 1826              		.cfi_startproc
 1827              		@ Volatile: function does not return.
 1828              		@ args = 0, pretend = 0, frame = 0
 1829              		@ frame_needed = 0, uses_anonymous_args = 0
 1830 0000 08B5     		push	{r3, lr}
 1831              	.LCFI18:
 1832              		.cfi_def_cfa_offset 8
 1833              		.cfi_offset 3, -8
 1834              		.cfi_offset 14, -4
 134:Core/Src/main.c **** 
 1835              		.loc 1 134 3 view .LVU479
 1836 0002 FFF7FEFF 		bl	HAL_Init
 1837              	.LVL164:
 141:Core/Src/main.c **** 
 1838              		.loc 1 141 3 view .LVU480
 1839 0006 FFF7FEFF 		bl	SystemClock_Config
 1840              	.LVL165:
 148:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1841              		.loc 1 148 3 view .LVU481
 1842 000a FFF7FEFF 		bl	MX_GPIO_Init
 1843              	.LVL166:
 207:Core/Src/main.c **** 
 1844              		.loc 1 207 3 view .LVU482
 1845 000e 124C     		ldr	r4, .L95
 1846 0010 0122     		movs	r2, #1
 1847 0012 1146     		mov	r1, r2
 1848 0014 2046     		mov	r0, r4
 1849 0016 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1850              	.LVL167:
 211:Core/Src/main.c **** 
 1851              		.loc 1 211 3 view .LVU483
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 65


 211:Core/Src/main.c **** 
 1852              		.loc 1 211 14 is_stmt 0 view .LVU484
 1853 001a 1023     		movs	r3, #16
 1854 001c 6422     		movs	r2, #100
 1855 001e 4FF40071 		mov	r1, #512
 1856 0022 0846     		mov	r0, r1
 1857 0024 FFF7FEFF 		bl	calculate_mandelbrot_fixed_point_arithmetic
 1858              	.LVL168:
 211:Core/Src/main.c **** 
 1859              		.loc 1 211 12 discriminator 1 view .LVU485
 1860 0028 0C4B     		ldr	r3, .L95+4
 1861 002a C3E90001 		strd	r0, [r3]
 215:Core/Src/main.c **** 
 1862              		.loc 1 215 3 is_stmt 1 view .LVU486
 1863 002e 0122     		movs	r2, #1
 1864 0030 0221     		movs	r1, #2
 1865 0032 2046     		mov	r0, r4
 1866 0034 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1867              	.LVL169:
 219:Core/Src/main.c **** 
 1868              		.loc 1 219 3 view .LVU487
 1869 0038 4FF47A70 		mov	r0, #1000
 1870 003c FFF7FEFF 		bl	HAL_Delay
 1871              	.LVL170:
 222:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 1872              		.loc 1 222 3 view .LVU488
 1873 0040 0022     		movs	r2, #0
 1874 0042 0121     		movs	r1, #1
 1875 0044 2046     		mov	r0, r4
 1876 0046 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1877              	.LVL171:
 223:Core/Src/main.c **** 
 1878              		.loc 1 223 3 view .LVU489
 1879 004a 0022     		movs	r2, #0
 1880 004c 0221     		movs	r1, #2
 1881 004e 2046     		mov	r0, r4
 1882 0050 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1883              	.LVL172:
 1884              	.L93:
 230:Core/Src/main.c ****   {
 1885              		.loc 1 230 3 view .LVU490
 253:Core/Src/main.c ****   /* USER CODE END 3 */
 1886              		.loc 1 253 3 view .LVU491
 230:Core/Src/main.c ****   {
 1887              		.loc 1 230 9 view .LVU492
 1888 0054 FEE7     		b	.L93
 1889              	.L96:
 1890 0056 00BF     		.align	2
 1891              	.L95:
 1892 0058 00040240 		.word	1073873920
 1893 005c 00000000 		.word	checksum
 1894              		.cfi_endproc
 1895              	.LFE134:
 1897              		.global	runtime
 1898              		.section	.bss.runtime,"aw",%nobits
 1899              		.align	2
 1902              	runtime:
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 66


 1903 0000 00000000 		.space	4
 1904              		.global	execution_timeArr
 1905              		.section	.bss.execution_timeArr,"aw",%nobits
 1906              		.align	3
 1909              	execution_timeArr:
 1910 0000 00000000 		.space	40
 1910      00000000 
 1910      00000000 
 1910      00000000 
 1910      00000000 
 1911              		.global	checkSumArr
 1912              		.section	.bss.checkSumArr,"aw",%nobits
 1913              		.align	3
 1916              	checkSumArr:
 1917 0000 00000000 		.space	40
 1917      00000000 
 1917      00000000 
 1917      00000000 
 1917      00000000 
 1918              		.global	total_runtime_ms
 1919              		.section	.bss.total_runtime_ms,"aw",%nobits
 1920              		.align	2
 1923              	total_runtime_ms:
 1924 0000 00000000 		.space	4
 1925              		.global	time_sec
 1926              		.section	.bss.time_sec,"aw",%nobits
 1927              		.align	3
 1930              	time_sec:
 1931 0000 00000000 		.space	8
 1931      00000000 
 1932              		.global	task7ArrayTime
 1933              		.section	.bss.task7ArrayTime,"aw",%nobits
 1934              		.align	3
 1937              	task7ArrayTime:
 1938 0000 00000000 		.space	120
 1938      00000000 
 1938      00000000 
 1938      00000000 
 1938      00000000 
 1939              		.global	task7ArrayChecksum
 1940              		.section	.bss.task7ArrayChecksum,"aw",%nobits
 1941              		.align	3
 1944              	task7ArrayChecksum:
 1945 0000 00000000 		.space	120
 1945      00000000 
 1945      00000000 
 1945      00000000 
 1945      00000000 
 1946              		.global	arrayQ
 1947              		.section	.data.arrayQ,"aw"
 1948              		.align	2
 1951              	arrayQ:
 1952 0000 0A000000 		.word	10
 1953 0004 0D000000 		.word	13
 1954 0008 14000000 		.word	20
 1955              		.global	task4ArrayTime
 1956              		.section	.bss.task4ArrayTime,"aw",%nobits
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 67


 1957              		.align	3
 1960              	task4ArrayTime:
 1961 0000 00000000 		.space	40
 1961      00000000 
 1961      00000000 
 1961      00000000 
 1961      00000000 
 1962              		.global	task4ArrayChecksum
 1963              		.section	.bss.task4ArrayChecksum,"aw",%nobits
 1964              		.align	3
 1967              	task4ArrayChecksum:
 1968 0000 00000000 		.space	40
 1968      00000000 
 1968      00000000 
 1968      00000000 
 1968      00000000 
 1969              		.global	sizes
 1970              		.section	.rodata.sizes,"a"
 1971              		.align	2
 1974              	sizes:
 1975 0000 A0000000 		.word	160
 1976 0004 78000000 		.word	120
 1977 0008 40010000 		.word	320
 1978 000c F0000000 		.word	240
 1979 0010 80020000 		.word	640
 1980 0014 E0010000 		.word	480
 1981 0018 00050000 		.word	1280
 1982 001c D0020000 		.word	720
 1983 0020 80070000 		.word	1920
 1984 0024 38040000 		.word	1080
 1985              		.global	task2ArrayTime
 1986              		.section	.bss.task2ArrayTime,"aw",%nobits
 1987              		.align	3
 1990              	task2ArrayTime:
 1991 0000 00000000 		.space	200
 1991      00000000 
 1991      00000000 
 1991      00000000 
 1991      00000000 
 1992              		.global	task2ArrayChecksum
 1993              		.section	.bss.task2ArrayChecksum,"aw",%nobits
 1994              		.align	3
 1997              	task2ArrayChecksum:
 1998 0000 00000000 		.space	200
 1998      00000000 
 1998      00000000 
 1998      00000000 
 1998      00000000 
 1999              		.global	iterationsArray
 2000              		.section	.data.iterationsArray,"aw"
 2001              		.align	2
 2004              	iterationsArray:
 2005 0000 64000000 		.word	100
 2006 0004 FA000000 		.word	250
 2007 0008 F4010000 		.word	500
 2008 000c EE020000 		.word	750
 2009 0010 E8030000 		.word	1000
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 68


 2010              		.global	checksumArray_double
 2011              		.section	.bss.checksumArray_double,"aw",%nobits
 2012              		.align	3
 2015              	checksumArray_double:
 2016 0000 00000000 		.space	40
 2016      00000000 
 2016      00000000 
 2016      00000000 
 2016      00000000 
 2017              		.global	checksumArray_arithmetic
 2018              		.section	.bss.checksumArray_arithmetic,"aw",%nobits
 2019              		.align	3
 2022              	checksumArray_arithmetic:
 2023 0000 00000000 		.space	40
 2023      00000000 
 2023      00000000 
 2023      00000000 
 2023      00000000 
 2024              		.global	timeArray_double
 2025              		.section	.bss.timeArray_double,"aw",%nobits
 2026              		.align	3
 2029              	timeArray_double:
 2030 0000 00000000 		.space	40
 2030      00000000 
 2030      00000000 
 2030      00000000 
 2030      00000000 
 2031              		.global	timeArray_arithmetic
 2032              		.section	.bss.timeArray_arithmetic,"aw",%nobits
 2033              		.align	3
 2036              	timeArray_arithmetic:
 2037 0000 00000000 		.space	40
 2037      00000000 
 2037      00000000 
 2037      00000000 
 2037      00000000 
 2038              		.global	initial_width
 2039              		.section	.data.initial_width,"aw"
 2040              		.align	2
 2043              	initial_width:
 2044 0000 80000000 		.word	128
 2045              		.global	initial_height
 2046              		.section	.data.initial_height,"aw"
 2047              		.align	2
 2050              	initial_height:
 2051 0000 80000000 		.word	128
 2052              		.global	execution_time
 2053              		.section	.bss.execution_time,"aw",%nobits
 2054              		.align	3
 2057              	execution_time:
 2058 0000 00000000 		.space	8
 2058      00000000 
 2059              		.global	checksum
 2060              		.section	.bss.checksum,"aw",%nobits
 2061              		.align	3
 2064              	checksum:
 2065 0000 00000000 		.space	8
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 69


 2065      00000000 
 2066              		.global	imageDimensions
 2067              		.section	.data.imageDimensions,"aw"
 2068              		.align	2
 2071              	imageDimensions:
 2072 0000 80000000 		.word	128
 2073 0004 A0000000 		.word	160
 2074 0008 C0000000 		.word	192
 2075 000c E0000000 		.word	224
 2076 0010 00010000 		.word	256
 2077              		.global	end_time
 2078              		.section	.bss.end_time,"aw",%nobits
 2079              		.align	3
 2082              	end_time:
 2083 0000 00000000 		.space	8
 2083      00000000 
 2084              		.global	start_time
 2085              		.section	.bss.start_time,"aw",%nobits
 2086              		.align	3
 2089              	start_time:
 2090 0000 00000000 		.space	8
 2090      00000000 
 2091              		.text
 2092              	.Letext0:
 2093              		.file 3 "C:\\ST\\STM32CubeIDE_1.19.0\\STM32CubeIDE\\plugins\\com.st.stm32cube.ide.mcu.externaltool
 2094              		.file 4 "C:\\ST\\STM32CubeIDE_1.19.0\\STM32CubeIDE\\plugins\\com.st.stm32cube.ide.mcu.externaltool
 2095              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 2096              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 2097              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 2098              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 2099              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 2100              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 2101              		.file 11 "<built-in>"
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 70


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:21     .text.MX_GPIO_Init:00000000 $t
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:26     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:133    .text.MX_GPIO_Init:00000074 $d
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:140    .text.calculate_mandelbrot_fixed_point_arithmetic:00000000 $t
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:146    .text.calculate_mandelbrot_fixed_point_arithmetic:00000000 calculate_mandelbrot_fixed_point_arithmetic
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:484    .text.calculate_mandelbrot_float:00000000 $t
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:490    .text.calculate_mandelbrot_float:00000000 calculate_mandelbrot_float
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:673    .text.calculate_mandelbrot_float:000000cc $d
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:2064   .bss.checksum:00000000 checksum
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:686    .text.calculate_mandelbrot_double:00000000 $t
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:692    .text.calculate_mandelbrot_double:00000000 calculate_mandelbrot_double
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:991    .text.calculate_mandelbrot_double:00000158 $d
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:1000   .text.task1:00000000 $t
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:1006   .text.task1:00000000 task1
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:1168   .text.task1:000000d4 $d
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:2089   .bss.start_time:00000000 start_time
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:2071   .data.imageDimensions:00000000 imageDimensions
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:2082   .bss.end_time:00000000 end_time
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:2057   .bss.execution_time:00000000 execution_time
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:2036   .bss.timeArray_arithmetic:00000000 timeArray_arithmetic
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:2022   .bss.checksumArray_arithmetic:00000000 checksumArray_arithmetic
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:2029   .bss.timeArray_double:00000000 timeArray_double
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:2015   .bss.checksumArray_double:00000000 checksumArray_double
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:1181   .text.task2:00000000 $t
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:1187   .text.task2:00000000 task2
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:1296   .text.task2:00000080 $d
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:2004   .data.iterationsArray:00000000 iterationsArray
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:1990   .bss.task2ArrayTime:00000000 task2ArrayTime
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:1997   .bss.task2ArrayChecksum:00000000 task2ArrayChecksum
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:1308   .text.task4:00000000 $t
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:1314   .text.task4:00000000 task4
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:1476   .text.task4:000000cc $d
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:1960   .bss.task4ArrayTime:00000000 task4ArrayTime
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:1967   .bss.task4ArrayChecksum:00000000 task4ArrayChecksum
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:1974   .rodata.sizes:00000000 sizes
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:1488   .text.task7:00000000 $t
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:1494   .text.task7:00000000 task7
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:1604   .text.task7:00000084 $d
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:1951   .data.arrayQ:00000000 arrayQ
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:1937   .bss.task7ArrayTime:00000000 task7ArrayTime
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:1944   .bss.task7ArrayChecksum:00000000 task7ArrayChecksum
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:1616   .text.Error_Handler:00000000 $t
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:1622   .text.Error_Handler:00000000 Error_Handler
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:1654   .text.SystemClock_Config:00000000 $t
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:1660   .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:1811   .text.SystemClock_Config:000000a4 $d
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:1817   .text.main:00000000 $t
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:1823   .text.main:00000000 main
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:1892   .text.main:00000058 $d
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:1902   .bss.runtime:00000000 runtime
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:1899   .bss.runtime:00000000 $d
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:1909   .bss.execution_timeArr:00000000 execution_timeArr
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:1906   .bss.execution_timeArr:00000000 $d
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:1916   .bss.checkSumArr:00000000 checkSumArr
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:1913   .bss.checkSumArr:00000000 $d
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s 			page 71


C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:1923   .bss.total_runtime_ms:00000000 total_runtime_ms
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:1920   .bss.total_runtime_ms:00000000 $d
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:1930   .bss.time_sec:00000000 time_sec
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:1927   .bss.time_sec:00000000 $d
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:1934   .bss.task7ArrayTime:00000000 $d
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:1941   .bss.task7ArrayChecksum:00000000 $d
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:1948   .data.arrayQ:00000000 $d
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:1957   .bss.task4ArrayTime:00000000 $d
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:1964   .bss.task4ArrayChecksum:00000000 $d
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:1971   .rodata.sizes:00000000 $d
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:1987   .bss.task2ArrayTime:00000000 $d
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:1994   .bss.task2ArrayChecksum:00000000 $d
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:2001   .data.iterationsArray:00000000 $d
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:2012   .bss.checksumArray_double:00000000 $d
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:2019   .bss.checksumArray_arithmetic:00000000 $d
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:2026   .bss.timeArray_double:00000000 $d
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:2033   .bss.timeArray_arithmetic:00000000 $d
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:2043   .data.initial_width:00000000 initial_width
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:2040   .data.initial_width:00000000 $d
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:2050   .data.initial_height:00000000 initial_height
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:2047   .data.initial_height:00000000 $d
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:2054   .bss.execution_time:00000000 $d
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:2061   .bss.checksum:00000000 $d
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:2068   .data.imageDimensions:00000000 $d
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:2079   .bss.end_time:00000000 $d
C:\Users\maraz\AppData\Local\Temp\ccuFocYr.s:2086   .bss.start_time:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
__aeabi_ldivmod
__aeabi_i2d
__aeabi_ddiv
__aeabi_dmul
__aeabi_dsub
__aeabi_dadd
__aeabi_dcmpgt
HAL_GetTick
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
HAL_Delay
