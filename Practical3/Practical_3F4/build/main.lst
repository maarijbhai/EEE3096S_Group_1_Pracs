ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.text.MX_GPIO_Init,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	MX_GPIO_Init:
  27              	.LFB136:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2025 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include <inttypes.h>  // for PRIu64
  22:Core/Src/main.c **** #include <string.h>
  23:Core/Src/main.c **** 
  24:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  25:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* USER CODE END Includes */
  28:Core/Src/main.c **** 
  29:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  30:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  31:Core/Src/main.c **** 
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 2


  32:Core/Src/main.c **** /* USER CODE END PTD */
  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  35:Core/Src/main.c **** /* USER CODE BEGIN PD */
  36:Core/Src/main.c **** #define MAX_ITER 100
  37:Core/Src/main.c **** #define SCALE 1000000
  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* USER CODE END PD */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  43:Core/Src/main.c **** /* USER CODE BEGIN PM */
  44:Core/Src/main.c **** 
  45:Core/Src/main.c **** /* USER CODE END PM */
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** /* USER CODE BEGIN PV */
  50:Core/Src/main.c **** //TODO: Define variables you think you might need
  51:Core/Src/main.c **** // - Performance timing variables (e.g execution time, throughput, pixels per second, clock cycles)
  52:Core/Src/main.c **** uint64_t start_time = 0;
  53:Core/Src/main.c **** uint64_t end_time = 0;
  54:Core/Src/main.c **** int imageDimensions[5] = {128, 160, 192, 224, 256};
  55:Core/Src/main.c **** uint64_t checksum = 0;
  56:Core/Src/main.c **** uint64_t execution_time = 0;
  57:Core/Src/main.c **** int initial_height = 128;
  58:Core/Src/main.c **** int initial_width = 128;
  59:Core/Src/main.c **** 
  60:Core/Src/main.c **** // arrays for task 1
  61:Core/Src/main.c **** uint64_t timeArray_arithmetic[5] = {0, 0, 0, 0, 0};
  62:Core/Src/main.c **** uint64_t timeArray_double[5] = {0, 0, 0, 0, 0};
  63:Core/Src/main.c **** uint64_t checksumArray_arithmetic[5] = {0, 0, 0, 0, 0};
  64:Core/Src/main.c **** uint64_t checksumArray_double[5] = {0, 0, 0, 0, 0};
  65:Core/Src/main.c **** 
  66:Core/Src/main.c **** // arrays for task 2
  67:Core/Src/main.c **** int iterationsArray[5] = {100, 250, 500, 750, 1000};
  68:Core/Src/main.c **** uint64_t task2ArrayChecksum[5][5];
  69:Core/Src/main.c **** uint64_t task2ArrayTime[5][5];
  70:Core/Src/main.c **** 
  71:Core/Src/main.c **** // task 7 variables
  72:Core/Src/main.c **** int arrayQ[3] = {10 , 13, 20};		// these values are roughly the binary equivalent of 10^3, 10^4 and
  73:Core/Src/main.c **** uint64_t task7ArrayChecksum[3][5];
  74:Core/Src/main.c **** uint64_t task7ArrayTime[3][5];
  75:Core/Src/main.c **** 
  76:Core/Src/main.c **** /* USER CODE END PV */
  77:Core/Src/main.c **** 
  78:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  79:Core/Src/main.c **** void SystemClock_Config(void);
  80:Core/Src/main.c **** static void MX_GPIO_Init(void);
  81:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  82:Core/Src/main.c **** //TODO: Define any function prototypes you might need such as the calculate Mandelbrot function amo
  83:Core/Src/main.c **** uint64_t calculate_mandelbrot_fixed_point_arithmetic(int width, int height, int max_iterations, int
  84:Core/Src/main.c **** uint64_t calculate_mandelbrot_double(int width, int height, int max_iterations);
  85:Core/Src/main.c **** void task1(int iter);
  86:Core/Src/main.c **** void task2();
  87:Core/Src/main.c **** void task4();
  88:Core/Src/main.c **** void task7();
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 3


  89:Core/Src/main.c **** 
  90:Core/Src/main.c **** /* USER CODE END PFP */
  91:Core/Src/main.c **** 
  92:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  93:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  94:Core/Src/main.c **** 
  95:Core/Src/main.c **** /* USER CODE END 0 */
  96:Core/Src/main.c **** 
  97:Core/Src/main.c **** /**
  98:Core/Src/main.c ****   * @brief  The application entry point.
  99:Core/Src/main.c ****   * @retval int
 100:Core/Src/main.c ****   */
 101:Core/Src/main.c **** int main(void)
 102:Core/Src/main.c **** {
 103:Core/Src/main.c **** 
 104:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 105:Core/Src/main.c **** 
 106:Core/Src/main.c ****   /* USER CODE END 1 */
 107:Core/Src/main.c **** 
 108:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 109:Core/Src/main.c **** 
 110:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 111:Core/Src/main.c ****   HAL_Init();
 112:Core/Src/main.c **** 
 113:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 114:Core/Src/main.c **** 
 115:Core/Src/main.c ****   /* USER CODE END Init */
 116:Core/Src/main.c **** 
 117:Core/Src/main.c ****   /* Configure the system clock */
 118:Core/Src/main.c ****   SystemClock_Config();
 119:Core/Src/main.c **** 
 120:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 121:Core/Src/main.c **** 
 122:Core/Src/main.c ****   /* USER CODE END SysInit */
 123:Core/Src/main.c **** 
 124:Core/Src/main.c ****   /* Initialize all configured peripherals */
 125:Core/Src/main.c ****   MX_GPIO_Init();
 126:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 127:Core/Src/main.c **** 
 128:Core/Src/main.c ****   /* USER CODE END WHILE */
 129:Core/Src/main.c **** 
 130:Core/Src/main.c ****   /* USER CODE BEGIN 3 */
 131:Core/Src/main.c **** 	  //TODO: Visual indicator: Turn on LED0 to signal processing start
 132:Core/Src/main.c **** 	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 133:Core/Src/main.c **** 
 134:Core/Src/main.c **** 
 135:Core/Src/main.c **** 	  //TODO: Benchmark and Profile Performance
 136:Core/Src/main.c **** 	  task7();
 137:Core/Src/main.c **** 
 138:Core/Src/main.c **** 
 139:Core/Src/main.c **** 	  //TODO: Visual indicator: Turn on LED1 to signal processing start
 140:Core/Src/main.c **** 	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 141:Core/Src/main.c **** 
 142:Core/Src/main.c **** 
 143:Core/Src/main.c **** 	  //TODO: Keep the LEDs ON for 2s
 144:Core/Src/main.c **** 	  HAL_Delay(1000);
 145:Core/Src/main.c **** 
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 4


 146:Core/Src/main.c **** 	  //TODO: Turn OFF LEDs
 147:Core/Src/main.c **** 	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 148:Core/Src/main.c **** 	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 149:Core/Src/main.c **** 
 150:Core/Src/main.c **** 
 151:Core/Src/main.c ****   /* USER CODE END 2 */
 152:Core/Src/main.c **** 
 153:Core/Src/main.c ****   /* Infinite loop */
 154:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 155:Core/Src/main.c ****   while (1)
 156:Core/Src/main.c ****   {
 157:Core/Src/main.c **** //    /* USER CODE END WHILE */
 158:Core/Src/main.c **** //
 159:Core/Src/main.c **** //    /* USER CODE BEGIN 3 */
 160:Core/Src/main.c **** //	  //TODO: Visual indicator: Turn on LED0 to signal processing start
 161:Core/Src/main.c **** //	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 162:Core/Src/main.c **** //
 163:Core/Src/main.c **** //
 164:Core/Src/main.c **** //	  //TODO: Benchmark and Profile Performance
 165:Core/Src/main.c **** //	  task1();
 166:Core/Src/main.c **** //
 167:Core/Src/main.c **** //
 168:Core/Src/main.c **** //	  //TODO: Visual indicator: Turn on LED1 to signal processing start
 169:Core/Src/main.c **** //	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 170:Core/Src/main.c **** //
 171:Core/Src/main.c **** //
 172:Core/Src/main.c **** //	  //TODO: Keep the LEDs ON for 2s
 173:Core/Src/main.c **** //	  HAL_Delay(1000);
 174:Core/Src/main.c **** //
 175:Core/Src/main.c **** //	  //TODO: Turn OFF LEDs
 176:Core/Src/main.c **** //	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 177:Core/Src/main.c **** //	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 178:Core/Src/main.c ****   }
 179:Core/Src/main.c ****   /* USER CODE END 3 */
 180:Core/Src/main.c **** }
 181:Core/Src/main.c **** 
 182:Core/Src/main.c **** /**
 183:Core/Src/main.c ****   * @brief System Clock Configuration
 184:Core/Src/main.c ****   * @retval None
 185:Core/Src/main.c ****   */
 186:Core/Src/main.c **** void SystemClock_Config(void)
 187:Core/Src/main.c **** {
 188:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 189:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 190:Core/Src/main.c **** 
 191:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 192:Core/Src/main.c ****   */
 193:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 194:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 195:Core/Src/main.c **** 
 196:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 197:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 198:Core/Src/main.c ****   */
 199:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 200:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 201:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 202:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 5


 203:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 15;
 204:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 144;
 205:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 206:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 207:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 208:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 209:Core/Src/main.c ****   {
 210:Core/Src/main.c ****     Error_Handler();
 211:Core/Src/main.c ****   }
 212:Core/Src/main.c **** 
 213:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 214:Core/Src/main.c ****   */
 215:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 216:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 217:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 218:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 219:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 220:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 221:Core/Src/main.c **** 
 222:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 223:Core/Src/main.c ****   {
 224:Core/Src/main.c ****     Error_Handler();
 225:Core/Src/main.c ****   }
 226:Core/Src/main.c **** }
 227:Core/Src/main.c **** 
 228:Core/Src/main.c **** /**
 229:Core/Src/main.c ****   * @brief GPIO Initialization Function
 230:Core/Src/main.c ****   * @param None
 231:Core/Src/main.c ****   * @retval None
 232:Core/Src/main.c ****   */
 233:Core/Src/main.c **** static void MX_GPIO_Init(void)
 234:Core/Src/main.c **** {
  28              		.loc 1 234 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 32
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 30B5     		push	{r4, r5, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 12
  35              		.cfi_offset 4, -12
  36              		.cfi_offset 5, -8
  37              		.cfi_offset 14, -4
  38 0002 89B0     		sub	sp, sp, #36
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 48
 235:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  41              		.loc 1 235 3 view .LVU1
  42              		.loc 1 235 20 is_stmt 0 view .LVU2
  43 0004 0024     		movs	r4, #0
  44 0006 0394     		str	r4, [sp, #12]
  45 0008 0494     		str	r4, [sp, #16]
  46 000a 0594     		str	r4, [sp, #20]
  47 000c 0694     		str	r4, [sp, #24]
  48 000e 0794     		str	r4, [sp, #28]
 236:Core/Src/main.c ****   /* USER CODE BEGIN MX_GPIO_Init_1 */
 237:Core/Src/main.c **** 
 238:Core/Src/main.c ****   /* USER CODE END MX_GPIO_Init_1 */
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 6


 239:Core/Src/main.c **** 
 240:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 241:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  49              		.loc 1 241 3 is_stmt 1 view .LVU3
  50              	.LBB4:
  51              		.loc 1 241 3 view .LVU4
  52 0010 0094     		str	r4, [sp]
  53              		.loc 1 241 3 view .LVU5
  54 0012 184B     		ldr	r3, .L3
  55 0014 1A6B     		ldr	r2, [r3, #48]
  56 0016 42F00402 		orr	r2, r2, #4
  57 001a 1A63     		str	r2, [r3, #48]
  58              		.loc 1 241 3 view .LVU6
  59 001c 1A6B     		ldr	r2, [r3, #48]
  60 001e 02F00402 		and	r2, r2, #4
  61 0022 0092     		str	r2, [sp]
  62              		.loc 1 241 3 view .LVU7
  63 0024 009A     		ldr	r2, [sp]
  64              	.LBE4:
  65              		.loc 1 241 3 view .LVU8
 242:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  66              		.loc 1 242 3 view .LVU9
  67              	.LBB5:
  68              		.loc 1 242 3 view .LVU10
  69 0026 0194     		str	r4, [sp, #4]
  70              		.loc 1 242 3 view .LVU11
  71 0028 1A6B     		ldr	r2, [r3, #48]
  72 002a 42F08002 		orr	r2, r2, #128
  73 002e 1A63     		str	r2, [r3, #48]
  74              		.loc 1 242 3 view .LVU12
  75 0030 1A6B     		ldr	r2, [r3, #48]
  76 0032 02F08002 		and	r2, r2, #128
  77 0036 0192     		str	r2, [sp, #4]
  78              		.loc 1 242 3 view .LVU13
  79 0038 019A     		ldr	r2, [sp, #4]
  80              	.LBE5:
  81              		.loc 1 242 3 view .LVU14
 243:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  82              		.loc 1 243 3 view .LVU15
  83              	.LBB6:
  84              		.loc 1 243 3 view .LVU16
  85 003a 0294     		str	r4, [sp, #8]
  86              		.loc 1 243 3 view .LVU17
  87 003c 1A6B     		ldr	r2, [r3, #48]
  88 003e 42F00202 		orr	r2, r2, #2
  89 0042 1A63     		str	r2, [r3, #48]
  90              		.loc 1 243 3 view .LVU18
  91 0044 1B6B     		ldr	r3, [r3, #48]
  92 0046 03F00203 		and	r3, r3, #2
  93 004a 0293     		str	r3, [sp, #8]
  94              		.loc 1 243 3 view .LVU19
  95 004c 029B     		ldr	r3, [sp, #8]
  96              	.LBE6:
  97              		.loc 1 243 3 view .LVU20
 244:Core/Src/main.c **** 
 245:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 246:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 7


  98              		.loc 1 246 3 view .LVU21
  99 004e 0A4D     		ldr	r5, .L3+4
 100 0050 2246     		mov	r2, r4
 101 0052 FF21     		movs	r1, #255
 102 0054 2846     		mov	r0, r5
 103 0056 FFF7FEFF 		bl	HAL_GPIO_WritePin
 104              	.LVL0:
 247:Core/Src/main.c ****                           |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 248:Core/Src/main.c **** 
 249:Core/Src/main.c ****   /*Configure GPIO pins : PB0 PB1 PB2 PB3
 250:Core/Src/main.c ****                            PB4 PB5 PB6 PB7 */
 251:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 105              		.loc 1 251 3 view .LVU22
 106              		.loc 1 251 23 is_stmt 0 view .LVU23
 107 005a FF23     		movs	r3, #255
 108 005c 0393     		str	r3, [sp, #12]
 252:Core/Src/main.c ****                           |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 253:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 109              		.loc 1 253 3 is_stmt 1 view .LVU24
 110              		.loc 1 253 24 is_stmt 0 view .LVU25
 111 005e 0123     		movs	r3, #1
 112 0060 0493     		str	r3, [sp, #16]
 254:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 113              		.loc 1 254 3 is_stmt 1 view .LVU26
 114              		.loc 1 254 24 is_stmt 0 view .LVU27
 115 0062 0594     		str	r4, [sp, #20]
 255:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 116              		.loc 1 255 3 is_stmt 1 view .LVU28
 117              		.loc 1 255 25 is_stmt 0 view .LVU29
 118 0064 0694     		str	r4, [sp, #24]
 256:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 119              		.loc 1 256 3 is_stmt 1 view .LVU30
 120 0066 03A9     		add	r1, sp, #12
 121 0068 2846     		mov	r0, r5
 122 006a FFF7FEFF 		bl	HAL_GPIO_Init
 123              	.LVL1:
 257:Core/Src/main.c **** 
 258:Core/Src/main.c ****   /* USER CODE BEGIN MX_GPIO_Init_2 */
 259:Core/Src/main.c **** 
 260:Core/Src/main.c ****   /* USER CODE END MX_GPIO_Init_2 */
 261:Core/Src/main.c **** }
 124              		.loc 1 261 1 is_stmt 0 view .LVU31
 125 006e 09B0     		add	sp, sp, #36
 126              	.LCFI2:
 127              		.cfi_def_cfa_offset 12
 128              		@ sp needed
 129 0070 30BD     		pop	{r4, r5, pc}
 130              	.L4:
 131 0072 00BF     		.align	2
 132              	.L3:
 133 0074 00380240 		.word	1073887232
 134 0078 00040240 		.word	1073873920
 135              		.cfi_endproc
 136              	.LFE136:
 138              		.global	__aeabi_ldivmod
 139              		.section	.text.calculate_mandelbrot_fixed_point_arithmetic,"ax",%progbits
 140              		.align	1
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 8


 141              		.global	calculate_mandelbrot_fixed_point_arithmetic
 142              		.syntax unified
 143              		.thumb
 144              		.thumb_func
 146              	calculate_mandelbrot_fixed_point_arithmetic:
 147              	.LVL2:
 148              	.LFB137:
 262:Core/Src/main.c **** 
 263:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 264:Core/Src/main.c **** //TODO: Function signatures you defined previously , implement them here
 265:Core/Src/main.c **** uint64_t calculate_mandelbrot_fixed_point_arithmetic(int width, int height, int max_iterations, int
 266:Core/Src/main.c **** {
 149              		.loc 1 266 1 is_stmt 1 view -0
 150              		.cfi_startproc
 151              		@ args = 0, pretend = 0, frame = 48
 152              		@ frame_needed = 0, uses_anonymous_args = 0
 153              		.loc 1 266 1 is_stmt 0 view .LVU33
 154 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 155              	.LCFI3:
 156              		.cfi_def_cfa_offset 36
 157              		.cfi_offset 4, -36
 158              		.cfi_offset 5, -32
 159              		.cfi_offset 6, -28
 160              		.cfi_offset 7, -24
 161              		.cfi_offset 8, -20
 162              		.cfi_offset 9, -16
 163              		.cfi_offset 10, -12
 164              		.cfi_offset 11, -8
 165              		.cfi_offset 14, -4
 166 0004 8DB0     		sub	sp, sp, #52
 167              	.LCFI4:
 168              		.cfi_def_cfa_offset 88
 169 0006 0746     		mov	r7, r0
 170 0008 0D46     		mov	r5, r1
 171 000a 0192     		str	r2, [sp, #4]
 172 000c 9B46     		mov	fp, r3
 267:Core/Src/main.c **** 	int Q = scale;
 173              		.loc 1 267 2 is_stmt 1 view .LVU34
 174              	.LVL3:
 268:Core/Src/main.c **** 	unsigned int ONE = 1 << Q;
 175              		.loc 1 268 2 view .LVU35
 176              		.loc 1 268 23 is_stmt 0 view .LVU36
 177 000e 0126     		movs	r6, #1
 178 0010 9E40     		lsls	r6, r6, r3
 179              	.LVL4:
 269:Core/Src/main.c ****     uint64_t mandelbrot_sum = 0;
 180              		.loc 1 269 5 is_stmt 1 view .LVU37
 270:Core/Src/main.c **** 
 271:Core/Src/main.c ****     // This function utilizes bit shifting to decreases the computational costs of division on deci
 272:Core/Src/main.c **** 
 273:Core/Src/main.c ****     // For the initial loop, x and y are zero so instead of computing it and lastly subtracting the
 274:Core/Src/main.c ****     // this code sets the initial starting point to the constant
 275:Core/Src/main.c ****     const int32_t x_left = -( (5 * ONE) / 2 ); // -2.5 as x starting point
 181              		.loc 1 275 5 view .LVU38
 182              		.loc 1 275 34 is_stmt 0 view .LVU39
 183 0012 0523     		movs	r3, #5
 184              	.LVL5:
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 9


 185              		.loc 1 275 34 view .LVU40
 186 0014 03FA0BF3 		lsl	r3, r3, fp
 187              		.loc 1 275 41 view .LVU41
 188 0018 5B08     		lsrs	r3, r3, #1
 189              		.loc 1 275 28 view .LVU42
 190 001a C3F10009 		rsb	r9, r3, #0
 191              	.LVL6:
 276:Core/Src/main.c ****     const int32_t y_top  = -ONE;               // -1.0 as y starting point
 192              		.loc 1 276 5 is_stmt 1 view .LVU43
 193              		.loc 1 276 28 is_stmt 0 view .LVU44
 194 001e 7342     		rsbs	r3, r6, #0
 195 0020 0293     		str	r3, [sp, #8]
 196              	.LVL7:
 277:Core/Src/main.c **** 
 278:Core/Src/main.c ****     // Instead of recomputing x*... and y*..., we just add the multiplication each loop as it would
 279:Core/Src/main.c ****     // This way addition uses less computational power than multiplication
 280:Core/Src/main.c ****     const int32_t x_step = (int32_t)(((int64_t)7 * ONE) / (2 * width));			// The 2 in the denominat
 197              		.loc 1 280 5 is_stmt 1 view .LVU45
 198              		.loc 1 280 50 is_stmt 0 view .LVU46
 199 0022 0024     		movs	r4, #0
 200 0024 710F     		lsrs	r1, r6, #29
 201              	.LVL8:
 202              		.loc 1 280 50 view .LVU47
 203 0026 F300     		lsls	r3, r6, #3
 204              	.LVL9:
 205              		.loc 1 280 50 view .LVU48
 206 0028 981B     		subs	r0, r3, r6
 207              	.LVL10:
 208              		.loc 1 280 57 view .LVU49
 209 002a 4FEA4702 		lsl	r2, r7, #1
 210              	.LVL11:
 211              		.loc 1 280 57 view .LVU50
 212 002e 47F38073 		sbfx	r3, r7, #30, #1
 213 0032 61F10001 		sbc	r1, r1, #0
 214 0036 FFF7FEFF 		bl	__aeabi_ldivmod
 215              	.LVL12:
 216              		.loc 1 280 19 view .LVU51
 217 003a 8046     		mov	r8, r0
 218              	.LVL13:
 281:Core/Src/main.c ****     const int32_t y_step = (int32_t)(((int64_t)2 * ONE) / height);				// Bit shift the top before d
 219              		.loc 1 281 5 is_stmt 1 view .LVU52
 220              		.loc 1 281 50 is_stmt 0 view .LVU53
 221 003c B019     		adds	r0, r6, r6
 222              	.LVL14:
 223              		.loc 1 281 50 view .LVU54
 224 003e 44EB0401 		adc	r1, r4, r4
 225              	.LVL15:
 226              		.loc 1 281 57 view .LVU55
 227 0042 2A46     		mov	r2, r5
 228 0044 EB17     		asrs	r3, r5, #31
 229 0046 FFF7FEFF 		bl	__aeabi_ldivmod
 230              	.LVL16:
 282:Core/Src/main.c **** 
 283:Core/Src/main.c ****     const int32_t FOUR = 4 * ONE;				// for condition in while loop
 231              		.loc 1 283 5 is_stmt 1 view .LVU56
 232              		.loc 1 283 28 is_stmt 0 view .LVU57
 233 004a 0423     		movs	r3, #4
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 10


 234 004c 03FA0BFA 		lsl	r10, r3, fp
 235              	.LVL17:
 284:Core/Src/main.c **** 
 285:Core/Src/main.c ****     int32_t y0 = y_top;				// starting constant
 236              		.loc 1 285 5 is_stmt 1 view .LVU58
 286:Core/Src/main.c ****     for (int y = 0; y < height; ++y) {
 237              		.loc 1 286 5 view .LVU59
 238              	.LBB7:
 239              		.loc 1 286 10 view .LVU60
 240              		.loc 1 286 14 is_stmt 0 view .LVU61
 241 0050 2346     		mov	r3, r4
 242 0052 CDF82890 		str	r9, [sp, #40]
 243 0056 CDF81C80 		str	r8, [sp, #28]
 244 005a 0B90     		str	r0, [sp, #44]
 245 005c 0697     		str	r7, [sp, #24]
 246 005e 0995     		str	r5, [sp, #36]
 247 0060 0394     		str	r4, [sp, #12]
 248 0062 2646     		mov	r6, r4
 249              	.LVL18:
 250              		.loc 1 286 5 view .LVU62
 251 0064 88E0     		b	.L6
 252              	.LVL19:
 253              	.L10:
 254              	.LBB8:
 255              	.LBB9:
 256              	.LBB10:
 257              	.LBB11:
 287:Core/Src/main.c ****         int32_t x0 = x_left;			// starting constant
 288:Core/Src/main.c **** 
 289:Core/Src/main.c ****         for (int x = 0; x < width; ++x) {
 290:Core/Src/main.c ****             int32_t xi = 0, yi = 0;
 291:Core/Src/main.c ****             int iteration = 0;
 292:Core/Src/main.c **** 
 293:Core/Src/main.c ****             while (iteration < max_iterations) {
 294:Core/Src/main.c ****                 int32_t xi2 = (int32_t)(((int64_t)xi * xi + (1 << (Q - 1))) >> Q);
 295:Core/Src/main.c ****                 int32_t yi2 = (int32_t)(((int64_t)yi * yi + (1 << (Q - 1))) >> Q);
 296:Core/Src/main.c **** 
 297:Core/Src/main.c ****                 // after calculating square values for this loop check if condition is still met
 298:Core/Src/main.c ****                 if ((int64_t)xi2 + yi2 > FOUR) break;
 299:Core/Src/main.c **** 
 300:Core/Src/main.c ****                 int32_t temp = xi2 - yi2 + x0;
 301:Core/Src/main.c **** 
 302:Core/Src/main.c ****                 // Q is 2^16, so Q-1 = 2^15 to account for 2*xi*yi
 303:Core/Src/main.c ****                 yi = (int32_t)(((int64_t)xi * yi + (1 << (Q - 2))) >> (Q - 1)) + y0;
 258              		.loc 1 303 20 view .LVU63
 259 0066 029B     		ldr	r3, [sp, #8]
 260 0068 1D44     		add	r5, r5, r3
 261              	.LVL20:
 304:Core/Src/main.c ****                 xi = temp;           // following mandelbrot.py
 262              		.loc 1 304 17 is_stmt 1 view .LVU64
 305:Core/Src/main.c **** 
 306:Core/Src/main.c ****                 ++iteration;
 263              		.loc 1 306 17 view .LVU65
 264 006a 0137     		adds	r7, r7, #1
 265              	.LVL21:
 266              	.L12:
 267              		.loc 1 306 17 is_stmt 0 view .LVU66
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 11


 268              	.LBE11:
 293:Core/Src/main.c ****                 int32_t xi2 = (int32_t)(((int64_t)xi * xi + (1 << (Q - 1))) >> Q);
 269              		.loc 1 293 30 is_stmt 1 view .LVU67
 270 006c 019B     		ldr	r3, [sp, #4]
 271 006e 9F42     		cmp	r7, r3
 272 0070 67DA     		bge	.L9
 273              	.LBB12:
 294:Core/Src/main.c ****                 int32_t yi2 = (int32_t)(((int64_t)yi * yi + (1 << (Q - 1))) >> Q);
 274              		.loc 1 294 17 view .LVU68
 294:Core/Src/main.c ****                 int32_t yi2 = (int32_t)(((int64_t)yi * yi + (1 << (Q - 1))) >> Q);
 275              		.loc 1 294 42 is_stmt 0 view .LVU69
 276 0072 4FEAE178 		asr	r8, r1, #31
 277 0076 0846     		mov	r0, r1
 294:Core/Src/main.c ****                 int32_t yi2 = (int32_t)(((int64_t)yi * yi + (1 << (Q - 1))) >> Q);
 278              		.loc 1 294 54 view .LVU70
 279 0078 01FB08F3 		mul	r3, r1, r8
 280 007c A1FB0121 		umull	r2, r1, r1, r1
 281              	.LVL22:
 294:Core/Src/main.c ****                 int32_t yi2 = (int32_t)(((int64_t)yi * yi + (1 << (Q - 1))) >> Q);
 282              		.loc 1 294 54 view .LVU71
 283 0080 01EB4301 		add	r1, r1, r3, lsl #1
 294:Core/Src/main.c ****                 int32_t yi2 = (int32_t)(((int64_t)yi * yi + (1 << (Q - 1))) >> Q);
 284              		.loc 1 294 70 view .LVU72
 285 0084 0BF1FF3C 		add	ip, fp, #-1
 294:Core/Src/main.c ****                 int32_t yi2 = (int32_t)(((int64_t)yi * yi + (1 << (Q - 1))) >> Q);
 286              		.loc 1 294 64 view .LVU73
 287 0088 0124     		movs	r4, #1
 288              	.LVL23:
 294:Core/Src/main.c ****                 int32_t yi2 = (int32_t)(((int64_t)yi * yi + (1 << (Q - 1))) >> Q);
 289              		.loc 1 294 64 view .LVU74
 290 008a 04FA0CF4 		lsl	r4, r4, ip
 291              	.LVL24:
 294:Core/Src/main.c ****                 int32_t yi2 = (int32_t)(((int64_t)yi * yi + (1 << (Q - 1))) >> Q);
 292              		.loc 1 294 64 view .LVU75
 293 008e 4FEAE479 		asr	r9, r4, #31
 294 0092 2346     		mov	r3, r4
 294:Core/Src/main.c ****                 int32_t yi2 = (int32_t)(((int64_t)yi * yi + (1 << (Q - 1))) >> Q);
 295              		.loc 1 294 59 view .LVU76
 296 0094 1219     		adds	r2, r2, r4
 297 0096 41EBE471 		adc	r1, r1, r4, asr #31
 294:Core/Src/main.c ****                 int32_t yi2 = (int32_t)(((int64_t)yi * yi + (1 << (Q - 1))) >> Q);
 298              		.loc 1 294 77 view .LVU77
 299 009a CBF12004 		rsb	r4, fp, #32
 300 009e BBF12006 		subs	r6, fp, #32
 301 00a2 22FA0BF2 		lsr	r2, r2, fp
 302 00a6 01FA04F4 		lsl	r4, r1, r4
 303 00aa 42EA0402 		orr	r2, r2, r4
 304 00ae 02D4     		bmi	.L7
 305 00b0 41FA06F6 		asr	r6, r1, r6
 306 00b4 3243     		orrs	r2, r2, r6
 307              	.L7:
 308              	.LVL25:
 295:Core/Src/main.c **** 
 309              		.loc 1 295 17 is_stmt 1 view .LVU78
 295:Core/Src/main.c **** 
 310              		.loc 1 295 42 is_stmt 0 view .LVU79
 311 00b6 EC17     		asrs	r4, r5, #31
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 12


 312 00b8 2E46     		mov	r6, r5
 295:Core/Src/main.c **** 
 313              		.loc 1 295 54 view .LVU80
 314 00ba 04FB05F5 		mul	r5, r4, r5
 315              	.LVL26:
 295:Core/Src/main.c **** 
 316              		.loc 1 295 54 view .LVU81
 317 00be A6FB06E1 		umull	lr, r1, r6, r6
 318 00c2 01EB4501 		add	r1, r1, r5, lsl #1
 295:Core/Src/main.c **** 
 319              		.loc 1 295 59 view .LVU82
 320 00c6 13EB0E03 		adds	r3, r3, lr
 321 00ca 49EB0101 		adc	r1, r9, r1
 295:Core/Src/main.c **** 
 322              		.loc 1 295 77 view .LVU83
 323 00ce CBF12005 		rsb	r5, fp, #32
 324 00d2 BBF1200E 		subs	lr, fp, #32
 325 00d6 23FA0BF3 		lsr	r3, r3, fp
 326 00da 01FA05F5 		lsl	r5, r1, r5
 327 00de 43EA0503 		orr	r3, r3, r5
 328 00e2 03D4     		bmi	.L8
 295:Core/Src/main.c **** 
 329              		.loc 1 295 77 view .LVU84
 330 00e4 41FA0EFE 		asr	lr, r1, lr
 331 00e8 43EA0E03 		orr	r3, r3, lr
 332              	.L8:
 333              	.LVL27:
 298:Core/Src/main.c **** 
 334              		.loc 1 298 17 is_stmt 1 view .LVU85
 298:Core/Src/main.c **** 
 335              		.loc 1 298 34 is_stmt 0 view .LVU86
 336 00ec D917     		asrs	r1, r3, #31
 337 00ee 13EB020E 		adds	lr, r3, r2
 338 00f2 41EBE271 		adc	r1, r1, r2, asr #31
 298:Core/Src/main.c **** 
 339              		.loc 1 298 40 view .LVU87
 340 00f6 4FEAEA75 		asr	r5, r10, #31
 298:Core/Src/main.c **** 
 341              		.loc 1 298 20 view .LVU88
 342 00fa F245     		cmp	r10, lr
 343 00fc 8D41     		sbcs	r5, r5, r1
 344 00fe 20DB     		blt	.L9
 300:Core/Src/main.c **** 
 345              		.loc 1 300 17 is_stmt 1 view .LVU89
 300:Core/Src/main.c **** 
 346              		.loc 1 300 36 is_stmt 0 view .LVU90
 347 0100 D21A     		subs	r2, r2, r3
 348              	.LVL28:
 300:Core/Src/main.c **** 
 349              		.loc 1 300 25 view .LVU91
 350 0102 009B     		ldr	r3, [sp]
 351              	.LVL29:
 300:Core/Src/main.c **** 
 352              		.loc 1 300 25 view .LVU92
 353 0104 D118     		adds	r1, r2, r3
 354              	.LVL30:
 303:Core/Src/main.c ****                 xi = temp;           // following mandelbrot.py
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 13


 355              		.loc 1 303 17 is_stmt 1 view .LVU93
 303:Core/Src/main.c ****                 xi = temp;           // following mandelbrot.py
 356              		.loc 1 303 45 is_stmt 0 view .LVU94
 357 0106 00FB04F4 		mul	r4, r0, r4
 358 010a 06FB0844 		mla	r4, r6, r8, r4
 359 010e A0FB0650 		umull	r5, r0, r0, r6
 360              	.LVL31:
 303:Core/Src/main.c ****                 xi = temp;           // following mandelbrot.py
 361              		.loc 1 303 45 view .LVU95
 362 0112 0444     		add	r4, r4, r0
 303:Core/Src/main.c ****                 xi = temp;           // following mandelbrot.py
 363              		.loc 1 303 61 view .LVU96
 364 0114 ABF10203 		sub	r3, fp, #2
 303:Core/Src/main.c ****                 xi = temp;           // following mandelbrot.py
 365              		.loc 1 303 55 view .LVU97
 366 0118 0122     		movs	r2, #1
 367              	.LVL32:
 303:Core/Src/main.c ****                 xi = temp;           // following mandelbrot.py
 368              		.loc 1 303 55 view .LVU98
 369 011a 02FA03F3 		lsl	r3, r2, r3
 303:Core/Src/main.c ****                 xi = temp;           // following mandelbrot.py
 370              		.loc 1 303 50 view .LVU99
 371 011e ED18     		adds	r5, r5, r3
 372 0120 44EBE373 		adc	r3, r4, r3, asr #31
 303:Core/Src/main.c ****                 xi = temp;           // following mandelbrot.py
 373              		.loc 1 303 68 view .LVU100
 374 0124 CCF12002 		rsb	r2, ip, #32
 375              	.LVL33:
 303:Core/Src/main.c ****                 xi = temp;           // following mandelbrot.py
 376              		.loc 1 303 68 view .LVU101
 377 0128 BCF12000 		subs	r0, ip, #32
 378 012c 25FA0CF5 		lsr	r5, r5, ip
 379 0130 03FA02F2 		lsl	r2, r3, r2
 380 0134 45EA0205 		orr	r5, r5, r2
 381 0138 95D4     		bmi	.L10
 382 013a 43FA00F0 		asr	r0, r3, r0
 383 013e 0543     		orrs	r5, r5, r0
 384 0140 91E7     		b	.L10
 385              	.LVL34:
 386              	.L9:
 303:Core/Src/main.c ****                 xi = temp;           // following mandelbrot.py
 387              		.loc 1 303 68 view .LVU102
 388              	.LBE12:
 307:Core/Src/main.c ****             }
 308:Core/Src/main.c **** 
 309:Core/Src/main.c ****             mandelbrot_sum += iteration;
 389              		.loc 1 309 28 view .LVU103
 390 0142 049A     		ldr	r2, [sp, #16]
 391 0144 059E     		ldr	r6, [sp, #20]
 392              		.loc 1 309 13 is_stmt 1 view .LVU104
 393              		.loc 1 309 28 is_stmt 0 view .LVU105
 394 0146 039B     		ldr	r3, [sp, #12]
 395 0148 F918     		adds	r1, r7, r3
 396 014a 0391     		str	r1, [sp, #12]
 397              	.LVL35:
 398              		.loc 1 309 28 view .LVU106
 399 014c 46EBE776 		adc	r6, r6, r7, asr #31
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 14


 400              	.LVL36:
 310:Core/Src/main.c ****             x0 += x_step; // add step instead of multiplying new x value
 401              		.loc 1 310 13 is_stmt 1 view .LVU107
 402              		.loc 1 310 16 is_stmt 0 view .LVU108
 403 0150 009B     		ldr	r3, [sp]
 404 0152 0799     		ldr	r1, [sp, #28]
 405              	.LVL37:
 406              		.loc 1 310 16 view .LVU109
 407 0154 0B44     		add	r3, r3, r1
 408 0156 0093     		str	r3, [sp]
 409              	.LVL38:
 410              		.loc 1 310 16 view .LVU110
 411              	.LBE10:
 289:Core/Src/main.c ****             int32_t xi = 0, yi = 0;
 412              		.loc 1 289 36 is_stmt 1 discriminator 2 view .LVU111
 413 0158 0132     		adds	r2, r2, #1
 414              	.LVL39:
 415              	.L13:
 289:Core/Src/main.c ****             int32_t xi = 0, yi = 0;
 416              		.loc 1 289 27 discriminator 1 view .LVU112
 417 015a 069B     		ldr	r3, [sp, #24]
 418 015c 9A42     		cmp	r2, r3
 419 015e 05DA     		bge	.L17
 420              	.LBB13:
 291:Core/Src/main.c **** 
 421              		.loc 1 291 17 is_stmt 0 view .LVU113
 422 0160 0027     		movs	r7, #0
 290:Core/Src/main.c ****             int iteration = 0;
 423              		.loc 1 290 29 view .LVU114
 424 0162 3D46     		mov	r5, r7
 290:Core/Src/main.c ****             int iteration = 0;
 425              		.loc 1 290 21 view .LVU115
 426 0164 3946     		mov	r1, r7
 427 0166 0492     		str	r2, [sp, #16]
 428 0168 0596     		str	r6, [sp, #20]
 429 016a 7FE7     		b	.L12
 430              	.L17:
 290:Core/Src/main.c ****             int iteration = 0;
 431              		.loc 1 290 21 view .LVU116
 432              	.LBE13:
 433              	.LBE9:
 311:Core/Src/main.c ****         }
 312:Core/Src/main.c ****         y0 += y_step;     // add step instead of multiplying new y value
 434              		.loc 1 312 12 view .LVU117
 435 016c 089B     		ldr	r3, [sp, #32]
 436              		.loc 1 312 9 is_stmt 1 view .LVU118
 437              		.loc 1 312 12 is_stmt 0 view .LVU119
 438 016e 029A     		ldr	r2, [sp, #8]
 439              	.LVL40:
 440              		.loc 1 312 12 view .LVU120
 441 0170 0B99     		ldr	r1, [sp, #44]
 442 0172 0A44     		add	r2, r2, r1
 443 0174 0292     		str	r2, [sp, #8]
 444              	.LVL41:
 445              		.loc 1 312 12 view .LVU121
 446              	.LBE8:
 286:Core/Src/main.c ****         int32_t x0 = x_left;			// starting constant
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 15


 447              		.loc 1 286 33 is_stmt 1 discriminator 2 view .LVU122
 448 0176 0133     		adds	r3, r3, #1
 449              	.LVL42:
 450              	.L6:
 286:Core/Src/main.c ****         int32_t x0 = x_left;			// starting constant
 451              		.loc 1 286 23 discriminator 1 view .LVU123
 452 0178 099A     		ldr	r2, [sp, #36]
 453 017a 9342     		cmp	r3, r2
 454 017c 04DA     		bge	.L18
 455              	.LBB15:
 287:Core/Src/main.c **** 
 456              		.loc 1 287 17 is_stmt 0 view .LVU124
 457 017e 0A9A     		ldr	r2, [sp, #40]
 458 0180 0092     		str	r2, [sp]
 459              	.LBB14:
 289:Core/Src/main.c ****             int32_t xi = 0, yi = 0;
 460              		.loc 1 289 18 view .LVU125
 461 0182 0022     		movs	r2, #0
 462 0184 0893     		str	r3, [sp, #32]
 463 0186 E8E7     		b	.L13
 464              	.L18:
 289:Core/Src/main.c ****             int32_t xi = 0, yi = 0;
 465              		.loc 1 289 18 view .LVU126
 466              	.LBE14:
 467              	.LBE15:
 468              	.LBE7:
 313:Core/Src/main.c ****     }
 314:Core/Src/main.c **** 
 315:Core/Src/main.c ****     return mandelbrot_sum;
 316:Core/Src/main.c **** }
 469              		.loc 1 316 1 view .LVU127
 470 0188 0398     		ldr	r0, [sp, #12]
 315:Core/Src/main.c **** }
 471              		.loc 1 315 5 is_stmt 1 view .LVU128
 472              		.loc 1 316 1 is_stmt 0 view .LVU129
 473 018a 3146     		mov	r1, r6
 474 018c 0DB0     		add	sp, sp, #52
 475              	.LCFI5:
 476              		.cfi_def_cfa_offset 36
 477              		@ sp needed
 478 018e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 479              		.loc 1 316 1 view .LVU130
 480              		.cfi_endproc
 481              	.LFE137:
 483              		.global	__aeabi_i2d
 484              		.global	__aeabi_ddiv
 485              		.global	__aeabi_dmul
 486              		.global	__aeabi_dsub
 487              		.global	__aeabi_dadd
 488              		.global	__aeabi_dcmpgt
 489              		.section	.text.calculate_mandelbrot_double,"ax",%progbits
 490              		.align	1
 491              		.global	calculate_mandelbrot_double
 492              		.syntax unified
 493              		.thumb
 494              		.thumb_func
 496              	calculate_mandelbrot_double:
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 16


 497              	.LVL43:
 498              	.LFB138:
 317:Core/Src/main.c **** 
 318:Core/Src/main.c **** 
 319:Core/Src/main.c **** //TODO: Mandelbroat using variable type double
 320:Core/Src/main.c **** uint64_t calculate_mandelbrot_double(int width, int height, int max_iterations)
 321:Core/Src/main.c **** {
 499              		.loc 1 321 1 is_stmt 1 view -0
 500              		.cfi_startproc
 501              		@ args = 0, pretend = 0, frame = 56
 502              		@ frame_needed = 0, uses_anonymous_args = 0
 503              		.loc 1 321 1 is_stmt 0 view .LVU132
 504 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 505              	.LCFI6:
 506              		.cfi_def_cfa_offset 36
 507              		.cfi_offset 4, -36
 508              		.cfi_offset 5, -32
 509              		.cfi_offset 6, -28
 510              		.cfi_offset 7, -24
 511              		.cfi_offset 8, -20
 512              		.cfi_offset 9, -16
 513              		.cfi_offset 10, -12
 514              		.cfi_offset 11, -8
 515              		.cfi_offset 14, -4
 516 0004 8FB0     		sub	sp, sp, #60
 517              	.LCFI7:
 518              		.cfi_def_cfa_offset 96
 519 0006 0890     		str	r0, [sp, #32]
 520 0008 0C91     		str	r1, [sp, #48]
 322:Core/Src/main.c ****     uint64_t mandelbrot_sum = 0;
 521              		.loc 1 322 5 is_stmt 1 view .LVU133
 522              	.LVL44:
 323:Core/Src/main.c ****     //TODO: Complete the function implementation
 324:Core/Src/main.c ****     checksum = 0;
 523              		.loc 1 324 5 view .LVU134
 524              		.loc 1 324 14 is_stmt 0 view .LVU135
 525 000a 534B     		ldr	r3, .L31
 526 000c 0020     		movs	r0, #0
 527              	.LVL45:
 528              		.loc 1 324 14 view .LVU136
 529 000e 0021     		movs	r1, #0
 530              	.LVL46:
 531              		.loc 1 324 14 view .LVU137
 532 0010 C3E90001 		strd	r0, [r3]
 325:Core/Src/main.c ****     for (int y = 0; y < height; y++)
 533              		.loc 1 325 5 is_stmt 1 view .LVU138
 534              	.LBB16:
 535              		.loc 1 325 10 view .LVU139
 536              	.LVL47:
 537              		.loc 1 325 14 is_stmt 0 view .LVU140
 538 0014 4FF0000A 		mov	r10, #0
 539              	.LBE16:
 322:Core/Src/main.c ****     uint64_t mandelbrot_sum = 0;
 540              		.loc 1 322 14 view .LVU141
 541 0018 D146     		mov	r9, r10
 542 001a CDF824A0 		str	r10, [sp, #36]
 543 001e 0D92     		str	r2, [sp, #52]
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 17


 544 0020 CDF828A0 		str	r10, [sp, #40]
 545              	.LBB23:
 546              		.loc 1 325 5 view .LVU142
 547 0024 89E0     		b	.L20
 548              	.LVL48:
 549              	.L28:
 550              	.LBB17:
 551              	.LBB18:
 552              	.LBB19:
 326:Core/Src/main.c ****     {
 327:Core/Src/main.c ****     	for (int x = 0; x < width ; x++)
 328:Core/Src/main.c ****     	{
 329:Core/Src/main.c ****     		double x_0 = ((double)x/width)*3.5 - 2.5;
 330:Core/Src/main.c ****     		double y_0 = (double)y/height * 2.0 - 1.0;
 331:Core/Src/main.c **** 
 332:Core/Src/main.c ****     		double x_i = 0;
 333:Core/Src/main.c ****     		double y_i = 0;
 334:Core/Src/main.c ****     		int iteration = 0;
 335:Core/Src/main.c **** 
 336:Core/Src/main.c **** 
 337:Core/Src/main.c ****     		while (iteration < max_iterations)
 338:Core/Src/main.c ****     		{
 339:Core/Src/main.c **** 
 340:Core/Src/main.c ****     			double x_i_sq = x_i*x_i;
 341:Core/Src/main.c ****     			double y_i_sq = y_i*y_i;
 342:Core/Src/main.c **** 
 343:Core/Src/main.c ****     			if(x_i_sq + y_i_sq > 4.0)
 344:Core/Src/main.c ****     			{
 345:Core/Src/main.c ****     				break;
 346:Core/Src/main.c ****     			}
 347:Core/Src/main.c ****     			double temp  = x_i_sq - y_i_sq;
 553              		.loc 1 347 8 is_stmt 1 view .LVU143
 554              		.loc 1 347 15 is_stmt 0 view .LVU144
 555 0026 5246     		mov	r2, r10
 556 0028 5B46     		mov	r3, fp
 557 002a DDE90001 		ldrd	r0, [sp]
 558 002e FFF7FEFF 		bl	__aeabi_dsub
 559              	.LVL49:
 560 0032 8246     		mov	r10, r0
 561              	.LVL50:
 562              		.loc 1 347 15 view .LVU145
 563 0034 8B46     		mov	fp, r1
 564              	.LVL51:
 348:Core/Src/main.c ****     			y_i = 2.0*x_i*y_i + y_0;
 565              		.loc 1 348 8 is_stmt 1 view .LVU146
 566              		.loc 1 348 17 is_stmt 0 view .LVU147
 567 0036 2246     		mov	r2, r4
 568 0038 2B46     		mov	r3, r5
 569 003a 2046     		mov	r0, r4
 570 003c 2946     		mov	r1, r5
 571 003e FFF7FEFF 		bl	__aeabi_dadd
 572              	.LVL52:
 573              		.loc 1 348 21 view .LVU148
 574 0042 4246     		mov	r2, r8
 575 0044 4B46     		mov	r3, r9
 576 0046 FFF7FEFF 		bl	__aeabi_dmul
 577              	.LVL53:
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 18


 578              		.loc 1 348 12 view .LVU149
 579 004a DDE90423 		ldrd	r2, [sp, #16]
 580 004e FFF7FEFF 		bl	__aeabi_dadd
 581              	.LVL54:
 582 0052 8046     		mov	r8, r0
 583              	.LVL55:
 584              		.loc 1 348 12 view .LVU150
 585 0054 8946     		mov	r9, r1
 586              	.LVL56:
 349:Core/Src/main.c **** 
 350:Core/Src/main.c ****     			x_i = temp + x_0;
 587              		.loc 1 350 8 is_stmt 1 view .LVU151
 588              		.loc 1 350 12 is_stmt 0 view .LVU152
 589 0056 5246     		mov	r2, r10
 590 0058 5B46     		mov	r3, fp
 591 005a DDE90201 		ldrd	r0, [sp, #8]
 592 005e FFF7FEFF 		bl	__aeabi_dadd
 593              	.LVL57:
 594 0062 0446     		mov	r4, r0
 595              	.LVL58:
 596              		.loc 1 350 12 view .LVU153
 597 0064 0D46     		mov	r5, r1
 598              	.LVL59:
 351:Core/Src/main.c **** 
 352:Core/Src/main.c ****     			iteration = iteration +1;
 599              		.loc 1 352 8 is_stmt 1 view .LVU154
 600              		.loc 1 352 18 is_stmt 0 view .LVU155
 601 0066 0136     		adds	r6, r6, #1
 602              	.LVL60:
 603              	.L21:
 604              		.loc 1 352 18 view .LVU156
 605              	.LBE19:
 337:Core/Src/main.c ****     		{
 606              		.loc 1 337 24 is_stmt 1 view .LVU157
 607 0068 BE42     		cmp	r6, r7
 608 006a 1BDA     		bge	.L22
 609              	.LBB20:
 340:Core/Src/main.c ****     			double y_i_sq = y_i*y_i;
 610              		.loc 1 340 8 view .LVU158
 340:Core/Src/main.c ****     			double y_i_sq = y_i*y_i;
 611              		.loc 1 340 15 is_stmt 0 view .LVU159
 612 006c 2246     		mov	r2, r4
 613 006e 2B46     		mov	r3, r5
 614 0070 2046     		mov	r0, r4
 615 0072 2946     		mov	r1, r5
 616 0074 FFF7FEFF 		bl	__aeabi_dmul
 617              	.LVL61:
 618 0078 CDE90001 		strd	r0, [sp]
 619              	.LVL62:
 341:Core/Src/main.c **** 
 620              		.loc 1 341 8 is_stmt 1 view .LVU160
 341:Core/Src/main.c **** 
 621              		.loc 1 341 15 is_stmt 0 view .LVU161
 622 007c 4246     		mov	r2, r8
 623 007e 4B46     		mov	r3, r9
 624 0080 4046     		mov	r0, r8
 625              	.LVL63:
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 19


 341:Core/Src/main.c **** 
 626              		.loc 1 341 15 view .LVU162
 627 0082 4946     		mov	r1, r9
 628 0084 FFF7FEFF 		bl	__aeabi_dmul
 629              	.LVL64:
 630 0088 8246     		mov	r10, r0
 631 008a 8B46     		mov	fp, r1
 632              	.LVL65:
 343:Core/Src/main.c ****     			{
 633              		.loc 1 343 8 is_stmt 1 view .LVU163
 343:Core/Src/main.c ****     			{
 634              		.loc 1 343 18 is_stmt 0 view .LVU164
 635 008c 0246     		mov	r2, r0
 636 008e 0B46     		mov	r3, r1
 637 0090 DDE90001 		ldrd	r0, [sp]
 638 0094 FFF7FEFF 		bl	__aeabi_dadd
 639              	.LVL66:
 343:Core/Src/main.c ****     			{
 640              		.loc 1 343 10 view .LVU165
 641 0098 0022     		movs	r2, #0
 642 009a 304B     		ldr	r3, .L31+4
 643 009c FFF7FEFF 		bl	__aeabi_dcmpgt
 644              	.LVL67:
 645 00a0 0028     		cmp	r0, #0
 646 00a2 C0D0     		beq	.L28
 647              	.LVL68:
 648              	.L22:
 343:Core/Src/main.c ****     			{
 649              		.loc 1 343 10 view .LVU166
 650              	.LBE20:
 353:Core/Src/main.c **** 
 354:Core/Src/main.c ****     		}
 355:Core/Src/main.c **** 
 356:Core/Src/main.c ****     		mandelbrot_sum = mandelbrot_sum + iteration;
 651              		.loc 1 356 7 is_stmt 1 view .LVU167
 652              		.loc 1 356 22 is_stmt 0 view .LVU168
 653 00a4 0A9B     		ldr	r3, [sp, #40]
 654 00a6 F218     		adds	r2, r6, r3
 655 00a8 0A92     		str	r2, [sp, #40]
 656              	.LVL69:
 657              		.loc 1 356 22 view .LVU169
 658 00aa 099B     		ldr	r3, [sp, #36]
 659 00ac 43EBE673 		adc	r3, r3, r6, asr #31
 660 00b0 0993     		str	r3, [sp, #36]
 661              	.LVL70:
 662              		.loc 1 356 22 view .LVU170
 663              	.LBE18:
 327:Core/Src/main.c ****     	{
 664              		.loc 1 327 35 is_stmt 1 discriminator 2 view .LVU171
 665 00b2 079B     		ldr	r3, [sp, #28]
 666              	.LVL71:
 327:Core/Src/main.c ****     	{
 667              		.loc 1 327 35 is_stmt 0 discriminator 2 view .LVU172
 668 00b4 0133     		adds	r3, r3, #1
 669 00b6 0793     		str	r3, [sp, #28]
 670              	.LVL72:
 671              	.L25:
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 20


 327:Core/Src/main.c ****     	{
 672              		.loc 1 327 24 is_stmt 1 discriminator 1 view .LVU173
 673 00b8 079B     		ldr	r3, [sp, #28]
 674 00ba 089A     		ldr	r2, [sp, #32]
 675 00bc 9342     		cmp	r3, r2
 676 00be 38DA     		bge	.L29
 677              	.LBB21:
 329:Core/Src/main.c ****     		double y_0 = (double)y/height * 2.0 - 1.0;
 678              		.loc 1 329 7 view .LVU174
 329:Core/Src/main.c ****     		double y_0 = (double)y/height * 2.0 - 1.0;
 679              		.loc 1 329 21 is_stmt 0 view .LVU175
 680 00c0 0798     		ldr	r0, [sp, #28]
 681 00c2 FFF7FEFF 		bl	__aeabi_i2d
 682              	.LVL73:
 683 00c6 0446     		mov	r4, r0
 684 00c8 0D46     		mov	r5, r1
 329:Core/Src/main.c ****     		double y_0 = (double)y/height * 2.0 - 1.0;
 685              		.loc 1 329 30 view .LVU176
 686 00ca 0898     		ldr	r0, [sp, #32]
 687 00cc FFF7FEFF 		bl	__aeabi_i2d
 688              	.LVL74:
 689 00d0 0246     		mov	r2, r0
 690 00d2 0B46     		mov	r3, r1
 691 00d4 2046     		mov	r0, r4
 692 00d6 2946     		mov	r1, r5
 693 00d8 FFF7FEFF 		bl	__aeabi_ddiv
 694              	.LVL75:
 329:Core/Src/main.c ****     		double y_0 = (double)y/height * 2.0 - 1.0;
 695              		.loc 1 329 37 view .LVU177
 696 00dc 0022     		movs	r2, #0
 697 00de 204B     		ldr	r3, .L31+8
 698 00e0 FFF7FEFF 		bl	__aeabi_dmul
 699              	.LVL76:
 329:Core/Src/main.c ****     		double y_0 = (double)y/height * 2.0 - 1.0;
 700              		.loc 1 329 14 view .LVU178
 701 00e4 0022     		movs	r2, #0
 702 00e6 1F4B     		ldr	r3, .L31+12
 703 00e8 FFF7FEFF 		bl	__aeabi_dsub
 704              	.LVL77:
 705 00ec CDE90201 		strd	r0, [sp, #8]
 706              	.LVL78:
 330:Core/Src/main.c **** 
 707              		.loc 1 330 7 is_stmt 1 view .LVU179
 330:Core/Src/main.c **** 
 708              		.loc 1 330 20 is_stmt 0 view .LVU180
 709 00f0 0B98     		ldr	r0, [sp, #44]
 710              	.LVL79:
 330:Core/Src/main.c **** 
 711              		.loc 1 330 20 view .LVU181
 712 00f2 FFF7FEFF 		bl	__aeabi_i2d
 713              	.LVL80:
 714 00f6 0446     		mov	r4, r0
 715 00f8 0D46     		mov	r5, r1
 330:Core/Src/main.c **** 
 716              		.loc 1 330 29 view .LVU182
 717 00fa 0C98     		ldr	r0, [sp, #48]
 718 00fc FFF7FEFF 		bl	__aeabi_i2d
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 21


 719              	.LVL81:
 720 0100 0246     		mov	r2, r0
 721 0102 0B46     		mov	r3, r1
 722 0104 2046     		mov	r0, r4
 723 0106 2946     		mov	r1, r5
 724 0108 FFF7FEFF 		bl	__aeabi_ddiv
 725              	.LVL82:
 726 010c 0246     		mov	r2, r0
 727 010e 0B46     		mov	r3, r1
 330:Core/Src/main.c **** 
 728              		.loc 1 330 37 view .LVU183
 729 0110 FFF7FEFF 		bl	__aeabi_dadd
 730              	.LVL83:
 330:Core/Src/main.c **** 
 731              		.loc 1 330 14 view .LVU184
 732 0114 0022     		movs	r2, #0
 733 0116 144B     		ldr	r3, .L31+16
 734 0118 FFF7FEFF 		bl	__aeabi_dsub
 735              	.LVL84:
 736 011c CDE90401 		strd	r0, [sp, #16]
 737              	.LVL85:
 332:Core/Src/main.c ****     		double y_i = 0;
 738              		.loc 1 332 7 is_stmt 1 view .LVU185
 333:Core/Src/main.c ****     		int iteration = 0;
 739              		.loc 1 333 7 view .LVU186
 334:Core/Src/main.c **** 
 740              		.loc 1 334 7 view .LVU187
 337:Core/Src/main.c ****     		{
 741              		.loc 1 337 7 view .LVU188
 334:Core/Src/main.c **** 
 742              		.loc 1 334 11 is_stmt 0 view .LVU189
 743 0120 0026     		movs	r6, #0
 333:Core/Src/main.c ****     		int iteration = 0;
 744              		.loc 1 333 14 view .LVU190
 745 0122 4FF00008 		mov	r8, #0
 746 0126 4FF00009 		mov	r9, #0
 332:Core/Src/main.c ****     		double y_i = 0;
 747              		.loc 1 332 14 view .LVU191
 748 012a 4446     		mov	r4, r8
 749 012c 4D46     		mov	r5, r9
 750 012e 0D9F     		ldr	r7, [sp, #52]
 337:Core/Src/main.c ****     		{
 751              		.loc 1 337 13 view .LVU192
 752 0130 9AE7     		b	.L21
 753              	.LVL86:
 754              	.L29:
 337:Core/Src/main.c ****     		{
 755              		.loc 1 337 13 view .LVU193
 756              	.LBE21:
 757              	.LBE17:
 325:Core/Src/main.c ****     {
 758              		.loc 1 325 34 discriminator 2 view .LVU194
 759 0132 DDF82C90 		ldr	r9, [sp, #44]
 325:Core/Src/main.c ****     {
 760              		.loc 1 325 34 is_stmt 1 discriminator 2 view .LVU195
 761 0136 09F10109 		add	r9, r9, #1
 762              	.LVL87:
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 22


 763              	.L20:
 325:Core/Src/main.c ****     {
 764              		.loc 1 325 23 discriminator 1 view .LVU196
 765 013a 0C9B     		ldr	r3, [sp, #48]
 766 013c 9945     		cmp	r9, r3
 767 013e 04DA     		bge	.L30
 768              	.LBB22:
 327:Core/Src/main.c ****     	{
 769              		.loc 1 327 15 is_stmt 0 view .LVU197
 770 0140 0023     		movs	r3, #0
 771 0142 0793     		str	r3, [sp, #28]
 772 0144 CDF82C90 		str	r9, [sp, #44]
 773 0148 B6E7     		b	.L25
 774              	.L30:
 327:Core/Src/main.c ****     	{
 775              		.loc 1 327 15 view .LVU198
 776              	.LBE22:
 777              	.LBE23:
 357:Core/Src/main.c **** 
 358:Core/Src/main.c ****     	}
 359:Core/Src/main.c ****     }
 360:Core/Src/main.c ****     //checksum = mandelbrot_sum;
 361:Core/Src/main.c ****     return mandelbrot_sum;
 362:Core/Src/main.c **** }
 778              		.loc 1 362 1 view .LVU199
 779 014a DDF82890 		ldr	r9, [sp, #40]
 780              	.LVL88:
 361:Core/Src/main.c **** }
 781              		.loc 1 361 5 is_stmt 1 view .LVU200
 782              		.loc 1 362 1 is_stmt 0 view .LVU201
 783 014e 4846     		mov	r0, r9
 784 0150 0999     		ldr	r1, [sp, #36]
 785 0152 0FB0     		add	sp, sp, #60
 786              	.LCFI8:
 787              		.cfi_def_cfa_offset 36
 788              		@ sp needed
 789 0154 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 790              	.LVL89:
 791              	.L32:
 792              		.loc 1 362 1 view .LVU202
 793              		.align	2
 794              	.L31:
 795 0158 00000000 		.word	checksum
 796 015c 00001040 		.word	1074790400
 797 0160 00000C40 		.word	1074528256
 798 0164 00000440 		.word	1074003968
 799 0168 0000F03F 		.word	1072693248
 800              		.cfi_endproc
 801              	.LFE138:
 803              		.section	.text.task1,"ax",%progbits
 804              		.align	1
 805              		.global	task1
 806              		.syntax unified
 807              		.thumb
 808              		.thumb_func
 810              	task1:
 811              	.LVL90:
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 23


 812              	.LFB139:
 363:Core/Src/main.c **** 
 364:Core/Src/main.c **** void task1(int iter) {
 813              		.loc 1 364 22 is_stmt 1 view -0
 814              		.cfi_startproc
 815              		@ args = 0, pretend = 0, frame = 0
 816              		@ frame_needed = 0, uses_anonymous_args = 0
 817              		.loc 1 364 22 is_stmt 0 view .LVU204
 818 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 819              	.LCFI9:
 820              		.cfi_def_cfa_offset 24
 821              		.cfi_offset 4, -24
 822              		.cfi_offset 5, -20
 823              		.cfi_offset 6, -16
 824              		.cfi_offset 7, -12
 825              		.cfi_offset 8, -8
 826              		.cfi_offset 14, -4
 827 0004 0546     		mov	r5, r0
 365:Core/Src/main.c **** 	for (int i=0; i<5; i++) {
 828              		.loc 1 365 2 is_stmt 1 view .LVU205
 829              	.LBB24:
 830              		.loc 1 365 7 view .LVU206
 831              	.LVL91:
 832              		.loc 1 365 11 is_stmt 0 view .LVU207
 833 0006 0024     		movs	r4, #0
 834              		.loc 1 365 2 view .LVU208
 835 0008 2EE0     		b	.L34
 836              	.LVL92:
 837              	.L35:
 366:Core/Src/main.c **** 		  start_time = HAL_GetTick();
 838              		.loc 1 366 5 is_stmt 1 view .LVU209
 839              		.loc 1 366 18 is_stmt 0 view .LVU210
 840 000a FFF7FEFF 		bl	HAL_GetTick
 841              	.LVL93:
 842              		.loc 1 366 18 discriminator 1 view .LVU211
 843 000e 4FF00008 		mov	r8, #0
 844              		.loc 1 366 16 discriminator 1 view .LVU212
 845 0012 304F     		ldr	r7, .L39
 846 0014 3860     		str	r0, [r7]
 847 0016 C7F80480 		str	r8, [r7, #4]
 367:Core/Src/main.c **** 
 368:Core/Src/main.c **** 		  checksum = calculate_mandelbrot_fixed_point_arithmetic(imageDimensions[i], imageDimensions[i], 
 848              		.loc 1 368 5 is_stmt 1 view .LVU213
 849              		.loc 1 368 16 is_stmt 0 view .LVU214
 850 001a 2F4B     		ldr	r3, .L39+4
 851 001c 53F82400 		ldr	r0, [r3, r4, lsl #2]
 852 0020 1023     		movs	r3, #16
 853 0022 2A46     		mov	r2, r5
 854 0024 0146     		mov	r1, r0
 855 0026 FFF7FEFF 		bl	calculate_mandelbrot_fixed_point_arithmetic
 856              	.LVL94:
 857              		.loc 1 368 14 discriminator 1 view .LVU215
 858 002a 2C4E     		ldr	r6, .L39+8
 859 002c C6E90001 		strd	r0, [r6]
 369:Core/Src/main.c **** 
 370:Core/Src/main.c **** 		  end_time = HAL_GetTick();
 860              		.loc 1 370 5 is_stmt 1 view .LVU216
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 24


 861              		.loc 1 370 16 is_stmt 0 view .LVU217
 862 0030 FFF7FEFF 		bl	HAL_GetTick
 863              	.LVL95:
 864              		.loc 1 370 14 discriminator 1 view .LVU218
 865 0034 2A4B     		ldr	r3, .L39+12
 866 0036 1860     		str	r0, [r3]
 867 0038 C3F80480 		str	r8, [r3, #4]
 371:Core/Src/main.c **** 
 372:Core/Src/main.c **** 		  execution_time = end_time - start_time;
 868              		.loc 1 372 5 is_stmt 1 view .LVU219
 869              		.loc 1 372 31 is_stmt 0 view .LVU220
 870 003c 3A68     		ldr	r2, [r7]
 871 003e 7B68     		ldr	r3, [r7, #4]
 872 0040 801A     		subs	r0, r0, r2
 873 0042 63EB4303 		sbc	r3, r3, r3, lsl #1
 874              		.loc 1 372 20 view .LVU221
 875 0046 274A     		ldr	r2, .L39+16
 876 0048 1060     		str	r0, [r2]
 877 004a 5360     		str	r3, [r2, #4]
 373:Core/Src/main.c **** 		  timeArray_arithmetic[i] = execution_time;
 878              		.loc 1 373 5 is_stmt 1 view .LVU222
 879              		.loc 1 373 29 is_stmt 0 view .LVU223
 880 004c 264A     		ldr	r2, .L39+20
 881 004e 02EBC401 		add	r1, r2, r4, lsl #3
 882 0052 42F83400 		str	r0, [r2, r4, lsl #3]
 883 0056 4B60     		str	r3, [r1, #4]
 374:Core/Src/main.c **** 		  checksumArray_arithmetic[i] = checksum;
 884              		.loc 1 374 5 is_stmt 1 view .LVU224
 885              		.loc 1 374 33 is_stmt 0 view .LVU225
 886 0058 244B     		ldr	r3, .L39+24
 887 005a 03EBC403 		add	r3, r3, r4, lsl #3
 888 005e D6E90001 		ldrd	r0, [r6]
 889 0062 C3E90001 		strd	r0, [r3]
 365:Core/Src/main.c **** 		  start_time = HAL_GetTick();
 890              		.loc 1 365 22 is_stmt 1 discriminator 3 view .LVU226
 891 0066 0134     		adds	r4, r4, #1
 892              	.LVL96:
 893              	.L34:
 365:Core/Src/main.c **** 		  start_time = HAL_GetTick();
 894              		.loc 1 365 17 discriminator 1 view .LVU227
 895 0068 042C     		cmp	r4, #4
 896 006a CEDD     		ble	.L35
 897              	.LBE24:
 898              	.LBB25:
 375:Core/Src/main.c **** 	}
 376:Core/Src/main.c **** 
 377:Core/Src/main.c **** 	for (int i=0; i<5; i++) {
 899              		.loc 1 377 11 is_stmt 0 view .LVU228
 900 006c 0024     		movs	r4, #0
 901              	.LVL97:
 902              		.loc 1 377 11 view .LVU229
 903 006e 2DE0     		b	.L36
 904              	.LVL98:
 905              	.L37:
 378:Core/Src/main.c **** 		  start_time = HAL_GetTick();
 906              		.loc 1 378 5 is_stmt 1 view .LVU230
 907              		.loc 1 378 18 is_stmt 0 view .LVU231
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 25


 908 0070 FFF7FEFF 		bl	HAL_GetTick
 909              	.LVL99:
 910              		.loc 1 378 18 discriminator 1 view .LVU232
 911 0074 4FF00008 		mov	r8, #0
 912              		.loc 1 378 16 discriminator 1 view .LVU233
 913 0078 164F     		ldr	r7, .L39
 914 007a 3860     		str	r0, [r7]
 915 007c C7F80480 		str	r8, [r7, #4]
 379:Core/Src/main.c **** 
 380:Core/Src/main.c **** 		  checksum = calculate_mandelbrot_double(imageDimensions[i], imageDimensions[i], iter);
 916              		.loc 1 380 5 is_stmt 1 view .LVU234
 917              		.loc 1 380 16 is_stmt 0 view .LVU235
 918 0080 154B     		ldr	r3, .L39+4
 919 0082 53F82400 		ldr	r0, [r3, r4, lsl #2]
 920 0086 2A46     		mov	r2, r5
 921 0088 0146     		mov	r1, r0
 922 008a FFF7FEFF 		bl	calculate_mandelbrot_double
 923              	.LVL100:
 924              		.loc 1 380 14 discriminator 1 view .LVU236
 925 008e 134E     		ldr	r6, .L39+8
 926 0090 C6E90001 		strd	r0, [r6]
 381:Core/Src/main.c **** 
 382:Core/Src/main.c **** 		  end_time = HAL_GetTick();
 927              		.loc 1 382 5 is_stmt 1 view .LVU237
 928              		.loc 1 382 16 is_stmt 0 view .LVU238
 929 0094 FFF7FEFF 		bl	HAL_GetTick
 930              	.LVL101:
 931              		.loc 1 382 14 discriminator 1 view .LVU239
 932 0098 114B     		ldr	r3, .L39+12
 933 009a 1860     		str	r0, [r3]
 934 009c C3F80480 		str	r8, [r3, #4]
 383:Core/Src/main.c **** 
 384:Core/Src/main.c **** 		  execution_time = end_time - start_time;
 935              		.loc 1 384 5 is_stmt 1 view .LVU240
 936              		.loc 1 384 31 is_stmt 0 view .LVU241
 937 00a0 3A68     		ldr	r2, [r7]
 938 00a2 7B68     		ldr	r3, [r7, #4]
 939 00a4 801A     		subs	r0, r0, r2
 940 00a6 63EB4303 		sbc	r3, r3, r3, lsl #1
 941              		.loc 1 384 20 view .LVU242
 942 00aa 0E4A     		ldr	r2, .L39+16
 943 00ac 1060     		str	r0, [r2]
 944 00ae 5360     		str	r3, [r2, #4]
 385:Core/Src/main.c **** 		  timeArray_double[i] = execution_time;
 945              		.loc 1 385 5 is_stmt 1 view .LVU243
 946              		.loc 1 385 25 is_stmt 0 view .LVU244
 947 00b0 0F4A     		ldr	r2, .L39+28
 948 00b2 02EBC401 		add	r1, r2, r4, lsl #3
 949 00b6 42F83400 		str	r0, [r2, r4, lsl #3]
 950 00ba 4B60     		str	r3, [r1, #4]
 386:Core/Src/main.c **** 		  checksumArray_double[i] = checksum;
 951              		.loc 1 386 5 is_stmt 1 view .LVU245
 952              		.loc 1 386 29 is_stmt 0 view .LVU246
 953 00bc 0D4B     		ldr	r3, .L39+32
 954 00be 03EBC403 		add	r3, r3, r4, lsl #3
 955 00c2 D6E90001 		ldrd	r0, [r6]
 956 00c6 C3E90001 		strd	r0, [r3]
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 26


 377:Core/Src/main.c **** 		  start_time = HAL_GetTick();
 957              		.loc 1 377 22 is_stmt 1 discriminator 3 view .LVU247
 958 00ca 0134     		adds	r4, r4, #1
 959              	.LVL102:
 960              	.L36:
 377:Core/Src/main.c **** 		  start_time = HAL_GetTick();
 961              		.loc 1 377 17 discriminator 1 view .LVU248
 962 00cc 042C     		cmp	r4, #4
 963 00ce CFDD     		ble	.L37
 964              	.LBE25:
 387:Core/Src/main.c **** 		}
 388:Core/Src/main.c **** }
 965              		.loc 1 388 1 is_stmt 0 view .LVU249
 966 00d0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 967              	.LVL103:
 968              	.L40:
 969              		.loc 1 388 1 view .LVU250
 970              		.align	2
 971              	.L39:
 972 00d4 00000000 		.word	start_time
 973 00d8 00000000 		.word	imageDimensions
 974 00dc 00000000 		.word	checksum
 975 00e0 00000000 		.word	end_time
 976 00e4 00000000 		.word	execution_time
 977 00e8 00000000 		.word	timeArray_arithmetic
 978 00ec 00000000 		.word	checksumArray_arithmetic
 979 00f0 00000000 		.word	timeArray_double
 980 00f4 00000000 		.word	checksumArray_double
 981              		.cfi_endproc
 982              	.LFE139:
 984              		.section	.text.task2,"ax",%progbits
 985              		.align	1
 986              		.global	task2
 987              		.syntax unified
 988              		.thumb
 989              		.thumb_func
 991              	task2:
 992              	.LFB140:
 389:Core/Src/main.c **** 
 390:Core/Src/main.c **** // ================================================================================================
 391:Core/Src/main.c **** /*
 392:Core/Src/main.c ****  * This method executes task 2 by performing the Mandelbrot function using the double method
 393:Core/Src/main.c ****  * It performs the function with varying max iterations sizes 100, 250, 500, 750, 1000
 394:Core/Src/main.c ****  */
 395:Core/Src/main.c **** void task2() {
 993              		.loc 1 395 14 is_stmt 1 view -0
 994              		.cfi_startproc
 995              		@ args = 0, pretend = 0, frame = 0
 996              		@ frame_needed = 0, uses_anonymous_args = 0
 997 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 998              	.LCFI10:
 999              		.cfi_def_cfa_offset 24
 1000              		.cfi_offset 4, -24
 1001              		.cfi_offset 5, -20
 1002              		.cfi_offset 6, -16
 1003              		.cfi_offset 7, -12
 1004              		.cfi_offset 8, -8
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 27


 1005              		.cfi_offset 14, -4
 396:Core/Src/main.c **** 	// for looping through iteration sizes
 397:Core/Src/main.c **** 	for (int j = 0; j<5; j++) {
 1006              		.loc 1 397 2 view .LVU252
 1007              	.LBB26:
 1008              		.loc 1 397 7 view .LVU253
 1009              	.LVL104:
 1010              		.loc 1 397 11 is_stmt 0 view .LVU254
 1011 0004 0025     		movs	r5, #0
 1012              		.loc 1 397 2 view .LVU255
 1013 0006 35E0     		b	.L42
 1014              	.LVL105:
 1015              	.L43:
 1016              	.LBB27:
 398:Core/Src/main.c **** 
 399:Core/Src/main.c **** 		// for looping through image sizes
 400:Core/Src/main.c **** 		for (int i=0; i<5; i++) {
 401:Core/Src/main.c **** 			  start_time = HAL_GetTick();
 1017              		.loc 1 401 6 is_stmt 1 view .LVU256
 1018              		.loc 1 401 19 is_stmt 0 view .LVU257
 1019 0008 FFF7FEFF 		bl	HAL_GetTick
 1020              	.LVL106:
 1021              		.loc 1 401 19 discriminator 1 view .LVU258
 1022 000c 4FF00008 		mov	r8, #0
 1023              		.loc 1 401 17 discriminator 1 view .LVU259
 1024 0010 1B4F     		ldr	r7, .L48
 1025 0012 3860     		str	r0, [r7]
 1026 0014 C7F80480 		str	r8, [r7, #4]
 402:Core/Src/main.c **** 
 403:Core/Src/main.c **** 			  // Can change to fixed point arithmetic is comparison between that data is needed
 404:Core/Src/main.c **** 			  checksum = calculate_mandelbrot_double(imageDimensions[i], imageDimensions[i], iterationsArray
 1027              		.loc 1 404 6 is_stmt 1 view .LVU260
 1028              		.loc 1 404 17 is_stmt 0 view .LVU261
 1029 0018 1A4B     		ldr	r3, .L48+4
 1030 001a 53F82400 		ldr	r0, [r3, r4, lsl #2]
 1031 001e 1A4B     		ldr	r3, .L48+8
 1032 0020 53F82520 		ldr	r2, [r3, r5, lsl #2]
 1033 0024 0146     		mov	r1, r0
 1034 0026 FFF7FEFF 		bl	calculate_mandelbrot_double
 1035              	.LVL107:
 1036              		.loc 1 404 15 discriminator 1 view .LVU262
 1037 002a 184E     		ldr	r6, .L48+12
 1038 002c C6E90001 		strd	r0, [r6]
 405:Core/Src/main.c **** 
 406:Core/Src/main.c **** 			  end_time = HAL_GetTick();
 1039              		.loc 1 406 6 is_stmt 1 view .LVU263
 1040              		.loc 1 406 17 is_stmt 0 view .LVU264
 1041 0030 FFF7FEFF 		bl	HAL_GetTick
 1042              	.LVL108:
 1043              		.loc 1 406 15 discriminator 1 view .LVU265
 1044 0034 164B     		ldr	r3, .L48+16
 1045 0036 1860     		str	r0, [r3]
 1046 0038 C3F80480 		str	r8, [r3, #4]
 407:Core/Src/main.c **** 
 408:Core/Src/main.c **** 			  execution_time = end_time - start_time;
 1047              		.loc 1 408 6 is_stmt 1 view .LVU266
 1048              		.loc 1 408 32 is_stmt 0 view .LVU267
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 28


 1049 003c 3B68     		ldr	r3, [r7]
 1050 003e 7A68     		ldr	r2, [r7, #4]
 1051 0040 C01A     		subs	r0, r0, r3
 1052 0042 62EB4202 		sbc	r2, r2, r2, lsl #1
 1053              		.loc 1 408 21 view .LVU268
 1054 0046 134B     		ldr	r3, .L48+20
 1055 0048 1860     		str	r0, [r3]
 1056 004a 5A60     		str	r2, [r3, #4]
 409:Core/Src/main.c **** 			  task2ArrayTime[j][i] = execution_time;
 1057              		.loc 1 409 6 is_stmt 1 view .LVU269
 1058              		.loc 1 409 27 is_stmt 0 view .LVU270
 1059 004c 1249     		ldr	r1, .L48+24
 1060 004e 05EB8503 		add	r3, r5, r5, lsl #2
 1061 0052 2344     		add	r3, r3, r4
 1062 0054 01EBC307 		add	r7, r1, r3, lsl #3
 1063 0058 41F83300 		str	r0, [r1, r3, lsl #3]
 1064 005c 7A60     		str	r2, [r7, #4]
 410:Core/Src/main.c **** 			  task2ArrayChecksum[j][i] = checksum;
 1065              		.loc 1 410 6 is_stmt 1 view .LVU271
 1066              		.loc 1 410 31 is_stmt 0 view .LVU272
 1067 005e 0F4A     		ldr	r2, .L48+28
 1068 0060 02EBC303 		add	r3, r2, r3, lsl #3
 1069 0064 D6E90001 		ldrd	r0, [r6]
 1070 0068 C3E90001 		strd	r0, [r3]
 400:Core/Src/main.c **** 			  start_time = HAL_GetTick();
 1071              		.loc 1 400 23 is_stmt 1 discriminator 3 view .LVU273
 1072 006c 0134     		adds	r4, r4, #1
 1073              	.LVL109:
 1074              	.L44:
 400:Core/Src/main.c **** 			  start_time = HAL_GetTick();
 1075              		.loc 1 400 18 discriminator 1 view .LVU274
 1076 006e 042C     		cmp	r4, #4
 1077 0070 CADD     		ble	.L43
 1078              	.LBE27:
 397:Core/Src/main.c **** 
 1079              		.loc 1 397 24 discriminator 2 view .LVU275
 1080 0072 0135     		adds	r5, r5, #1
 1081              	.LVL110:
 1082              	.L42:
 397:Core/Src/main.c **** 
 1083              		.loc 1 397 19 discriminator 1 view .LVU276
 1084 0074 042D     		cmp	r5, #4
 1085 0076 01DC     		bgt	.L47
 1086              	.LBB28:
 400:Core/Src/main.c **** 			  start_time = HAL_GetTick();
 1087              		.loc 1 400 12 is_stmt 0 view .LVU277
 1088 0078 0024     		movs	r4, #0
 1089 007a F8E7     		b	.L44
 1090              	.L47:
 1091              	.LBE28:
 1092              	.LBE26:
 411:Core/Src/main.c **** 		}
 412:Core/Src/main.c **** 	}
 413:Core/Src/main.c **** }
 1093              		.loc 1 413 1 view .LVU278
 1094 007c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1095              	.LVL111:
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 29


 1096              	.L49:
 1097              		.loc 1 413 1 view .LVU279
 1098              		.align	2
 1099              	.L48:
 1100 0080 00000000 		.word	start_time
 1101 0084 00000000 		.word	imageDimensions
 1102 0088 00000000 		.word	iterationsArray
 1103 008c 00000000 		.word	checksum
 1104 0090 00000000 		.word	end_time
 1105 0094 00000000 		.word	execution_time
 1106 0098 00000000 		.word	task2ArrayTime
 1107 009c 00000000 		.word	task2ArrayChecksum
 1108              		.cfi_endproc
 1109              	.LFE140:
 1111              		.section	.text.task4,"ax",%progbits
 1112              		.align	1
 1113              		.global	task4
 1114              		.syntax unified
 1115              		.thumb
 1116              		.thumb_func
 1118              	task4:
 1119              	.LFB141:
 414:Core/Src/main.c **** 
 415:Core/Src/main.c **** // ================================================================================================
 416:Core/Src/main.c **** 
 417:Core/Src/main.c **** void task4() {
 1120              		.loc 1 417 14 is_stmt 1 view -0
 1121              		.cfi_startproc
 1122              		@ args = 0, pretend = 0, frame = 0
 1123              		@ frame_needed = 0, uses_anonymous_args = 0
 1124              		@ link register save eliminated.
 418:Core/Src/main.c **** 
 419:Core/Src/main.c **** }
 1125              		.loc 1 419 1 view .LVU281
 1126 0000 7047     		bx	lr
 1127              		.cfi_endproc
 1128              	.LFE141:
 1130              		.section	.text.task7,"ax",%progbits
 1131              		.align	1
 1132              		.global	task7
 1133              		.syntax unified
 1134              		.thumb
 1135              		.thumb_func
 1137              	task7:
 1138              	.LFB142:
 420:Core/Src/main.c **** 
 421:Core/Src/main.c **** // ================================================================================================
 422:Core/Src/main.c **** /*
 423:Core/Src/main.c ****  * This function performs task 7 of Practical 3
 424:Core/Src/main.c ****  * It performs the fixed point arithmetic Mandelbrot function with varying scale factors
 425:Core/Src/main.c ****  * The scale factors are the binary equivalents of 10^3, 10^4, 10^6
 426:Core/Src/main.c ****  * i.e 2^10, 2^13, 2^20
 427:Core/Src/main.c ****  */
 428:Core/Src/main.c **** void task7() {
 1139              		.loc 1 428 14 view -0
 1140              		.cfi_startproc
 1141              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 30


 1142              		@ frame_needed = 0, uses_anonymous_args = 0
 1143 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1144              	.LCFI11:
 1145              		.cfi_def_cfa_offset 24
 1146              		.cfi_offset 4, -24
 1147              		.cfi_offset 5, -20
 1148              		.cfi_offset 6, -16
 1149              		.cfi_offset 7, -12
 1150              		.cfi_offset 8, -8
 1151              		.cfi_offset 14, -4
 429:Core/Src/main.c **** 
 430:Core/Src/main.c **** 	for (int j=0; j<3; j++) {
 1152              		.loc 1 430 2 view .LVU283
 1153              	.LBB29:
 1154              		.loc 1 430 7 view .LVU284
 1155              	.LVL112:
 1156              		.loc 1 430 11 is_stmt 0 view .LVU285
 1157 0004 0025     		movs	r5, #0
 1158              		.loc 1 430 2 view .LVU286
 1159 0006 36E0     		b	.L52
 1160              	.LVL113:
 1161              	.L53:
 1162              	.LBB30:
 431:Core/Src/main.c **** 
 432:Core/Src/main.c **** 		for (int i=0; i<5; i++) {
 433:Core/Src/main.c **** 				  start_time = HAL_GetTick();
 1163              		.loc 1 433 7 is_stmt 1 view .LVU287
 1164              		.loc 1 433 20 is_stmt 0 view .LVU288
 1165 0008 FFF7FEFF 		bl	HAL_GetTick
 1166              	.LVL114:
 1167              		.loc 1 433 20 discriminator 1 view .LVU289
 1168 000c 4FF00008 		mov	r8, #0
 1169              		.loc 1 433 18 discriminator 1 view .LVU290
 1170 0010 1C4F     		ldr	r7, .L58
 1171 0012 3860     		str	r0, [r7]
 1172 0014 C7F80480 		str	r8, [r7, #4]
 434:Core/Src/main.c **** 
 435:Core/Src/main.c **** 				  checksum = calculate_mandelbrot_fixed_point_arithmetic(imageDimensions[i], imageDimensions[i]
 1173              		.loc 1 435 7 is_stmt 1 view .LVU291
 1174              		.loc 1 435 18 is_stmt 0 view .LVU292
 1175 0018 1B4B     		ldr	r3, .L58+4
 1176 001a 53F82400 		ldr	r0, [r3, r4, lsl #2]
 1177 001e 1B4B     		ldr	r3, .L58+8
 1178 0020 53F82530 		ldr	r3, [r3, r5, lsl #2]
 1179 0024 6422     		movs	r2, #100
 1180 0026 0146     		mov	r1, r0
 1181 0028 FFF7FEFF 		bl	calculate_mandelbrot_fixed_point_arithmetic
 1182              	.LVL115:
 1183              		.loc 1 435 16 discriminator 1 view .LVU293
 1184 002c 184E     		ldr	r6, .L58+12
 1185 002e C6E90001 		strd	r0, [r6]
 436:Core/Src/main.c **** 
 437:Core/Src/main.c **** 				  end_time = HAL_GetTick();
 1186              		.loc 1 437 7 is_stmt 1 view .LVU294
 1187              		.loc 1 437 18 is_stmt 0 view .LVU295
 1188 0032 FFF7FEFF 		bl	HAL_GetTick
 1189              	.LVL116:
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 31


 1190              		.loc 1 437 16 discriminator 1 view .LVU296
 1191 0036 174B     		ldr	r3, .L58+16
 1192 0038 1860     		str	r0, [r3]
 1193 003a C3F80480 		str	r8, [r3, #4]
 438:Core/Src/main.c **** 
 439:Core/Src/main.c **** 				  execution_time = end_time - start_time;
 1194              		.loc 1 439 7 is_stmt 1 view .LVU297
 1195              		.loc 1 439 33 is_stmt 0 view .LVU298
 1196 003e 3B68     		ldr	r3, [r7]
 1197 0040 7A68     		ldr	r2, [r7, #4]
 1198 0042 C01A     		subs	r0, r0, r3
 1199 0044 62EB4202 		sbc	r2, r2, r2, lsl #1
 1200              		.loc 1 439 22 view .LVU299
 1201 0048 134B     		ldr	r3, .L58+20
 1202 004a 1860     		str	r0, [r3]
 1203 004c 5A60     		str	r2, [r3, #4]
 440:Core/Src/main.c **** 				  task7ArrayTime[j][i] = execution_time;
 1204              		.loc 1 440 7 is_stmt 1 view .LVU300
 1205              		.loc 1 440 28 is_stmt 0 view .LVU301
 1206 004e 1349     		ldr	r1, .L58+24
 1207 0050 05EB8503 		add	r3, r5, r5, lsl #2
 1208 0054 2344     		add	r3, r3, r4
 1209 0056 01EBC307 		add	r7, r1, r3, lsl #3
 1210 005a 41F83300 		str	r0, [r1, r3, lsl #3]
 1211 005e 7A60     		str	r2, [r7, #4]
 441:Core/Src/main.c **** 				  task7ArrayChecksum[j][i] = checksum;
 1212              		.loc 1 441 7 is_stmt 1 view .LVU302
 1213              		.loc 1 441 32 is_stmt 0 view .LVU303
 1214 0060 0F4A     		ldr	r2, .L58+28
 1215 0062 02EBC303 		add	r3, r2, r3, lsl #3
 1216 0066 D6E90001 		ldrd	r0, [r6]
 1217 006a C3E90001 		strd	r0, [r3]
 432:Core/Src/main.c **** 				  start_time = HAL_GetTick();
 1218              		.loc 1 432 23 is_stmt 1 discriminator 3 view .LVU304
 1219 006e 0134     		adds	r4, r4, #1
 1220              	.LVL117:
 1221              	.L54:
 432:Core/Src/main.c **** 				  start_time = HAL_GetTick();
 1222              		.loc 1 432 18 discriminator 1 view .LVU305
 1223 0070 042C     		cmp	r4, #4
 1224 0072 C9DD     		ble	.L53
 1225              	.LBE30:
 430:Core/Src/main.c **** 
 1226              		.loc 1 430 22 discriminator 2 view .LVU306
 1227 0074 0135     		adds	r5, r5, #1
 1228              	.LVL118:
 1229              	.L52:
 430:Core/Src/main.c **** 
 1230              		.loc 1 430 17 discriminator 1 view .LVU307
 1231 0076 022D     		cmp	r5, #2
 1232 0078 01DC     		bgt	.L57
 1233              	.LBB31:
 432:Core/Src/main.c **** 				  start_time = HAL_GetTick();
 1234              		.loc 1 432 12 is_stmt 0 view .LVU308
 1235 007a 0024     		movs	r4, #0
 1236 007c F8E7     		b	.L54
 1237              	.L57:
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 32


 1238              	.LBE31:
 1239              	.LBE29:
 442:Core/Src/main.c **** 		}
 443:Core/Src/main.c **** 
 444:Core/Src/main.c **** 	}
 445:Core/Src/main.c **** 
 446:Core/Src/main.c **** }
 1240              		.loc 1 446 1 view .LVU309
 1241 007e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1242              	.LVL119:
 1243              	.L59:
 1244              		.loc 1 446 1 view .LVU310
 1245 0082 00BF     		.align	2
 1246              	.L58:
 1247 0084 00000000 		.word	start_time
 1248 0088 00000000 		.word	imageDimensions
 1249 008c 00000000 		.word	arrayQ
 1250 0090 00000000 		.word	checksum
 1251 0094 00000000 		.word	end_time
 1252 0098 00000000 		.word	execution_time
 1253 009c 00000000 		.word	task7ArrayTime
 1254 00a0 00000000 		.word	task7ArrayChecksum
 1255              		.cfi_endproc
 1256              	.LFE142:
 1258              		.section	.text.Error_Handler,"ax",%progbits
 1259              		.align	1
 1260              		.global	Error_Handler
 1261              		.syntax unified
 1262              		.thumb
 1263              		.thumb_func
 1265              	Error_Handler:
 1266              	.LFB143:
 447:Core/Src/main.c **** 
 448:Core/Src/main.c **** // ================================================================================================
 449:Core/Src/main.c **** 
 450:Core/Src/main.c **** 
 451:Core/Src/main.c **** /* USER CODE END 4 */
 452:Core/Src/main.c **** 
 453:Core/Src/main.c **** /**
 454:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 455:Core/Src/main.c ****   * @retval None
 456:Core/Src/main.c ****   */
 457:Core/Src/main.c **** void Error_Handler(void)
 458:Core/Src/main.c **** {
 1267              		.loc 1 458 1 is_stmt 1 view -0
 1268              		.cfi_startproc
 1269              		@ Volatile: function does not return.
 1270              		@ args = 0, pretend = 0, frame = 0
 1271              		@ frame_needed = 0, uses_anonymous_args = 0
 1272              		@ link register save eliminated.
 459:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 460:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 461:Core/Src/main.c ****   __disable_irq();
 1273              		.loc 1 461 3 view .LVU312
 1274              	.LBB32:
 1275              	.LBI32:
 1276              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 33


   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 34


  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 35


 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 36


 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 37


 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 38


 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 39


 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 40


 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 41


 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 42


 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 43


 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 44


 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 45


 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 46


 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 47


 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 48


 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 49


 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 1277              		.loc 2 960 27 view .LVU313
 1278              	.LBB33:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1279              		.loc 2 962 3 view .LVU314
 1280              		.syntax unified
 1281              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1282 0000 72B6     		cpsid i
 1283              	@ 0 "" 2
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 50


 1284              		.thumb
 1285              		.syntax unified
 1286              	.L61:
 1287              	.LBE33:
 1288              	.LBE32:
 462:Core/Src/main.c ****   while (1)
 1289              		.loc 1 462 3 view .LVU315
 463:Core/Src/main.c ****   {
 464:Core/Src/main.c ****   }
 1290              		.loc 1 464 3 view .LVU316
 462:Core/Src/main.c ****   while (1)
 1291              		.loc 1 462 9 view .LVU317
 1292 0002 FEE7     		b	.L61
 1293              		.cfi_endproc
 1294              	.LFE143:
 1296              		.section	.text.SystemClock_Config,"ax",%progbits
 1297              		.align	1
 1298              		.global	SystemClock_Config
 1299              		.syntax unified
 1300              		.thumb
 1301              		.thumb_func
 1303              	SystemClock_Config:
 1304              	.LFB135:
 187:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1305              		.loc 1 187 1 view -0
 1306              		.cfi_startproc
 1307              		@ args = 0, pretend = 0, frame = 80
 1308              		@ frame_needed = 0, uses_anonymous_args = 0
 1309 0000 00B5     		push	{lr}
 1310              	.LCFI12:
 1311              		.cfi_def_cfa_offset 4
 1312              		.cfi_offset 14, -4
 1313 0002 95B0     		sub	sp, sp, #84
 1314              	.LCFI13:
 1315              		.cfi_def_cfa_offset 88
 188:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1316              		.loc 1 188 3 view .LVU319
 188:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1317              		.loc 1 188 22 is_stmt 0 view .LVU320
 1318 0004 3422     		movs	r2, #52
 1319 0006 0021     		movs	r1, #0
 1320 0008 07A8     		add	r0, sp, #28
 1321 000a FFF7FEFF 		bl	memset
 1322              	.LVL120:
 189:Core/Src/main.c **** 
 1323              		.loc 1 189 3 is_stmt 1 view .LVU321
 189:Core/Src/main.c **** 
 1324              		.loc 1 189 22 is_stmt 0 view .LVU322
 1325 000e 0023     		movs	r3, #0
 1326 0010 0293     		str	r3, [sp, #8]
 1327 0012 0393     		str	r3, [sp, #12]
 1328 0014 0493     		str	r3, [sp, #16]
 1329 0016 0593     		str	r3, [sp, #20]
 1330 0018 0693     		str	r3, [sp, #24]
 193:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1331              		.loc 1 193 3 is_stmt 1 view .LVU323
 1332              	.LBB34:
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 51


 193:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1333              		.loc 1 193 3 view .LVU324
 1334 001a 0093     		str	r3, [sp]
 193:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1335              		.loc 1 193 3 view .LVU325
 1336 001c 214A     		ldr	r2, .L68
 1337 001e 116C     		ldr	r1, [r2, #64]
 1338 0020 41F08051 		orr	r1, r1, #268435456
 1339 0024 1164     		str	r1, [r2, #64]
 193:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1340              		.loc 1 193 3 view .LVU326
 1341 0026 126C     		ldr	r2, [r2, #64]
 1342 0028 02F08052 		and	r2, r2, #268435456
 1343 002c 0092     		str	r2, [sp]
 193:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1344              		.loc 1 193 3 view .LVU327
 1345 002e 009A     		ldr	r2, [sp]
 1346              	.LBE34:
 193:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1347              		.loc 1 193 3 view .LVU328
 194:Core/Src/main.c **** 
 1348              		.loc 1 194 3 view .LVU329
 1349              	.LBB35:
 194:Core/Src/main.c **** 
 1350              		.loc 1 194 3 view .LVU330
 1351 0030 0193     		str	r3, [sp, #4]
 194:Core/Src/main.c **** 
 1352              		.loc 1 194 3 view .LVU331
 1353 0032 1D4A     		ldr	r2, .L68+4
 1354 0034 1368     		ldr	r3, [r2]
 1355 0036 23F44043 		bic	r3, r3, #49152
 1356 003a 43F48043 		orr	r3, r3, #16384
 1357 003e 1360     		str	r3, [r2]
 194:Core/Src/main.c **** 
 1358              		.loc 1 194 3 view .LVU332
 1359 0040 1368     		ldr	r3, [r2]
 1360 0042 03F44043 		and	r3, r3, #49152
 1361 0046 0193     		str	r3, [sp, #4]
 194:Core/Src/main.c **** 
 1362              		.loc 1 194 3 view .LVU333
 1363 0048 019B     		ldr	r3, [sp, #4]
 1364              	.LBE35:
 194:Core/Src/main.c **** 
 1365              		.loc 1 194 3 view .LVU334
 199:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 1366              		.loc 1 199 3 view .LVU335
 199:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 1367              		.loc 1 199 36 is_stmt 0 view .LVU336
 1368 004a 0123     		movs	r3, #1
 1369 004c 0793     		str	r3, [sp, #28]
 200:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1370              		.loc 1 200 3 is_stmt 1 view .LVU337
 200:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1371              		.loc 1 200 30 is_stmt 0 view .LVU338
 1372 004e 4FF48033 		mov	r3, #65536
 1373 0052 0893     		str	r3, [sp, #32]
 201:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 52


 1374              		.loc 1 201 3 is_stmt 1 view .LVU339
 201:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 1375              		.loc 1 201 34 is_stmt 0 view .LVU340
 1376 0054 0223     		movs	r3, #2
 1377 0056 0D93     		str	r3, [sp, #52]
 202:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 15;
 1378              		.loc 1 202 3 is_stmt 1 view .LVU341
 202:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 15;
 1379              		.loc 1 202 35 is_stmt 0 view .LVU342
 1380 0058 4FF48002 		mov	r2, #4194304
 1381 005c 0E92     		str	r2, [sp, #56]
 203:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 144;
 1382              		.loc 1 203 3 is_stmt 1 view .LVU343
 203:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 144;
 1383              		.loc 1 203 30 is_stmt 0 view .LVU344
 1384 005e 0F22     		movs	r2, #15
 1385 0060 0F92     		str	r2, [sp, #60]
 204:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1386              		.loc 1 204 3 is_stmt 1 view .LVU345
 204:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1387              		.loc 1 204 30 is_stmt 0 view .LVU346
 1388 0062 9022     		movs	r2, #144
 1389 0064 1092     		str	r2, [sp, #64]
 205:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 1390              		.loc 1 205 3 is_stmt 1 view .LVU347
 205:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 1391              		.loc 1 205 30 is_stmt 0 view .LVU348
 1392 0066 1193     		str	r3, [sp, #68]
 206:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 1393              		.loc 1 206 3 is_stmt 1 view .LVU349
 206:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 1394              		.loc 1 206 30 is_stmt 0 view .LVU350
 1395 0068 1293     		str	r3, [sp, #72]
 207:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1396              		.loc 1 207 3 is_stmt 1 view .LVU351
 207:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1397              		.loc 1 207 30 is_stmt 0 view .LVU352
 1398 006a 1393     		str	r3, [sp, #76]
 208:Core/Src/main.c ****   {
 1399              		.loc 1 208 3 is_stmt 1 view .LVU353
 208:Core/Src/main.c ****   {
 1400              		.loc 1 208 7 is_stmt 0 view .LVU354
 1401 006c 07A8     		add	r0, sp, #28
 1402 006e FFF7FEFF 		bl	HAL_RCC_OscConfig
 1403              	.LVL121:
 208:Core/Src/main.c ****   {
 1404              		.loc 1 208 6 discriminator 1 view .LVU355
 1405 0072 98B9     		cbnz	r0, .L66
 215:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1406              		.loc 1 215 3 is_stmt 1 view .LVU356
 215:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1407              		.loc 1 215 31 is_stmt 0 view .LVU357
 1408 0074 0F23     		movs	r3, #15
 1409 0076 0293     		str	r3, [sp, #8]
 217:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1410              		.loc 1 217 3 is_stmt 1 view .LVU358
 217:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 53


 1411              		.loc 1 217 34 is_stmt 0 view .LVU359
 1412 0078 0223     		movs	r3, #2
 1413 007a 0393     		str	r3, [sp, #12]
 218:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 1414              		.loc 1 218 3 is_stmt 1 view .LVU360
 218:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 1415              		.loc 1 218 35 is_stmt 0 view .LVU361
 1416 007c 0023     		movs	r3, #0
 1417 007e 0493     		str	r3, [sp, #16]
 219:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 1418              		.loc 1 219 3 is_stmt 1 view .LVU362
 219:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 1419              		.loc 1 219 36 is_stmt 0 view .LVU363
 1420 0080 4FF4A053 		mov	r3, #5120
 1421 0084 0593     		str	r3, [sp, #20]
 220:Core/Src/main.c **** 
 1422              		.loc 1 220 3 is_stmt 1 view .LVU364
 220:Core/Src/main.c **** 
 1423              		.loc 1 220 36 is_stmt 0 view .LVU365
 1424 0086 4FF48053 		mov	r3, #4096
 1425 008a 0693     		str	r3, [sp, #24]
 222:Core/Src/main.c ****   {
 1426              		.loc 1 222 3 is_stmt 1 view .LVU366
 222:Core/Src/main.c ****   {
 1427              		.loc 1 222 7 is_stmt 0 view .LVU367
 1428 008c 0321     		movs	r1, #3
 1429 008e 02A8     		add	r0, sp, #8
 1430 0090 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1431              	.LVL122:
 222:Core/Src/main.c ****   {
 1432              		.loc 1 222 6 discriminator 1 view .LVU368
 1433 0094 20B9     		cbnz	r0, .L67
 226:Core/Src/main.c **** 
 1434              		.loc 1 226 1 view .LVU369
 1435 0096 15B0     		add	sp, sp, #84
 1436              	.LCFI14:
 1437              		.cfi_remember_state
 1438              		.cfi_def_cfa_offset 4
 1439              		@ sp needed
 1440 0098 5DF804FB 		ldr	pc, [sp], #4
 1441              	.L66:
 1442              	.LCFI15:
 1443              		.cfi_restore_state
 210:Core/Src/main.c ****   }
 1444              		.loc 1 210 5 is_stmt 1 view .LVU370
 1445 009c FFF7FEFF 		bl	Error_Handler
 1446              	.LVL123:
 1447              	.L67:
 224:Core/Src/main.c ****   }
 1448              		.loc 1 224 5 view .LVU371
 1449 00a0 FFF7FEFF 		bl	Error_Handler
 1450              	.LVL124:
 1451              	.L69:
 1452              		.align	2
 1453              	.L68:
 1454 00a4 00380240 		.word	1073887232
 1455 00a8 00700040 		.word	1073770496
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 54


 1456              		.cfi_endproc
 1457              	.LFE135:
 1459              		.section	.text.main,"ax",%progbits
 1460              		.align	1
 1461              		.global	main
 1462              		.syntax unified
 1463              		.thumb
 1464              		.thumb_func
 1466              	main:
 1467              	.LFB134:
 102:Core/Src/main.c **** 
 1468              		.loc 1 102 1 view -0
 1469              		.cfi_startproc
 1470              		@ Volatile: function does not return.
 1471              		@ args = 0, pretend = 0, frame = 0
 1472              		@ frame_needed = 0, uses_anonymous_args = 0
 1473 0000 08B5     		push	{r3, lr}
 1474              	.LCFI16:
 1475              		.cfi_def_cfa_offset 8
 1476              		.cfi_offset 3, -8
 1477              		.cfi_offset 14, -4
 111:Core/Src/main.c **** 
 1478              		.loc 1 111 3 view .LVU373
 1479 0002 FFF7FEFF 		bl	HAL_Init
 1480              	.LVL125:
 118:Core/Src/main.c **** 
 1481              		.loc 1 118 3 view .LVU374
 1482 0006 FFF7FEFF 		bl	SystemClock_Config
 1483              	.LVL126:
 125:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1484              		.loc 1 125 3 view .LVU375
 1485 000a FFF7FEFF 		bl	MX_GPIO_Init
 1486              	.LVL127:
 132:Core/Src/main.c **** 
 1487              		.loc 1 132 4 view .LVU376
 1488 000e 0E4C     		ldr	r4, .L73
 1489 0010 0122     		movs	r2, #1
 1490 0012 1146     		mov	r1, r2
 1491 0014 2046     		mov	r0, r4
 1492 0016 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1493              	.LVL128:
 136:Core/Src/main.c **** 
 1494              		.loc 1 136 4 view .LVU377
 1495 001a FFF7FEFF 		bl	task7
 1496              	.LVL129:
 140:Core/Src/main.c **** 
 1497              		.loc 1 140 4 view .LVU378
 1498 001e 0122     		movs	r2, #1
 1499 0020 0221     		movs	r1, #2
 1500 0022 2046     		mov	r0, r4
 1501 0024 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1502              	.LVL130:
 144:Core/Src/main.c **** 
 1503              		.loc 1 144 4 view .LVU379
 1504 0028 4FF47A70 		mov	r0, #1000
 1505 002c FFF7FEFF 		bl	HAL_Delay
 1506              	.LVL131:
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 55


 147:Core/Src/main.c **** 	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 1507              		.loc 1 147 4 view .LVU380
 1508 0030 0022     		movs	r2, #0
 1509 0032 0121     		movs	r1, #1
 1510 0034 2046     		mov	r0, r4
 1511 0036 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1512              	.LVL132:
 148:Core/Src/main.c **** 
 1513              		.loc 1 148 4 view .LVU381
 1514 003a 0022     		movs	r2, #0
 1515 003c 0221     		movs	r1, #2
 1516 003e 2046     		mov	r0, r4
 1517 0040 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1518              	.LVL133:
 1519              	.L71:
 155:Core/Src/main.c ****   {
 1520              		.loc 1 155 3 view .LVU382
 178:Core/Src/main.c ****   /* USER CODE END 3 */
 1521              		.loc 1 178 3 view .LVU383
 155:Core/Src/main.c ****   {
 1522              		.loc 1 155 9 view .LVU384
 1523 0044 FEE7     		b	.L71
 1524              	.L74:
 1525 0046 00BF     		.align	2
 1526              	.L73:
 1527 0048 00040240 		.word	1073873920
 1528              		.cfi_endproc
 1529              	.LFE134:
 1531              		.global	task7ArrayTime
 1532              		.section	.bss.task7ArrayTime,"aw",%nobits
 1533              		.align	3
 1536              	task7ArrayTime:
 1537 0000 00000000 		.space	120
 1537      00000000 
 1537      00000000 
 1537      00000000 
 1537      00000000 
 1538              		.global	task7ArrayChecksum
 1539              		.section	.bss.task7ArrayChecksum,"aw",%nobits
 1540              		.align	3
 1543              	task7ArrayChecksum:
 1544 0000 00000000 		.space	120
 1544      00000000 
 1544      00000000 
 1544      00000000 
 1544      00000000 
 1545              		.global	arrayQ
 1546              		.section	.data.arrayQ,"aw"
 1547              		.align	2
 1550              	arrayQ:
 1551 0000 0A000000 		.word	10
 1552 0004 0D000000 		.word	13
 1553 0008 14000000 		.word	20
 1554              		.global	task2ArrayTime
 1555              		.section	.bss.task2ArrayTime,"aw",%nobits
 1556              		.align	3
 1559              	task2ArrayTime:
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 56


 1560 0000 00000000 		.space	200
 1560      00000000 
 1560      00000000 
 1560      00000000 
 1560      00000000 
 1561              		.global	task2ArrayChecksum
 1562              		.section	.bss.task2ArrayChecksum,"aw",%nobits
 1563              		.align	3
 1566              	task2ArrayChecksum:
 1567 0000 00000000 		.space	200
 1567      00000000 
 1567      00000000 
 1567      00000000 
 1567      00000000 
 1568              		.global	iterationsArray
 1569              		.section	.data.iterationsArray,"aw"
 1570              		.align	2
 1573              	iterationsArray:
 1574 0000 64000000 		.word	100
 1575 0004 FA000000 		.word	250
 1576 0008 F4010000 		.word	500
 1577 000c EE020000 		.word	750
 1578 0010 E8030000 		.word	1000
 1579              		.global	checksumArray_double
 1580              		.section	.bss.checksumArray_double,"aw",%nobits
 1581              		.align	3
 1584              	checksumArray_double:
 1585 0000 00000000 		.space	40
 1585      00000000 
 1585      00000000 
 1585      00000000 
 1585      00000000 
 1586              		.global	checksumArray_arithmetic
 1587              		.section	.bss.checksumArray_arithmetic,"aw",%nobits
 1588              		.align	3
 1591              	checksumArray_arithmetic:
 1592 0000 00000000 		.space	40
 1592      00000000 
 1592      00000000 
 1592      00000000 
 1592      00000000 
 1593              		.global	timeArray_double
 1594              		.section	.bss.timeArray_double,"aw",%nobits
 1595              		.align	3
 1598              	timeArray_double:
 1599 0000 00000000 		.space	40
 1599      00000000 
 1599      00000000 
 1599      00000000 
 1599      00000000 
 1600              		.global	timeArray_arithmetic
 1601              		.section	.bss.timeArray_arithmetic,"aw",%nobits
 1602              		.align	3
 1605              	timeArray_arithmetic:
 1606 0000 00000000 		.space	40
 1606      00000000 
 1606      00000000 
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 57


 1606      00000000 
 1606      00000000 
 1607              		.global	initial_width
 1608              		.section	.data.initial_width,"aw"
 1609              		.align	2
 1612              	initial_width:
 1613 0000 80000000 		.word	128
 1614              		.global	initial_height
 1615              		.section	.data.initial_height,"aw"
 1616              		.align	2
 1619              	initial_height:
 1620 0000 80000000 		.word	128
 1621              		.global	execution_time
 1622              		.section	.bss.execution_time,"aw",%nobits
 1623              		.align	3
 1626              	execution_time:
 1627 0000 00000000 		.space	8
 1627      00000000 
 1628              		.global	checksum
 1629              		.section	.bss.checksum,"aw",%nobits
 1630              		.align	3
 1633              	checksum:
 1634 0000 00000000 		.space	8
 1634      00000000 
 1635              		.global	imageDimensions
 1636              		.section	.data.imageDimensions,"aw"
 1637              		.align	2
 1640              	imageDimensions:
 1641 0000 80000000 		.word	128
 1642 0004 A0000000 		.word	160
 1643 0008 C0000000 		.word	192
 1644 000c E0000000 		.word	224
 1645 0010 00010000 		.word	256
 1646              		.global	end_time
 1647              		.section	.bss.end_time,"aw",%nobits
 1648              		.align	3
 1651              	end_time:
 1652 0000 00000000 		.space	8
 1652      00000000 
 1653              		.global	start_time
 1654              		.section	.bss.start_time,"aw",%nobits
 1655              		.align	3
 1658              	start_time:
 1659 0000 00000000 		.space	8
 1659      00000000 
 1660              		.text
 1661              	.Letext0:
 1662              		.file 3 "C:\\ST\\STM32CubeIDE_1.19.0\\STM32CubeIDE\\plugins\\com.st.stm32cube.ide.mcu.externaltool
 1663              		.file 4 "C:\\ST\\STM32CubeIDE_1.19.0\\STM32CubeIDE\\plugins\\com.st.stm32cube.ide.mcu.externaltool
 1664              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 1665              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1666              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1667              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1668              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1669              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1670              		.file 11 "<built-in>"
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 58


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:21     .text.MX_GPIO_Init:00000000 $t
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:26     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:133    .text.MX_GPIO_Init:00000074 $d
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:140    .text.calculate_mandelbrot_fixed_point_arithmetic:00000000 $t
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:146    .text.calculate_mandelbrot_fixed_point_arithmetic:00000000 calculate_mandelbrot_fixed_point_arithmetic
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:490    .text.calculate_mandelbrot_double:00000000 $t
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:496    .text.calculate_mandelbrot_double:00000000 calculate_mandelbrot_double
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:795    .text.calculate_mandelbrot_double:00000158 $d
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:1633   .bss.checksum:00000000 checksum
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:804    .text.task1:00000000 $t
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:810    .text.task1:00000000 task1
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:972    .text.task1:000000d4 $d
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:1658   .bss.start_time:00000000 start_time
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:1640   .data.imageDimensions:00000000 imageDimensions
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:1651   .bss.end_time:00000000 end_time
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:1626   .bss.execution_time:00000000 execution_time
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:1605   .bss.timeArray_arithmetic:00000000 timeArray_arithmetic
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:1591   .bss.checksumArray_arithmetic:00000000 checksumArray_arithmetic
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:1598   .bss.timeArray_double:00000000 timeArray_double
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:1584   .bss.checksumArray_double:00000000 checksumArray_double
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:985    .text.task2:00000000 $t
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:991    .text.task2:00000000 task2
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:1100   .text.task2:00000080 $d
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:1573   .data.iterationsArray:00000000 iterationsArray
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:1559   .bss.task2ArrayTime:00000000 task2ArrayTime
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:1566   .bss.task2ArrayChecksum:00000000 task2ArrayChecksum
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:1112   .text.task4:00000000 $t
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:1118   .text.task4:00000000 task4
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:1131   .text.task7:00000000 $t
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:1137   .text.task7:00000000 task7
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:1247   .text.task7:00000084 $d
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:1550   .data.arrayQ:00000000 arrayQ
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:1536   .bss.task7ArrayTime:00000000 task7ArrayTime
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:1543   .bss.task7ArrayChecksum:00000000 task7ArrayChecksum
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:1259   .text.Error_Handler:00000000 $t
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:1265   .text.Error_Handler:00000000 Error_Handler
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:1297   .text.SystemClock_Config:00000000 $t
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:1303   .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:1454   .text.SystemClock_Config:000000a4 $d
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:1460   .text.main:00000000 $t
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:1466   .text.main:00000000 main
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:1527   .text.main:00000048 $d
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:1533   .bss.task7ArrayTime:00000000 $d
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:1540   .bss.task7ArrayChecksum:00000000 $d
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:1547   .data.arrayQ:00000000 $d
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:1556   .bss.task2ArrayTime:00000000 $d
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:1563   .bss.task2ArrayChecksum:00000000 $d
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:1570   .data.iterationsArray:00000000 $d
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:1581   .bss.checksumArray_double:00000000 $d
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:1588   .bss.checksumArray_arithmetic:00000000 $d
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:1595   .bss.timeArray_double:00000000 $d
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:1602   .bss.timeArray_arithmetic:00000000 $d
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:1612   .data.initial_width:00000000 initial_width
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:1609   .data.initial_width:00000000 $d
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:1619   .data.initial_height:00000000 initial_height
ARM GAS  C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s 			page 59


C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:1616   .data.initial_height:00000000 $d
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:1623   .bss.execution_time:00000000 $d
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:1630   .bss.checksum:00000000 $d
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:1637   .data.imageDimensions:00000000 $d
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:1648   .bss.end_time:00000000 $d
C:\Users\maraz\AppData\Local\Temp\ccCLsIJC.s:1655   .bss.start_time:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
__aeabi_ldivmod
__aeabi_i2d
__aeabi_ddiv
__aeabi_dmul
__aeabi_dsub
__aeabi_dadd
__aeabi_dcmpgt
HAL_GetTick
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
HAL_Delay
