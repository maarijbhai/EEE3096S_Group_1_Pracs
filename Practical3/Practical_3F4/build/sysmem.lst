ARM GAS  C:\Users\maari\AppData\Local\Temp\ccZNUGNk.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"sysmem.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/sysmem.c"
  18              		.section	.text._sbrk,"ax",%progbits
  19              		.align	1
  20              		.global	_sbrk
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	_sbrk:
  26              	.LVL0:
  27              	.LFB0:
   1:Core/Src/sysmem.c **** /**
   2:Core/Src/sysmem.c ****  ******************************************************************************
   3:Core/Src/sysmem.c ****  * @file      sysmem.c
   4:Core/Src/sysmem.c ****  * @author    Generated by STM32CubeMX
   5:Core/Src/sysmem.c ****  * @brief     System Memory calls file
   6:Core/Src/sysmem.c ****  *
   7:Core/Src/sysmem.c ****  *            For more information about which C functions
   8:Core/Src/sysmem.c ****  *            need which of these lowlevel functions
   9:Core/Src/sysmem.c ****  *            please consult the Newlib or Picolibc libc manual
  10:Core/Src/sysmem.c ****  ******************************************************************************
  11:Core/Src/sysmem.c ****  * @attention
  12:Core/Src/sysmem.c ****  *
  13:Core/Src/sysmem.c ****  * Copyright (c) 2025 STMicroelectronics.
  14:Core/Src/sysmem.c ****  * All rights reserved.
  15:Core/Src/sysmem.c ****  *
  16:Core/Src/sysmem.c ****  * This software is licensed under terms that can be found in the LICENSE file
  17:Core/Src/sysmem.c ****  * in the root directory of this software component.
  18:Core/Src/sysmem.c ****  * If no LICENSE file comes with this software, it is provided AS-IS.
  19:Core/Src/sysmem.c ****  *
  20:Core/Src/sysmem.c ****  ******************************************************************************
  21:Core/Src/sysmem.c ****  */
  22:Core/Src/sysmem.c **** 
  23:Core/Src/sysmem.c **** /* Includes */
  24:Core/Src/sysmem.c **** #include <errno.h>
  25:Core/Src/sysmem.c **** #include <stdint.h>
  26:Core/Src/sysmem.c **** #include <stddef.h>
  27:Core/Src/sysmem.c **** 
  28:Core/Src/sysmem.c **** /**
  29:Core/Src/sysmem.c ****  * Pointer to the current high watermark of the heap usage
  30:Core/Src/sysmem.c ****  */
  31:Core/Src/sysmem.c **** static uint8_t *__sbrk_heap_end = NULL;
ARM GAS  C:\Users\maari\AppData\Local\Temp\ccZNUGNk.s 			page 2


  32:Core/Src/sysmem.c **** 
  33:Core/Src/sysmem.c **** /**
  34:Core/Src/sysmem.c ****  * @brief _sbrk() allocates memory to the newlib heap and is used by malloc
  35:Core/Src/sysmem.c ****  *        and others from the C library
  36:Core/Src/sysmem.c ****  *
  37:Core/Src/sysmem.c ****  * @verbatim
  38:Core/Src/sysmem.c ****  * ############################################################################
  39:Core/Src/sysmem.c ****  * #  .data  #  .bss  #       newlib heap       #          MSP stack          #
  40:Core/Src/sysmem.c ****  * #         #        #                         # Reserved by _Min_Stack_Size #
  41:Core/Src/sysmem.c ****  * ############################################################################
  42:Core/Src/sysmem.c ****  * ^-- RAM start      ^-- _end                             _estack, RAM end --^
  43:Core/Src/sysmem.c ****  * @endverbatim
  44:Core/Src/sysmem.c ****  *
  45:Core/Src/sysmem.c ****  * This implementation starts allocating at the '_end' linker symbol
  46:Core/Src/sysmem.c ****  * The '_Min_Stack_Size' linker symbol reserves a memory for the MSP stack
  47:Core/Src/sysmem.c ****  * The implementation considers '_estack' linker symbol to be RAM end
  48:Core/Src/sysmem.c ****  * NOTE: If the MSP stack, at any point during execution, grows larger than the
  49:Core/Src/sysmem.c ****  * reserved size, please increase the '_Min_Stack_Size'.
  50:Core/Src/sysmem.c ****  *
  51:Core/Src/sysmem.c ****  * @param incr Memory size
  52:Core/Src/sysmem.c ****  * @return Pointer to allocated memory
  53:Core/Src/sysmem.c ****  */
  54:Core/Src/sysmem.c **** void *_sbrk(ptrdiff_t incr)
  55:Core/Src/sysmem.c **** {
  28              		.loc 1 55 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		.loc 1 55 1 is_stmt 0 view .LVU1
  33 0000 08B5     		push	{r3, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 3, -8
  37              		.cfi_offset 14, -4
  38 0002 0346     		mov	r3, r0
  56:Core/Src/sysmem.c ****   extern uint8_t _end; /* Symbol defined in the linker script */
  39              		.loc 1 56 3 is_stmt 1 view .LVU2
  57:Core/Src/sysmem.c ****   extern uint8_t _estack; /* Symbol defined in the linker script */
  40              		.loc 1 57 3 view .LVU3
  58:Core/Src/sysmem.c ****   extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  41              		.loc 1 58 3 view .LVU4
  59:Core/Src/sysmem.c ****   const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  42              		.loc 1 59 3 view .LVU5
  43              	.LVL1:
  60:Core/Src/sysmem.c ****   const uint8_t *max_heap = (uint8_t *)stack_limit;
  44              		.loc 1 60 3 view .LVU6
  61:Core/Src/sysmem.c ****   uint8_t *prev_heap_end;
  45              		.loc 1 61 3 view .LVU7
  62:Core/Src/sysmem.c **** 
  63:Core/Src/sysmem.c ****   /* Initialize heap end at first call */
  64:Core/Src/sysmem.c ****   if (NULL == __sbrk_heap_end)
  46              		.loc 1 64 3 view .LVU8
  47              		.loc 1 64 12 is_stmt 0 view .LVU9
  48 0004 0C4A     		ldr	r2, .L8
  49              		.loc 1 64 6 view .LVU10
  50 0006 1268     		ldr	r2, [r2]
  51 0008 52B1     		cbz	r2, .L6
ARM GAS  C:\Users\maari\AppData\Local\Temp\ccZNUGNk.s 			page 3


  52              	.L2:
  65:Core/Src/sysmem.c ****   {
  66:Core/Src/sysmem.c ****     __sbrk_heap_end = &_end;
  67:Core/Src/sysmem.c ****   }
  68:Core/Src/sysmem.c **** 
  69:Core/Src/sysmem.c ****   /* Protect heap from growing into the reserved MSP stack */
  70:Core/Src/sysmem.c ****   if (__sbrk_heap_end + incr > max_heap)
  53              		.loc 1 70 3 is_stmt 1 view .LVU11
  54              		.loc 1 70 23 is_stmt 0 view .LVU12
  55 000a 0B4A     		ldr	r2, .L8
  56 000c 1068     		ldr	r0, [r2]
  57              	.LVL2:
  58              		.loc 1 70 23 view .LVU13
  59 000e 0344     		add	r3, r3, r0
  60              	.LVL3:
  61              		.loc 1 70 6 view .LVU14
  62 0010 0A4A     		ldr	r2, .L8+4
  63 0012 0B49     		ldr	r1, .L8+8
  64 0014 521A     		subs	r2, r2, r1
  65 0016 9342     		cmp	r3, r2
  66 0018 06D8     		bhi	.L7
  71:Core/Src/sysmem.c ****   {
  72:Core/Src/sysmem.c ****     errno = ENOMEM;
  73:Core/Src/sysmem.c ****     return (void *)-1;
  74:Core/Src/sysmem.c ****   }
  75:Core/Src/sysmem.c **** 
  76:Core/Src/sysmem.c ****   prev_heap_end = __sbrk_heap_end;
  67              		.loc 1 76 3 is_stmt 1 view .LVU15
  68              	.LVL4:
  77:Core/Src/sysmem.c ****   __sbrk_heap_end += incr;
  69              		.loc 1 77 3 view .LVU16
  70              		.loc 1 77 19 is_stmt 0 view .LVU17
  71 001a 074A     		ldr	r2, .L8
  72 001c 1360     		str	r3, [r2]
  78:Core/Src/sysmem.c **** 
  79:Core/Src/sysmem.c ****   return (void *)prev_heap_end;
  73              		.loc 1 79 3 is_stmt 1 view .LVU18
  74              	.LVL5:
  75              	.L1:
  80:Core/Src/sysmem.c **** }
  76              		.loc 1 80 1 is_stmt 0 view .LVU19
  77 001e 08BD     		pop	{r3, pc}
  78              	.LVL6:
  79              	.L6:
  66:Core/Src/sysmem.c ****   }
  80              		.loc 1 66 5 is_stmt 1 view .LVU20
  66:Core/Src/sysmem.c ****   }
  81              		.loc 1 66 21 is_stmt 0 view .LVU21
  82 0020 054A     		ldr	r2, .L8
  83 0022 0849     		ldr	r1, .L8+12
  84 0024 1160     		str	r1, [r2]
  85 0026 F0E7     		b	.L2
  86              	.LVL7:
  87              	.L7:
  72:Core/Src/sysmem.c ****     return (void *)-1;
  88              		.loc 1 72 5 is_stmt 1 view .LVU22
  89 0028 FFF7FEFF 		bl	__errno
ARM GAS  C:\Users\maari\AppData\Local\Temp\ccZNUGNk.s 			page 4


  90              	.LVL8:
  72:Core/Src/sysmem.c ****     return (void *)-1;
  91              		.loc 1 72 11 is_stmt 0 discriminator 1 view .LVU23
  92 002c 0C23     		movs	r3, #12
  93 002e 0360     		str	r3, [r0]
  73:Core/Src/sysmem.c ****   }
  94              		.loc 1 73 5 is_stmt 1 view .LVU24
  73:Core/Src/sysmem.c ****   }
  95              		.loc 1 73 12 is_stmt 0 view .LVU25
  96 0030 4FF0FF30 		mov	r0, #-1
  97 0034 F3E7     		b	.L1
  98              	.L9:
  99 0036 00BF     		.align	2
 100              	.L8:
 101 0038 00000000 		.word	__sbrk_heap_end
 102 003c 00000000 		.word	_estack
 103 0040 00000000 		.word	_Min_Stack_Size
 104 0044 00000000 		.word	_end
 105              		.cfi_endproc
 106              	.LFE0:
 108              		.section	.bss.__sbrk_heap_end,"aw",%nobits
 109              		.align	2
 112              	__sbrk_heap_end:
 113 0000 00000000 		.space	4
 114              		.text
 115              	.Letext0:
 116              		.file 2 "C:\\ST\\STM32CubeIDE_1.19.0\\STM32CubeIDE\\plugins\\com.st.stm32cube.ide.mcu.externaltool
 117              		.file 3 "C:\\ST\\STM32CubeIDE_1.19.0\\STM32CubeIDE\\plugins\\com.st.stm32cube.ide.mcu.externaltool
 118              		.file 4 "C:\\ST\\STM32CubeIDE_1.19.0\\STM32CubeIDE\\plugins\\com.st.stm32cube.ide.mcu.externaltool
 119              		.file 5 "C:\\ST\\STM32CubeIDE_1.19.0\\STM32CubeIDE\\plugins\\com.st.stm32cube.ide.mcu.externaltool
ARM GAS  C:\Users\maari\AppData\Local\Temp\ccZNUGNk.s 			page 5


DEFINED SYMBOLS
                            *ABS*:00000000 sysmem.c
C:\Users\maari\AppData\Local\Temp\ccZNUGNk.s:19     .text._sbrk:00000000 $t
C:\Users\maari\AppData\Local\Temp\ccZNUGNk.s:25     .text._sbrk:00000000 _sbrk
C:\Users\maari\AppData\Local\Temp\ccZNUGNk.s:101    .text._sbrk:00000038 $d
C:\Users\maari\AppData\Local\Temp\ccZNUGNk.s:112    .bss.__sbrk_heap_end:00000000 __sbrk_heap_end
C:\Users\maari\AppData\Local\Temp\ccZNUGNk.s:109    .bss.__sbrk_heap_end:00000000 $d

UNDEFINED SYMBOLS
__errno
_estack
_Min_Stack_Size
_end
